
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.5.2
 * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
 */
Prisma.prismaVersion = {
  client: "5.5.2",
  engine: "aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id_user: 'id_user',
  name: 'name',
  avatar: 'avatar',
  TwoFactor: 'TwoFactor',
  ISVERIDIED: 'ISVERIDIED',
  IsFirstTime: 'IsFirstTime',
  InGame: 'InGame',
  secretKey: 'secretKey',
  About: 'About',
  status_user: 'status_user',
  email: 'email',
  WonBot: 'WonBot',
  LoseBot: 'LoseBot',
  wins: 'wins',
  losses: 'losses',
  games_played: 'games_played',
  Progress: 'Progress',
  Wins_percent: 'Wins_percent',
  Losses_percent: 'Losses_percent',
  homies: 'homies',
  invited: 'invited',
  homie_id: 'homie_id'
};

exports.Prisma.AchievmentsScalarFieldEnum = {
  id: 'id',
  achieve: 'achieve',
  msg: 'msg',
  userId: 'userId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  AcceptFriend: 'AcceptFriend',
  GameInvitation: 'GameInvitation',
  id_user: 'id_user',
  email: 'email',
  avatar: 'avatar',
  name: 'name',
  createdAt: 'createdAt'
};

exports.Prisma.StatScalarFieldEnum = {
  id_stat: 'id_stat',
  result: 'result',
  level: 'level',
  achievment: 'achievment',
  userId: 'userId'
};

exports.Prisma.HistoryScalarFieldEnum = {
  winner: 'winner',
  id_history: 'id_history',
  useravatar: 'useravatar',
  username: 'username',
  userId: 'userId',
  userscore: 'userscore',
  enemyId: 'enemyId',
  enemyname: 'enemyname',
  enemyavatar: 'enemyavatar',
  enemyscore: 'enemyscore'
};

exports.Prisma.BlockedUserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  id_blocked_user: 'id_blocked_user'
};

exports.Prisma.FreindScalarFieldEnum = {
  id: 'id',
  name: 'name',
  userId: 'userId',
  id_freind: 'id_freind'
};

exports.Prisma.DmScalarFieldEnum = {
  id_dm: 'id_dm',
  senderId: 'senderId',
  receiverId: 'receiverId',
  unread: 'unread',
  pinned: 'pinned'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  text: 'text',
  dateSent: 'dateSent',
  outgoing: 'outgoing',
  incoming: 'incoming',
  type: 'type',
  idDm: 'idDm'
};

exports.Prisma.ChannelScalarFieldEnum = {
  id_channel: 'id_channel',
  name: 'name',
  img: 'img',
  visibility: 'visibility',
  password: 'password'
};

exports.Prisma.MemberChannelScalarFieldEnum = {
  userId: 'userId',
  channelId: 'channelId',
  status_UserInChannel: 'status_UserInChannel',
  muted: 'muted',
  period: 'period'
};

exports.Prisma.DiscussionScalarFieldEnum = {
  id_disc: 'id_disc',
  message: 'message',
  dateSent: 'dateSent',
  userId: 'userId',
  channelId: 'channelId'
};

exports.Prisma.ChannelBanScalarFieldEnum = {
  bannedUserId: 'bannedUserId',
  channelId: 'channelId',
  status_User: 'status_User'
};

exports.Prisma.SaveBannedScalarFieldEnum = {
  id: 'id',
  bannedUserId: 'bannedUserId',
  channelId: 'channelId',
  status_User: 'status_User'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Achievments: 'Achievments',
  Notification: 'Notification',
  Stat: 'Stat',
  History: 'History',
  BlockedUser: 'BlockedUser',
  Freind: 'Freind',
  Dm: 'Dm',
  Conversation: 'Conversation',
  Channel: 'Channel',
  MemberChannel: 'MemberChannel',
  Discussion: 'Discussion',
  ChannelBan: 'ChannelBan',
  saveBanned: 'saveBanned'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
