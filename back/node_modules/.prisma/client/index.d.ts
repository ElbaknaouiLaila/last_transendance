
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Achievments
 * 
 */
export type Achievments = $Result.DefaultSelection<Prisma.$AchievmentsPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Stat
 * 
 */
export type Stat = $Result.DefaultSelection<Prisma.$StatPayload>
/**
 * Model History
 * 
 */
export type History = $Result.DefaultSelection<Prisma.$HistoryPayload>
/**
 * Model BlockedUser
 * 
 */
export type BlockedUser = $Result.DefaultSelection<Prisma.$BlockedUserPayload>
/**
 * Model Freind
 * 
 */
export type Freind = $Result.DefaultSelection<Prisma.$FreindPayload>
/**
 * Model Dm
 * 
 */
export type Dm = $Result.DefaultSelection<Prisma.$DmPayload>
/**
 * Model Conversation
 * 
 */
export type Conversation = $Result.DefaultSelection<Prisma.$ConversationPayload>
/**
 * Model Channel
 * 
 */
export type Channel = $Result.DefaultSelection<Prisma.$ChannelPayload>
/**
 * Model MemberChannel
 * 
 */
export type MemberChannel = $Result.DefaultSelection<Prisma.$MemberChannelPayload>
/**
 * Model Discussion
 * 
 */
export type Discussion = $Result.DefaultSelection<Prisma.$DiscussionPayload>
/**
 * Model ChannelBan
 * 
 */
export type ChannelBan = $Result.DefaultSelection<Prisma.$ChannelBanPayload>
/**
 * Model saveBanned
 * 
 */
export type saveBanned = $Result.DefaultSelection<Prisma.$saveBannedPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.achievments`: Exposes CRUD operations for the **Achievments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Achievments
    * const achievments = await prisma.achievments.findMany()
    * ```
    */
  get achievments(): Prisma.AchievmentsDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.stat`: Exposes CRUD operations for the **Stat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stats
    * const stats = await prisma.stat.findMany()
    * ```
    */
  get stat(): Prisma.StatDelegate<ExtArgs>;

  /**
   * `prisma.history`: Exposes CRUD operations for the **History** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Histories
    * const histories = await prisma.history.findMany()
    * ```
    */
  get history(): Prisma.HistoryDelegate<ExtArgs>;

  /**
   * `prisma.blockedUser`: Exposes CRUD operations for the **BlockedUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BlockedUsers
    * const blockedUsers = await prisma.blockedUser.findMany()
    * ```
    */
  get blockedUser(): Prisma.BlockedUserDelegate<ExtArgs>;

  /**
   * `prisma.freind`: Exposes CRUD operations for the **Freind** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Freinds
    * const freinds = await prisma.freind.findMany()
    * ```
    */
  get freind(): Prisma.FreindDelegate<ExtArgs>;

  /**
   * `prisma.dm`: Exposes CRUD operations for the **Dm** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dms
    * const dms = await prisma.dm.findMany()
    * ```
    */
  get dm(): Prisma.DmDelegate<ExtArgs>;

  /**
   * `prisma.conversation`: Exposes CRUD operations for the **Conversation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conversations
    * const conversations = await prisma.conversation.findMany()
    * ```
    */
  get conversation(): Prisma.ConversationDelegate<ExtArgs>;

  /**
   * `prisma.channel`: Exposes CRUD operations for the **Channel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Channels
    * const channels = await prisma.channel.findMany()
    * ```
    */
  get channel(): Prisma.ChannelDelegate<ExtArgs>;

  /**
   * `prisma.memberChannel`: Exposes CRUD operations for the **MemberChannel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MemberChannels
    * const memberChannels = await prisma.memberChannel.findMany()
    * ```
    */
  get memberChannel(): Prisma.MemberChannelDelegate<ExtArgs>;

  /**
   * `prisma.discussion`: Exposes CRUD operations for the **Discussion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Discussions
    * const discussions = await prisma.discussion.findMany()
    * ```
    */
  get discussion(): Prisma.DiscussionDelegate<ExtArgs>;

  /**
   * `prisma.channelBan`: Exposes CRUD operations for the **ChannelBan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChannelBans
    * const channelBans = await prisma.channelBan.findMany()
    * ```
    */
  get channelBan(): Prisma.ChannelBanDelegate<ExtArgs>;

  /**
   * `prisma.saveBanned`: Exposes CRUD operations for the **saveBanned** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SaveBanneds
    * const saveBanneds = await prisma.saveBanned.findMany()
    * ```
    */
  get saveBanned(): Prisma.saveBannedDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.5.2
   * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Achievments: 'Achievments',
    Notification: 'Notification',
    Stat: 'Stat',
    History: 'History',
    BlockedUser: 'BlockedUser',
    Freind: 'Freind',
    Dm: 'Dm',
    Conversation: 'Conversation',
    Channel: 'Channel',
    MemberChannel: 'MemberChannel',
    Discussion: 'Discussion',
    ChannelBan: 'ChannelBan',
    saveBanned: 'saveBanned'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'achievments' | 'notification' | 'stat' | 'history' | 'blockedUser' | 'freind' | 'dm' | 'conversation' | 'channel' | 'memberChannel' | 'discussion' | 'channelBan' | 'saveBanned'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Achievments: {
        payload: Prisma.$AchievmentsPayload<ExtArgs>
        fields: Prisma.AchievmentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AchievmentsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AchievmentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AchievmentsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AchievmentsPayload>
          }
          findFirst: {
            args: Prisma.AchievmentsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AchievmentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AchievmentsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AchievmentsPayload>
          }
          findMany: {
            args: Prisma.AchievmentsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AchievmentsPayload>[]
          }
          create: {
            args: Prisma.AchievmentsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AchievmentsPayload>
          }
          createMany: {
            args: Prisma.AchievmentsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AchievmentsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AchievmentsPayload>
          }
          update: {
            args: Prisma.AchievmentsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AchievmentsPayload>
          }
          deleteMany: {
            args: Prisma.AchievmentsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AchievmentsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AchievmentsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AchievmentsPayload>
          }
          aggregate: {
            args: Prisma.AchievmentsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAchievments>
          }
          groupBy: {
            args: Prisma.AchievmentsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AchievmentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.AchievmentsCountArgs<ExtArgs>,
            result: $Utils.Optional<AchievmentsCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Stat: {
        payload: Prisma.$StatPayload<ExtArgs>
        fields: Prisma.StatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatPayload>
          }
          findFirst: {
            args: Prisma.StatFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatPayload>
          }
          findMany: {
            args: Prisma.StatFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatPayload>[]
          }
          create: {
            args: Prisma.StatCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatPayload>
          }
          createMany: {
            args: Prisma.StatCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StatDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatPayload>
          }
          update: {
            args: Prisma.StatUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatPayload>
          }
          deleteMany: {
            args: Prisma.StatDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StatUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StatUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatPayload>
          }
          aggregate: {
            args: Prisma.StatAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStat>
          }
          groupBy: {
            args: Prisma.StatGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StatGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatCountArgs<ExtArgs>,
            result: $Utils.Optional<StatCountAggregateOutputType> | number
          }
        }
      }
      History: {
        payload: Prisma.$HistoryPayload<ExtArgs>
        fields: Prisma.HistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HistoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HistoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          findFirst: {
            args: Prisma.HistoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HistoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          findMany: {
            args: Prisma.HistoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>[]
          }
          create: {
            args: Prisma.HistoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          createMany: {
            args: Prisma.HistoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HistoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          update: {
            args: Prisma.HistoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          deleteMany: {
            args: Prisma.HistoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HistoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HistoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          aggregate: {
            args: Prisma.HistoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHistory>
          }
          groupBy: {
            args: Prisma.HistoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.HistoryCountArgs<ExtArgs>,
            result: $Utils.Optional<HistoryCountAggregateOutputType> | number
          }
        }
      }
      BlockedUser: {
        payload: Prisma.$BlockedUserPayload<ExtArgs>
        fields: Prisma.BlockedUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BlockedUserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlockedUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BlockedUserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlockedUserPayload>
          }
          findFirst: {
            args: Prisma.BlockedUserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlockedUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BlockedUserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlockedUserPayload>
          }
          findMany: {
            args: Prisma.BlockedUserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlockedUserPayload>[]
          }
          create: {
            args: Prisma.BlockedUserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlockedUserPayload>
          }
          createMany: {
            args: Prisma.BlockedUserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BlockedUserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlockedUserPayload>
          }
          update: {
            args: Prisma.BlockedUserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlockedUserPayload>
          }
          deleteMany: {
            args: Prisma.BlockedUserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BlockedUserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BlockedUserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlockedUserPayload>
          }
          aggregate: {
            args: Prisma.BlockedUserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBlockedUser>
          }
          groupBy: {
            args: Prisma.BlockedUserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BlockedUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.BlockedUserCountArgs<ExtArgs>,
            result: $Utils.Optional<BlockedUserCountAggregateOutputType> | number
          }
        }
      }
      Freind: {
        payload: Prisma.$FreindPayload<ExtArgs>
        fields: Prisma.FreindFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FreindFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FreindPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FreindFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FreindPayload>
          }
          findFirst: {
            args: Prisma.FreindFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FreindPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FreindFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FreindPayload>
          }
          findMany: {
            args: Prisma.FreindFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FreindPayload>[]
          }
          create: {
            args: Prisma.FreindCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FreindPayload>
          }
          createMany: {
            args: Prisma.FreindCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FreindDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FreindPayload>
          }
          update: {
            args: Prisma.FreindUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FreindPayload>
          }
          deleteMany: {
            args: Prisma.FreindDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FreindUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FreindUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FreindPayload>
          }
          aggregate: {
            args: Prisma.FreindAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFreind>
          }
          groupBy: {
            args: Prisma.FreindGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FreindGroupByOutputType>[]
          }
          count: {
            args: Prisma.FreindCountArgs<ExtArgs>,
            result: $Utils.Optional<FreindCountAggregateOutputType> | number
          }
        }
      }
      Dm: {
        payload: Prisma.$DmPayload<ExtArgs>
        fields: Prisma.DmFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DmFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DmPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DmFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DmPayload>
          }
          findFirst: {
            args: Prisma.DmFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DmPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DmFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DmPayload>
          }
          findMany: {
            args: Prisma.DmFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DmPayload>[]
          }
          create: {
            args: Prisma.DmCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DmPayload>
          }
          createMany: {
            args: Prisma.DmCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DmDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DmPayload>
          }
          update: {
            args: Prisma.DmUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DmPayload>
          }
          deleteMany: {
            args: Prisma.DmDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DmUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DmUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DmPayload>
          }
          aggregate: {
            args: Prisma.DmAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDm>
          }
          groupBy: {
            args: Prisma.DmGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DmGroupByOutputType>[]
          }
          count: {
            args: Prisma.DmCountArgs<ExtArgs>,
            result: $Utils.Optional<DmCountAggregateOutputType> | number
          }
        }
      }
      Conversation: {
        payload: Prisma.$ConversationPayload<ExtArgs>
        fields: Prisma.ConversationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConversationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConversationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          findFirst: {
            args: Prisma.ConversationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConversationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          findMany: {
            args: Prisma.ConversationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>[]
          }
          create: {
            args: Prisma.ConversationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          createMany: {
            args: Prisma.ConversationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ConversationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          update: {
            args: Prisma.ConversationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          deleteMany: {
            args: Prisma.ConversationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ConversationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ConversationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          aggregate: {
            args: Prisma.ConversationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateConversation>
          }
          groupBy: {
            args: Prisma.ConversationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ConversationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConversationCountArgs<ExtArgs>,
            result: $Utils.Optional<ConversationCountAggregateOutputType> | number
          }
        }
      }
      Channel: {
        payload: Prisma.$ChannelPayload<ExtArgs>
        fields: Prisma.ChannelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChannelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChannelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          findFirst: {
            args: Prisma.ChannelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChannelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          findMany: {
            args: Prisma.ChannelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>[]
          }
          create: {
            args: Prisma.ChannelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          createMany: {
            args: Prisma.ChannelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChannelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          update: {
            args: Prisma.ChannelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          deleteMany: {
            args: Prisma.ChannelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChannelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChannelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          aggregate: {
            args: Prisma.ChannelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChannel>
          }
          groupBy: {
            args: Prisma.ChannelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChannelGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChannelCountArgs<ExtArgs>,
            result: $Utils.Optional<ChannelCountAggregateOutputType> | number
          }
        }
      }
      MemberChannel: {
        payload: Prisma.$MemberChannelPayload<ExtArgs>
        fields: Prisma.MemberChannelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MemberChannelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberChannelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MemberChannelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberChannelPayload>
          }
          findFirst: {
            args: Prisma.MemberChannelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberChannelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MemberChannelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberChannelPayload>
          }
          findMany: {
            args: Prisma.MemberChannelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberChannelPayload>[]
          }
          create: {
            args: Prisma.MemberChannelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberChannelPayload>
          }
          createMany: {
            args: Prisma.MemberChannelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MemberChannelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberChannelPayload>
          }
          update: {
            args: Prisma.MemberChannelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberChannelPayload>
          }
          deleteMany: {
            args: Prisma.MemberChannelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MemberChannelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MemberChannelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberChannelPayload>
          }
          aggregate: {
            args: Prisma.MemberChannelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMemberChannel>
          }
          groupBy: {
            args: Prisma.MemberChannelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MemberChannelGroupByOutputType>[]
          }
          count: {
            args: Prisma.MemberChannelCountArgs<ExtArgs>,
            result: $Utils.Optional<MemberChannelCountAggregateOutputType> | number
          }
        }
      }
      Discussion: {
        payload: Prisma.$DiscussionPayload<ExtArgs>
        fields: Prisma.DiscussionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiscussionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiscussionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiscussionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiscussionPayload>
          }
          findFirst: {
            args: Prisma.DiscussionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiscussionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiscussionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiscussionPayload>
          }
          findMany: {
            args: Prisma.DiscussionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiscussionPayload>[]
          }
          create: {
            args: Prisma.DiscussionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiscussionPayload>
          }
          createMany: {
            args: Prisma.DiscussionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DiscussionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiscussionPayload>
          }
          update: {
            args: Prisma.DiscussionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiscussionPayload>
          }
          deleteMany: {
            args: Prisma.DiscussionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DiscussionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DiscussionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiscussionPayload>
          }
          aggregate: {
            args: Prisma.DiscussionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDiscussion>
          }
          groupBy: {
            args: Prisma.DiscussionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DiscussionGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiscussionCountArgs<ExtArgs>,
            result: $Utils.Optional<DiscussionCountAggregateOutputType> | number
          }
        }
      }
      ChannelBan: {
        payload: Prisma.$ChannelBanPayload<ExtArgs>
        fields: Prisma.ChannelBanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChannelBanFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelBanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChannelBanFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelBanPayload>
          }
          findFirst: {
            args: Prisma.ChannelBanFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelBanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChannelBanFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelBanPayload>
          }
          findMany: {
            args: Prisma.ChannelBanFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelBanPayload>[]
          }
          create: {
            args: Prisma.ChannelBanCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelBanPayload>
          }
          createMany: {
            args: Prisma.ChannelBanCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChannelBanDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelBanPayload>
          }
          update: {
            args: Prisma.ChannelBanUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelBanPayload>
          }
          deleteMany: {
            args: Prisma.ChannelBanDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChannelBanUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChannelBanUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelBanPayload>
          }
          aggregate: {
            args: Prisma.ChannelBanAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChannelBan>
          }
          groupBy: {
            args: Prisma.ChannelBanGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChannelBanGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChannelBanCountArgs<ExtArgs>,
            result: $Utils.Optional<ChannelBanCountAggregateOutputType> | number
          }
        }
      }
      saveBanned: {
        payload: Prisma.$saveBannedPayload<ExtArgs>
        fields: Prisma.saveBannedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.saveBannedFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$saveBannedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.saveBannedFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$saveBannedPayload>
          }
          findFirst: {
            args: Prisma.saveBannedFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$saveBannedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.saveBannedFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$saveBannedPayload>
          }
          findMany: {
            args: Prisma.saveBannedFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$saveBannedPayload>[]
          }
          create: {
            args: Prisma.saveBannedCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$saveBannedPayload>
          }
          createMany: {
            args: Prisma.saveBannedCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.saveBannedDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$saveBannedPayload>
          }
          update: {
            args: Prisma.saveBannedUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$saveBannedPayload>
          }
          deleteMany: {
            args: Prisma.saveBannedDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.saveBannedUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.saveBannedUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$saveBannedPayload>
          }
          aggregate: {
            args: Prisma.SaveBannedAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSaveBanned>
          }
          groupBy: {
            args: Prisma.saveBannedGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SaveBannedGroupByOutputType>[]
          }
          count: {
            args: Prisma.saveBannedCountArgs<ExtArgs>,
            result: $Utils.Optional<SaveBannedCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    achievments: number
    history: number
    notification: number
    blockedUser: number
    freind: number
    channels: number
    sentDms: number
    recvDms: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    achievments?: boolean | UserCountOutputTypeCountAchievmentsArgs
    history?: boolean | UserCountOutputTypeCountHistoryArgs
    notification?: boolean | UserCountOutputTypeCountNotificationArgs
    blockedUser?: boolean | UserCountOutputTypeCountBlockedUserArgs
    freind?: boolean | UserCountOutputTypeCountFreindArgs
    channels?: boolean | UserCountOutputTypeCountChannelsArgs
    sentDms?: boolean | UserCountOutputTypeCountSentDmsArgs
    recvDms?: boolean | UserCountOutputTypeCountRecvDmsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAchievmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchievmentsWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoryWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBlockedUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlockedUserWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFreindArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FreindWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChannelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberChannelWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentDmsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DmWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRecvDmsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DmWhereInput
  }



  /**
   * Count Type DmCountOutputType
   */

  export type DmCountOutputType = {
    conversation: number
  }

  export type DmCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conversation?: boolean | DmCountOutputTypeCountConversationArgs
  }

  // Custom InputTypes

  /**
   * DmCountOutputType without action
   */
  export type DmCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DmCountOutputType
     */
    select?: DmCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DmCountOutputType without action
   */
  export type DmCountOutputTypeCountConversationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationWhereInput
  }



  /**
   * Count Type ChannelCountOutputType
   */

  export type ChannelCountOutputType = {
    users: number
  }

  export type ChannelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | ChannelCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes

  /**
   * ChannelCountOutputType without action
   */
  export type ChannelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelCountOutputType
     */
    select?: ChannelCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ChannelCountOutputType without action
   */
  export type ChannelCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberChannelWhereInput
  }



  /**
   * Count Type MemberChannelCountOutputType
   */

  export type MemberChannelCountOutputType = {
    discussions: number
  }

  export type MemberChannelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discussions?: boolean | MemberChannelCountOutputTypeCountDiscussionsArgs
  }

  // Custom InputTypes

  /**
   * MemberChannelCountOutputType without action
   */
  export type MemberChannelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberChannelCountOutputType
     */
    select?: MemberChannelCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MemberChannelCountOutputType without action
   */
  export type MemberChannelCountOutputTypeCountDiscussionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id_user: number | null
    WonBot: number | null
    LoseBot: number | null
    wins: number | null
    losses: number | null
    games_played: number | null
    Progress: number | null
    Wins_percent: number | null
    Losses_percent: number | null
    homie_id: number | null
  }

  export type UserSumAggregateOutputType = {
    id_user: number | null
    WonBot: number | null
    LoseBot: number | null
    wins: number | null
    losses: number | null
    games_played: number | null
    Progress: number | null
    Wins_percent: number | null
    Losses_percent: number | null
    homie_id: number | null
  }

  export type UserMinAggregateOutputType = {
    id_user: number | null
    name: string | null
    avatar: string | null
    TwoFactor: boolean | null
    ISVERIDIED: boolean | null
    IsFirstTime: boolean | null
    InGame: boolean | null
    secretKey: string | null
    About: string | null
    status_user: string | null
    email: string | null
    WonBot: number | null
    LoseBot: number | null
    wins: number | null
    losses: number | null
    games_played: number | null
    Progress: number | null
    Wins_percent: number | null
    Losses_percent: number | null
    homies: boolean | null
    invited: boolean | null
    homie_id: number | null
  }

  export type UserMaxAggregateOutputType = {
    id_user: number | null
    name: string | null
    avatar: string | null
    TwoFactor: boolean | null
    ISVERIDIED: boolean | null
    IsFirstTime: boolean | null
    InGame: boolean | null
    secretKey: string | null
    About: string | null
    status_user: string | null
    email: string | null
    WonBot: number | null
    LoseBot: number | null
    wins: number | null
    losses: number | null
    games_played: number | null
    Progress: number | null
    Wins_percent: number | null
    Losses_percent: number | null
    homies: boolean | null
    invited: boolean | null
    homie_id: number | null
  }

  export type UserCountAggregateOutputType = {
    id_user: number
    name: number
    avatar: number
    TwoFactor: number
    ISVERIDIED: number
    IsFirstTime: number
    InGame: number
    secretKey: number
    About: number
    status_user: number
    email: number
    WonBot: number
    LoseBot: number
    wins: number
    losses: number
    games_played: number
    Progress: number
    Wins_percent: number
    Losses_percent: number
    homies: number
    invited: number
    homie_id: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id_user?: true
    WonBot?: true
    LoseBot?: true
    wins?: true
    losses?: true
    games_played?: true
    Progress?: true
    Wins_percent?: true
    Losses_percent?: true
    homie_id?: true
  }

  export type UserSumAggregateInputType = {
    id_user?: true
    WonBot?: true
    LoseBot?: true
    wins?: true
    losses?: true
    games_played?: true
    Progress?: true
    Wins_percent?: true
    Losses_percent?: true
    homie_id?: true
  }

  export type UserMinAggregateInputType = {
    id_user?: true
    name?: true
    avatar?: true
    TwoFactor?: true
    ISVERIDIED?: true
    IsFirstTime?: true
    InGame?: true
    secretKey?: true
    About?: true
    status_user?: true
    email?: true
    WonBot?: true
    LoseBot?: true
    wins?: true
    losses?: true
    games_played?: true
    Progress?: true
    Wins_percent?: true
    Losses_percent?: true
    homies?: true
    invited?: true
    homie_id?: true
  }

  export type UserMaxAggregateInputType = {
    id_user?: true
    name?: true
    avatar?: true
    TwoFactor?: true
    ISVERIDIED?: true
    IsFirstTime?: true
    InGame?: true
    secretKey?: true
    About?: true
    status_user?: true
    email?: true
    WonBot?: true
    LoseBot?: true
    wins?: true
    losses?: true
    games_played?: true
    Progress?: true
    Wins_percent?: true
    Losses_percent?: true
    homies?: true
    invited?: true
    homie_id?: true
  }

  export type UserCountAggregateInputType = {
    id_user?: true
    name?: true
    avatar?: true
    TwoFactor?: true
    ISVERIDIED?: true
    IsFirstTime?: true
    InGame?: true
    secretKey?: true
    About?: true
    status_user?: true
    email?: true
    WonBot?: true
    LoseBot?: true
    wins?: true
    losses?: true
    games_played?: true
    Progress?: true
    Wins_percent?: true
    Losses_percent?: true
    homies?: true
    invited?: true
    homie_id?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id_user: number
    name: string
    avatar: string | null
    TwoFactor: boolean | null
    ISVERIDIED: boolean | null
    IsFirstTime: boolean | null
    InGame: boolean | null
    secretKey: string | null
    About: string | null
    status_user: string | null
    email: string | null
    WonBot: number | null
    LoseBot: number | null
    wins: number | null
    losses: number | null
    games_played: number | null
    Progress: number | null
    Wins_percent: number | null
    Losses_percent: number | null
    homies: boolean | null
    invited: boolean | null
    homie_id: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_user?: boolean
    name?: boolean
    avatar?: boolean
    TwoFactor?: boolean
    ISVERIDIED?: boolean
    IsFirstTime?: boolean
    InGame?: boolean
    secretKey?: boolean
    About?: boolean
    status_user?: boolean
    email?: boolean
    WonBot?: boolean
    LoseBot?: boolean
    wins?: boolean
    losses?: boolean
    games_played?: boolean
    Progress?: boolean
    Wins_percent?: boolean
    Losses_percent?: boolean
    homies?: boolean
    invited?: boolean
    homie_id?: boolean
    stat?: boolean | User$statArgs<ExtArgs>
    achievments?: boolean | User$achievmentsArgs<ExtArgs>
    history?: boolean | User$historyArgs<ExtArgs>
    notification?: boolean | User$notificationArgs<ExtArgs>
    blockedUser?: boolean | User$blockedUserArgs<ExtArgs>
    freind?: boolean | User$freindArgs<ExtArgs>
    channels?: boolean | User$channelsArgs<ExtArgs>
    sentDms?: boolean | User$sentDmsArgs<ExtArgs>
    recvDms?: boolean | User$recvDmsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id_user?: boolean
    name?: boolean
    avatar?: boolean
    TwoFactor?: boolean
    ISVERIDIED?: boolean
    IsFirstTime?: boolean
    InGame?: boolean
    secretKey?: boolean
    About?: boolean
    status_user?: boolean
    email?: boolean
    WonBot?: boolean
    LoseBot?: boolean
    wins?: boolean
    losses?: boolean
    games_played?: boolean
    Progress?: boolean
    Wins_percent?: boolean
    Losses_percent?: boolean
    homies?: boolean
    invited?: boolean
    homie_id?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stat?: boolean | User$statArgs<ExtArgs>
    achievments?: boolean | User$achievmentsArgs<ExtArgs>
    history?: boolean | User$historyArgs<ExtArgs>
    notification?: boolean | User$notificationArgs<ExtArgs>
    blockedUser?: boolean | User$blockedUserArgs<ExtArgs>
    freind?: boolean | User$freindArgs<ExtArgs>
    channels?: boolean | User$channelsArgs<ExtArgs>
    sentDms?: boolean | User$sentDmsArgs<ExtArgs>
    recvDms?: boolean | User$recvDmsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      stat: Prisma.$StatPayload<ExtArgs> | null
      achievments: Prisma.$AchievmentsPayload<ExtArgs>[]
      history: Prisma.$HistoryPayload<ExtArgs>[]
      notification: Prisma.$NotificationPayload<ExtArgs>[]
      blockedUser: Prisma.$BlockedUserPayload<ExtArgs>[]
      freind: Prisma.$FreindPayload<ExtArgs>[]
      channels: Prisma.$MemberChannelPayload<ExtArgs>[]
      sentDms: Prisma.$DmPayload<ExtArgs>[]
      recvDms: Prisma.$DmPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_user: number
      name: string
      avatar: string | null
      TwoFactor: boolean | null
      ISVERIDIED: boolean | null
      IsFirstTime: boolean | null
      InGame: boolean | null
      secretKey: string | null
      About: string | null
      status_user: string | null
      email: string | null
      WonBot: number | null
      LoseBot: number | null
      wins: number | null
      losses: number | null
      games_played: number | null
      Progress: number | null
      Wins_percent: number | null
      Losses_percent: number | null
      homies: boolean | null
      invited: boolean | null
      homie_id: number | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id_user`
     * const userWithId_userOnly = await prisma.user.findMany({ select: { id_user: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    stat<T extends User$statArgs<ExtArgs> = {}>(args?: Subset<T, User$statArgs<ExtArgs>>): Prisma__StatClient<$Result.GetResult<Prisma.$StatPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    achievments<T extends User$achievmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$achievmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievmentsPayload<ExtArgs>, T, 'findMany'> | Null>;

    history<T extends User$historyArgs<ExtArgs> = {}>(args?: Subset<T, User$historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    notification<T extends User$notificationArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    blockedUser<T extends User$blockedUserArgs<ExtArgs> = {}>(args?: Subset<T, User$blockedUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlockedUserPayload<ExtArgs>, T, 'findMany'> | Null>;

    freind<T extends User$freindArgs<ExtArgs> = {}>(args?: Subset<T, User$freindArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FreindPayload<ExtArgs>, T, 'findMany'> | Null>;

    channels<T extends User$channelsArgs<ExtArgs> = {}>(args?: Subset<T, User$channelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberChannelPayload<ExtArgs>, T, 'findMany'> | Null>;

    sentDms<T extends User$sentDmsArgs<ExtArgs> = {}>(args?: Subset<T, User$sentDmsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DmPayload<ExtArgs>, T, 'findMany'> | Null>;

    recvDms<T extends User$recvDmsArgs<ExtArgs> = {}>(args?: Subset<T, User$recvDmsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DmPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id_user: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly TwoFactor: FieldRef<"User", 'Boolean'>
    readonly ISVERIDIED: FieldRef<"User", 'Boolean'>
    readonly IsFirstTime: FieldRef<"User", 'Boolean'>
    readonly InGame: FieldRef<"User", 'Boolean'>
    readonly secretKey: FieldRef<"User", 'String'>
    readonly About: FieldRef<"User", 'String'>
    readonly status_user: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly WonBot: FieldRef<"User", 'Int'>
    readonly LoseBot: FieldRef<"User", 'Int'>
    readonly wins: FieldRef<"User", 'Int'>
    readonly losses: FieldRef<"User", 'Int'>
    readonly games_played: FieldRef<"User", 'Int'>
    readonly Progress: FieldRef<"User", 'Int'>
    readonly Wins_percent: FieldRef<"User", 'Int'>
    readonly Losses_percent: FieldRef<"User", 'Int'>
    readonly homies: FieldRef<"User", 'Boolean'>
    readonly invited: FieldRef<"User", 'Boolean'>
    readonly homie_id: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.stat
   */
  export type User$statArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stat
     */
    select?: StatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatInclude<ExtArgs> | null
    where?: StatWhereInput
  }


  /**
   * User.achievments
   */
  export type User$achievmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievments
     */
    select?: AchievmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievmentsInclude<ExtArgs> | null
    where?: AchievmentsWhereInput
    orderBy?: AchievmentsOrderByWithRelationInput | AchievmentsOrderByWithRelationInput[]
    cursor?: AchievmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AchievmentsScalarFieldEnum | AchievmentsScalarFieldEnum[]
  }


  /**
   * User.history
   */
  export type User$historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    where?: HistoryWhereInput
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    cursor?: HistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }


  /**
   * User.notification
   */
  export type User$notificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * User.blockedUser
   */
  export type User$blockedUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockedUser
     */
    select?: BlockedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedUserInclude<ExtArgs> | null
    where?: BlockedUserWhereInput
    orderBy?: BlockedUserOrderByWithRelationInput | BlockedUserOrderByWithRelationInput[]
    cursor?: BlockedUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BlockedUserScalarFieldEnum | BlockedUserScalarFieldEnum[]
  }


  /**
   * User.freind
   */
  export type User$freindArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freind
     */
    select?: FreindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreindInclude<ExtArgs> | null
    where?: FreindWhereInput
    orderBy?: FreindOrderByWithRelationInput | FreindOrderByWithRelationInput[]
    cursor?: FreindWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FreindScalarFieldEnum | FreindScalarFieldEnum[]
  }


  /**
   * User.channels
   */
  export type User$channelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberChannel
     */
    select?: MemberChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MemberChannelInclude<ExtArgs> | null
    where?: MemberChannelWhereInput
    orderBy?: MemberChannelOrderByWithRelationInput | MemberChannelOrderByWithRelationInput[]
    cursor?: MemberChannelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MemberChannelScalarFieldEnum | MemberChannelScalarFieldEnum[]
  }


  /**
   * User.sentDms
   */
  export type User$sentDmsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dm
     */
    select?: DmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DmInclude<ExtArgs> | null
    where?: DmWhereInput
    orderBy?: DmOrderByWithRelationInput | DmOrderByWithRelationInput[]
    cursor?: DmWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DmScalarFieldEnum | DmScalarFieldEnum[]
  }


  /**
   * User.recvDms
   */
  export type User$recvDmsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dm
     */
    select?: DmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DmInclude<ExtArgs> | null
    where?: DmWhereInput
    orderBy?: DmOrderByWithRelationInput | DmOrderByWithRelationInput[]
    cursor?: DmWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DmScalarFieldEnum | DmScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Achievments
   */

  export type AggregateAchievments = {
    _count: AchievmentsCountAggregateOutputType | null
    _avg: AchievmentsAvgAggregateOutputType | null
    _sum: AchievmentsSumAggregateOutputType | null
    _min: AchievmentsMinAggregateOutputType | null
    _max: AchievmentsMaxAggregateOutputType | null
  }

  export type AchievmentsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AchievmentsSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AchievmentsMinAggregateOutputType = {
    id: number | null
    achieve: string | null
    msg: string | null
    userId: number | null
  }

  export type AchievmentsMaxAggregateOutputType = {
    id: number | null
    achieve: string | null
    msg: string | null
    userId: number | null
  }

  export type AchievmentsCountAggregateOutputType = {
    id: number
    achieve: number
    msg: number
    userId: number
    _all: number
  }


  export type AchievmentsAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AchievmentsSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AchievmentsMinAggregateInputType = {
    id?: true
    achieve?: true
    msg?: true
    userId?: true
  }

  export type AchievmentsMaxAggregateInputType = {
    id?: true
    achieve?: true
    msg?: true
    userId?: true
  }

  export type AchievmentsCountAggregateInputType = {
    id?: true
    achieve?: true
    msg?: true
    userId?: true
    _all?: true
  }

  export type AchievmentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achievments to aggregate.
     */
    where?: AchievmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievments to fetch.
     */
    orderBy?: AchievmentsOrderByWithRelationInput | AchievmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AchievmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Achievments
    **/
    _count?: true | AchievmentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AchievmentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AchievmentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AchievmentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AchievmentsMaxAggregateInputType
  }

  export type GetAchievmentsAggregateType<T extends AchievmentsAggregateArgs> = {
        [P in keyof T & keyof AggregateAchievments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAchievments[P]>
      : GetScalarType<T[P], AggregateAchievments[P]>
  }




  export type AchievmentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchievmentsWhereInput
    orderBy?: AchievmentsOrderByWithAggregationInput | AchievmentsOrderByWithAggregationInput[]
    by: AchievmentsScalarFieldEnum[] | AchievmentsScalarFieldEnum
    having?: AchievmentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AchievmentsCountAggregateInputType | true
    _avg?: AchievmentsAvgAggregateInputType
    _sum?: AchievmentsSumAggregateInputType
    _min?: AchievmentsMinAggregateInputType
    _max?: AchievmentsMaxAggregateInputType
  }

  export type AchievmentsGroupByOutputType = {
    id: number
    achieve: string | null
    msg: string | null
    userId: number
    _count: AchievmentsCountAggregateOutputType | null
    _avg: AchievmentsAvgAggregateOutputType | null
    _sum: AchievmentsSumAggregateOutputType | null
    _min: AchievmentsMinAggregateOutputType | null
    _max: AchievmentsMaxAggregateOutputType | null
  }

  type GetAchievmentsGroupByPayload<T extends AchievmentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AchievmentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AchievmentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AchievmentsGroupByOutputType[P]>
            : GetScalarType<T[P], AchievmentsGroupByOutputType[P]>
        }
      >
    >


  export type AchievmentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    achieve?: boolean
    msg?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["achievments"]>

  export type AchievmentsSelectScalar = {
    id?: boolean
    achieve?: boolean
    msg?: boolean
    userId?: boolean
  }

  export type AchievmentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $AchievmentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Achievments"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      achieve: string | null
      msg: string | null
      userId: number
    }, ExtArgs["result"]["achievments"]>
    composites: {}
  }


  type AchievmentsGetPayload<S extends boolean | null | undefined | AchievmentsDefaultArgs> = $Result.GetResult<Prisma.$AchievmentsPayload, S>

  type AchievmentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AchievmentsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AchievmentsCountAggregateInputType | true
    }

  export interface AchievmentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Achievments'], meta: { name: 'Achievments' } }
    /**
     * Find zero or one Achievments that matches the filter.
     * @param {AchievmentsFindUniqueArgs} args - Arguments to find a Achievments
     * @example
     * // Get one Achievments
     * const achievments = await prisma.achievments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AchievmentsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AchievmentsFindUniqueArgs<ExtArgs>>
    ): Prisma__AchievmentsClient<$Result.GetResult<Prisma.$AchievmentsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Achievments that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AchievmentsFindUniqueOrThrowArgs} args - Arguments to find a Achievments
     * @example
     * // Get one Achievments
     * const achievments = await prisma.achievments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AchievmentsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AchievmentsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AchievmentsClient<$Result.GetResult<Prisma.$AchievmentsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Achievments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievmentsFindFirstArgs} args - Arguments to find a Achievments
     * @example
     * // Get one Achievments
     * const achievments = await prisma.achievments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AchievmentsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AchievmentsFindFirstArgs<ExtArgs>>
    ): Prisma__AchievmentsClient<$Result.GetResult<Prisma.$AchievmentsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Achievments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievmentsFindFirstOrThrowArgs} args - Arguments to find a Achievments
     * @example
     * // Get one Achievments
     * const achievments = await prisma.achievments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AchievmentsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AchievmentsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AchievmentsClient<$Result.GetResult<Prisma.$AchievmentsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Achievments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievmentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Achievments
     * const achievments = await prisma.achievments.findMany()
     * 
     * // Get first 10 Achievments
     * const achievments = await prisma.achievments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const achievmentsWithIdOnly = await prisma.achievments.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AchievmentsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AchievmentsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievmentsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Achievments.
     * @param {AchievmentsCreateArgs} args - Arguments to create a Achievments.
     * @example
     * // Create one Achievments
     * const Achievments = await prisma.achievments.create({
     *   data: {
     *     // ... data to create a Achievments
     *   }
     * })
     * 
    **/
    create<T extends AchievmentsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AchievmentsCreateArgs<ExtArgs>>
    ): Prisma__AchievmentsClient<$Result.GetResult<Prisma.$AchievmentsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Achievments.
     *     @param {AchievmentsCreateManyArgs} args - Arguments to create many Achievments.
     *     @example
     *     // Create many Achievments
     *     const achievments = await prisma.achievments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AchievmentsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AchievmentsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Achievments.
     * @param {AchievmentsDeleteArgs} args - Arguments to delete one Achievments.
     * @example
     * // Delete one Achievments
     * const Achievments = await prisma.achievments.delete({
     *   where: {
     *     // ... filter to delete one Achievments
     *   }
     * })
     * 
    **/
    delete<T extends AchievmentsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AchievmentsDeleteArgs<ExtArgs>>
    ): Prisma__AchievmentsClient<$Result.GetResult<Prisma.$AchievmentsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Achievments.
     * @param {AchievmentsUpdateArgs} args - Arguments to update one Achievments.
     * @example
     * // Update one Achievments
     * const achievments = await prisma.achievments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AchievmentsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AchievmentsUpdateArgs<ExtArgs>>
    ): Prisma__AchievmentsClient<$Result.GetResult<Prisma.$AchievmentsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Achievments.
     * @param {AchievmentsDeleteManyArgs} args - Arguments to filter Achievments to delete.
     * @example
     * // Delete a few Achievments
     * const { count } = await prisma.achievments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AchievmentsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AchievmentsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Achievments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievmentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Achievments
     * const achievments = await prisma.achievments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AchievmentsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AchievmentsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Achievments.
     * @param {AchievmentsUpsertArgs} args - Arguments to update or create a Achievments.
     * @example
     * // Update or create a Achievments
     * const achievments = await prisma.achievments.upsert({
     *   create: {
     *     // ... data to create a Achievments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Achievments we want to update
     *   }
     * })
    **/
    upsert<T extends AchievmentsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AchievmentsUpsertArgs<ExtArgs>>
    ): Prisma__AchievmentsClient<$Result.GetResult<Prisma.$AchievmentsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Achievments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievmentsCountArgs} args - Arguments to filter Achievments to count.
     * @example
     * // Count the number of Achievments
     * const count = await prisma.achievments.count({
     *   where: {
     *     // ... the filter for the Achievments we want to count
     *   }
     * })
    **/
    count<T extends AchievmentsCountArgs>(
      args?: Subset<T, AchievmentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AchievmentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Achievments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievmentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AchievmentsAggregateArgs>(args: Subset<T, AchievmentsAggregateArgs>): Prisma.PrismaPromise<GetAchievmentsAggregateType<T>>

    /**
     * Group by Achievments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievmentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AchievmentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AchievmentsGroupByArgs['orderBy'] }
        : { orderBy?: AchievmentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AchievmentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAchievmentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Achievments model
   */
  readonly fields: AchievmentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Achievments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AchievmentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Achievments model
   */ 
  interface AchievmentsFieldRefs {
    readonly id: FieldRef<"Achievments", 'Int'>
    readonly achieve: FieldRef<"Achievments", 'String'>
    readonly msg: FieldRef<"Achievments", 'String'>
    readonly userId: FieldRef<"Achievments", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Achievments findUnique
   */
  export type AchievmentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievments
     */
    select?: AchievmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievmentsInclude<ExtArgs> | null
    /**
     * Filter, which Achievments to fetch.
     */
    where: AchievmentsWhereUniqueInput
  }


  /**
   * Achievments findUniqueOrThrow
   */
  export type AchievmentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievments
     */
    select?: AchievmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievmentsInclude<ExtArgs> | null
    /**
     * Filter, which Achievments to fetch.
     */
    where: AchievmentsWhereUniqueInput
  }


  /**
   * Achievments findFirst
   */
  export type AchievmentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievments
     */
    select?: AchievmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievmentsInclude<ExtArgs> | null
    /**
     * Filter, which Achievments to fetch.
     */
    where?: AchievmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievments to fetch.
     */
    orderBy?: AchievmentsOrderByWithRelationInput | AchievmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievments.
     */
    cursor?: AchievmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievments.
     */
    distinct?: AchievmentsScalarFieldEnum | AchievmentsScalarFieldEnum[]
  }


  /**
   * Achievments findFirstOrThrow
   */
  export type AchievmentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievments
     */
    select?: AchievmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievmentsInclude<ExtArgs> | null
    /**
     * Filter, which Achievments to fetch.
     */
    where?: AchievmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievments to fetch.
     */
    orderBy?: AchievmentsOrderByWithRelationInput | AchievmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievments.
     */
    cursor?: AchievmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievments.
     */
    distinct?: AchievmentsScalarFieldEnum | AchievmentsScalarFieldEnum[]
  }


  /**
   * Achievments findMany
   */
  export type AchievmentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievments
     */
    select?: AchievmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievmentsInclude<ExtArgs> | null
    /**
     * Filter, which Achievments to fetch.
     */
    where?: AchievmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievments to fetch.
     */
    orderBy?: AchievmentsOrderByWithRelationInput | AchievmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Achievments.
     */
    cursor?: AchievmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievments.
     */
    skip?: number
    distinct?: AchievmentsScalarFieldEnum | AchievmentsScalarFieldEnum[]
  }


  /**
   * Achievments create
   */
  export type AchievmentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievments
     */
    select?: AchievmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievmentsInclude<ExtArgs> | null
    /**
     * The data needed to create a Achievments.
     */
    data: XOR<AchievmentsCreateInput, AchievmentsUncheckedCreateInput>
  }


  /**
   * Achievments createMany
   */
  export type AchievmentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Achievments.
     */
    data: AchievmentsCreateManyInput | AchievmentsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Achievments update
   */
  export type AchievmentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievments
     */
    select?: AchievmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievmentsInclude<ExtArgs> | null
    /**
     * The data needed to update a Achievments.
     */
    data: XOR<AchievmentsUpdateInput, AchievmentsUncheckedUpdateInput>
    /**
     * Choose, which Achievments to update.
     */
    where: AchievmentsWhereUniqueInput
  }


  /**
   * Achievments updateMany
   */
  export type AchievmentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Achievments.
     */
    data: XOR<AchievmentsUpdateManyMutationInput, AchievmentsUncheckedUpdateManyInput>
    /**
     * Filter which Achievments to update
     */
    where?: AchievmentsWhereInput
  }


  /**
   * Achievments upsert
   */
  export type AchievmentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievments
     */
    select?: AchievmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievmentsInclude<ExtArgs> | null
    /**
     * The filter to search for the Achievments to update in case it exists.
     */
    where: AchievmentsWhereUniqueInput
    /**
     * In case the Achievments found by the `where` argument doesn't exist, create a new Achievments with this data.
     */
    create: XOR<AchievmentsCreateInput, AchievmentsUncheckedCreateInput>
    /**
     * In case the Achievments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AchievmentsUpdateInput, AchievmentsUncheckedUpdateInput>
  }


  /**
   * Achievments delete
   */
  export type AchievmentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievments
     */
    select?: AchievmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievmentsInclude<ExtArgs> | null
    /**
     * Filter which Achievments to delete.
     */
    where: AchievmentsWhereUniqueInput
  }


  /**
   * Achievments deleteMany
   */
  export type AchievmentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achievments to delete
     */
    where?: AchievmentsWhereInput
  }


  /**
   * Achievments without action
   */
  export type AchievmentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievments
     */
    select?: AchievmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievmentsInclude<ExtArgs> | null
  }



  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    id_user: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    userId: number | null
    id_user: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    AcceptFriend: boolean | null
    GameInvitation: boolean | null
    id_user: number | null
    email: string | null
    avatar: string | null
    name: string | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    AcceptFriend: boolean | null
    GameInvitation: boolean | null
    id_user: number | null
    email: string | null
    avatar: string | null
    name: string | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    AcceptFriend: number
    GameInvitation: number
    id_user: number
    email: number
    avatar: number
    name: number
    createdAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    userId?: true
    id_user?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    userId?: true
    id_user?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    AcceptFriend?: true
    GameInvitation?: true
    id_user?: true
    email?: true
    avatar?: true
    name?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    AcceptFriend?: true
    GameInvitation?: true
    id_user?: true
    email?: true
    avatar?: true
    name?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    AcceptFriend?: true
    GameInvitation?: true
    id_user?: true
    email?: true
    avatar?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    userId: number
    AcceptFriend: boolean | null
    GameInvitation: boolean | null
    id_user: number | null
    email: string | null
    avatar: string | null
    name: string | null
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    AcceptFriend?: boolean
    GameInvitation?: boolean
    id_user?: boolean
    email?: boolean
    avatar?: boolean
    name?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    AcceptFriend?: boolean
    GameInvitation?: boolean
    id_user?: boolean
    email?: boolean
    avatar?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      AcceptFriend: boolean | null
      GameInvitation: boolean | null
      id_user: number | null
      email: string | null
      avatar: string | null
      name: string | null
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }


  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
    **/
    create<T extends NotificationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Notifications.
     *     @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notification = await prisma.notification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
    **/
    delete<T extends NotificationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly userId: FieldRef<"Notification", 'Int'>
    readonly AcceptFriend: FieldRef<"Notification", 'Boolean'>
    readonly GameInvitation: FieldRef<"Notification", 'Boolean'>
    readonly id_user: FieldRef<"Notification", 'Int'>
    readonly email: FieldRef<"Notification", 'String'>
    readonly avatar: FieldRef<"Notification", 'String'>
    readonly name: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }


  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }


  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
  }



  /**
   * Model Stat
   */

  export type AggregateStat = {
    _count: StatCountAggregateOutputType | null
    _avg: StatAvgAggregateOutputType | null
    _sum: StatSumAggregateOutputType | null
    _min: StatMinAggregateOutputType | null
    _max: StatMaxAggregateOutputType | null
  }

  export type StatAvgAggregateOutputType = {
    id_stat: number | null
    level: number | null
    userId: number | null
  }

  export type StatSumAggregateOutputType = {
    id_stat: number | null
    level: number | null
    userId: number | null
  }

  export type StatMinAggregateOutputType = {
    id_stat: number | null
    result: string | null
    level: number | null
    achievment: string | null
    userId: number | null
  }

  export type StatMaxAggregateOutputType = {
    id_stat: number | null
    result: string | null
    level: number | null
    achievment: string | null
    userId: number | null
  }

  export type StatCountAggregateOutputType = {
    id_stat: number
    result: number
    level: number
    achievment: number
    userId: number
    _all: number
  }


  export type StatAvgAggregateInputType = {
    id_stat?: true
    level?: true
    userId?: true
  }

  export type StatSumAggregateInputType = {
    id_stat?: true
    level?: true
    userId?: true
  }

  export type StatMinAggregateInputType = {
    id_stat?: true
    result?: true
    level?: true
    achievment?: true
    userId?: true
  }

  export type StatMaxAggregateInputType = {
    id_stat?: true
    result?: true
    level?: true
    achievment?: true
    userId?: true
  }

  export type StatCountAggregateInputType = {
    id_stat?: true
    result?: true
    level?: true
    achievment?: true
    userId?: true
    _all?: true
  }

  export type StatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stat to aggregate.
     */
    where?: StatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stats to fetch.
     */
    orderBy?: StatOrderByWithRelationInput | StatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stats
    **/
    _count?: true | StatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatMaxAggregateInputType
  }

  export type GetStatAggregateType<T extends StatAggregateArgs> = {
        [P in keyof T & keyof AggregateStat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStat[P]>
      : GetScalarType<T[P], AggregateStat[P]>
  }




  export type StatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatWhereInput
    orderBy?: StatOrderByWithAggregationInput | StatOrderByWithAggregationInput[]
    by: StatScalarFieldEnum[] | StatScalarFieldEnum
    having?: StatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatCountAggregateInputType | true
    _avg?: StatAvgAggregateInputType
    _sum?: StatSumAggregateInputType
    _min?: StatMinAggregateInputType
    _max?: StatMaxAggregateInputType
  }

  export type StatGroupByOutputType = {
    id_stat: number
    result: string
    level: number
    achievment: string
    userId: number
    _count: StatCountAggregateOutputType | null
    _avg: StatAvgAggregateOutputType | null
    _sum: StatSumAggregateOutputType | null
    _min: StatMinAggregateOutputType | null
    _max: StatMaxAggregateOutputType | null
  }

  type GetStatGroupByPayload<T extends StatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatGroupByOutputType[P]>
            : GetScalarType<T[P], StatGroupByOutputType[P]>
        }
      >
    >


  export type StatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_stat?: boolean
    result?: boolean
    level?: boolean
    achievment?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stat"]>

  export type StatSelectScalar = {
    id_stat?: boolean
    result?: boolean
    level?: boolean
    achievment?: boolean
    userId?: boolean
  }

  export type StatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $StatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stat"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_stat: number
      result: string
      level: number
      achievment: string
      userId: number
    }, ExtArgs["result"]["stat"]>
    composites: {}
  }


  type StatGetPayload<S extends boolean | null | undefined | StatDefaultArgs> = $Result.GetResult<Prisma.$StatPayload, S>

  type StatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StatFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: StatCountAggregateInputType | true
    }

  export interface StatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stat'], meta: { name: 'Stat' } }
    /**
     * Find zero or one Stat that matches the filter.
     * @param {StatFindUniqueArgs} args - Arguments to find a Stat
     * @example
     * // Get one Stat
     * const stat = await prisma.stat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StatFindUniqueArgs<ExtArgs>>
    ): Prisma__StatClient<$Result.GetResult<Prisma.$StatPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Stat that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StatFindUniqueOrThrowArgs} args - Arguments to find a Stat
     * @example
     * // Get one Stat
     * const stat = await prisma.stat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StatFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StatClient<$Result.GetResult<Prisma.$StatPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Stat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatFindFirstArgs} args - Arguments to find a Stat
     * @example
     * // Get one Stat
     * const stat = await prisma.stat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StatFindFirstArgs<ExtArgs>>
    ): Prisma__StatClient<$Result.GetResult<Prisma.$StatPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Stat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatFindFirstOrThrowArgs} args - Arguments to find a Stat
     * @example
     * // Get one Stat
     * const stat = await prisma.stat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StatFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StatClient<$Result.GetResult<Prisma.$StatPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Stats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stats
     * const stats = await prisma.stat.findMany()
     * 
     * // Get first 10 Stats
     * const stats = await prisma.stat.findMany({ take: 10 })
     * 
     * // Only select the `id_stat`
     * const statWithId_statOnly = await prisma.stat.findMany({ select: { id_stat: true } })
     * 
    **/
    findMany<T extends StatFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Stat.
     * @param {StatCreateArgs} args - Arguments to create a Stat.
     * @example
     * // Create one Stat
     * const Stat = await prisma.stat.create({
     *   data: {
     *     // ... data to create a Stat
     *   }
     * })
     * 
    **/
    create<T extends StatCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StatCreateArgs<ExtArgs>>
    ): Prisma__StatClient<$Result.GetResult<Prisma.$StatPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Stats.
     *     @param {StatCreateManyArgs} args - Arguments to create many Stats.
     *     @example
     *     // Create many Stats
     *     const stat = await prisma.stat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StatCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Stat.
     * @param {StatDeleteArgs} args - Arguments to delete one Stat.
     * @example
     * // Delete one Stat
     * const Stat = await prisma.stat.delete({
     *   where: {
     *     // ... filter to delete one Stat
     *   }
     * })
     * 
    **/
    delete<T extends StatDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StatDeleteArgs<ExtArgs>>
    ): Prisma__StatClient<$Result.GetResult<Prisma.$StatPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Stat.
     * @param {StatUpdateArgs} args - Arguments to update one Stat.
     * @example
     * // Update one Stat
     * const stat = await prisma.stat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StatUpdateArgs<ExtArgs>>
    ): Prisma__StatClient<$Result.GetResult<Prisma.$StatPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Stats.
     * @param {StatDeleteManyArgs} args - Arguments to filter Stats to delete.
     * @example
     * // Delete a few Stats
     * const { count } = await prisma.stat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stats
     * const stat = await prisma.stat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StatUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Stat.
     * @param {StatUpsertArgs} args - Arguments to update or create a Stat.
     * @example
     * // Update or create a Stat
     * const stat = await prisma.stat.upsert({
     *   create: {
     *     // ... data to create a Stat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stat we want to update
     *   }
     * })
    **/
    upsert<T extends StatUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StatUpsertArgs<ExtArgs>>
    ): Prisma__StatClient<$Result.GetResult<Prisma.$StatPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Stats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatCountArgs} args - Arguments to filter Stats to count.
     * @example
     * // Count the number of Stats
     * const count = await prisma.stat.count({
     *   where: {
     *     // ... the filter for the Stats we want to count
     *   }
     * })
    **/
    count<T extends StatCountArgs>(
      args?: Subset<T, StatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatAggregateArgs>(args: Subset<T, StatAggregateArgs>): Prisma.PrismaPromise<GetStatAggregateType<T>>

    /**
     * Group by Stat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatGroupByArgs['orderBy'] }
        : { orderBy?: StatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stat model
   */
  readonly fields: StatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Stat model
   */ 
  interface StatFieldRefs {
    readonly id_stat: FieldRef<"Stat", 'Int'>
    readonly result: FieldRef<"Stat", 'String'>
    readonly level: FieldRef<"Stat", 'Int'>
    readonly achievment: FieldRef<"Stat", 'String'>
    readonly userId: FieldRef<"Stat", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Stat findUnique
   */
  export type StatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stat
     */
    select?: StatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatInclude<ExtArgs> | null
    /**
     * Filter, which Stat to fetch.
     */
    where: StatWhereUniqueInput
  }


  /**
   * Stat findUniqueOrThrow
   */
  export type StatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stat
     */
    select?: StatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatInclude<ExtArgs> | null
    /**
     * Filter, which Stat to fetch.
     */
    where: StatWhereUniqueInput
  }


  /**
   * Stat findFirst
   */
  export type StatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stat
     */
    select?: StatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatInclude<ExtArgs> | null
    /**
     * Filter, which Stat to fetch.
     */
    where?: StatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stats to fetch.
     */
    orderBy?: StatOrderByWithRelationInput | StatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stats.
     */
    cursor?: StatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stats.
     */
    distinct?: StatScalarFieldEnum | StatScalarFieldEnum[]
  }


  /**
   * Stat findFirstOrThrow
   */
  export type StatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stat
     */
    select?: StatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatInclude<ExtArgs> | null
    /**
     * Filter, which Stat to fetch.
     */
    where?: StatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stats to fetch.
     */
    orderBy?: StatOrderByWithRelationInput | StatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stats.
     */
    cursor?: StatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stats.
     */
    distinct?: StatScalarFieldEnum | StatScalarFieldEnum[]
  }


  /**
   * Stat findMany
   */
  export type StatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stat
     */
    select?: StatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatInclude<ExtArgs> | null
    /**
     * Filter, which Stats to fetch.
     */
    where?: StatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stats to fetch.
     */
    orderBy?: StatOrderByWithRelationInput | StatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stats.
     */
    cursor?: StatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stats.
     */
    skip?: number
    distinct?: StatScalarFieldEnum | StatScalarFieldEnum[]
  }


  /**
   * Stat create
   */
  export type StatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stat
     */
    select?: StatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatInclude<ExtArgs> | null
    /**
     * The data needed to create a Stat.
     */
    data: XOR<StatCreateInput, StatUncheckedCreateInput>
  }


  /**
   * Stat createMany
   */
  export type StatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stats.
     */
    data: StatCreateManyInput | StatCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Stat update
   */
  export type StatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stat
     */
    select?: StatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatInclude<ExtArgs> | null
    /**
     * The data needed to update a Stat.
     */
    data: XOR<StatUpdateInput, StatUncheckedUpdateInput>
    /**
     * Choose, which Stat to update.
     */
    where: StatWhereUniqueInput
  }


  /**
   * Stat updateMany
   */
  export type StatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stats.
     */
    data: XOR<StatUpdateManyMutationInput, StatUncheckedUpdateManyInput>
    /**
     * Filter which Stats to update
     */
    where?: StatWhereInput
  }


  /**
   * Stat upsert
   */
  export type StatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stat
     */
    select?: StatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatInclude<ExtArgs> | null
    /**
     * The filter to search for the Stat to update in case it exists.
     */
    where: StatWhereUniqueInput
    /**
     * In case the Stat found by the `where` argument doesn't exist, create a new Stat with this data.
     */
    create: XOR<StatCreateInput, StatUncheckedCreateInput>
    /**
     * In case the Stat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatUpdateInput, StatUncheckedUpdateInput>
  }


  /**
   * Stat delete
   */
  export type StatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stat
     */
    select?: StatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatInclude<ExtArgs> | null
    /**
     * Filter which Stat to delete.
     */
    where: StatWhereUniqueInput
  }


  /**
   * Stat deleteMany
   */
  export type StatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stats to delete
     */
    where?: StatWhereInput
  }


  /**
   * Stat without action
   */
  export type StatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stat
     */
    select?: StatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatInclude<ExtArgs> | null
  }



  /**
   * Model History
   */

  export type AggregateHistory = {
    _count: HistoryCountAggregateOutputType | null
    _avg: HistoryAvgAggregateOutputType | null
    _sum: HistorySumAggregateOutputType | null
    _min: HistoryMinAggregateOutputType | null
    _max: HistoryMaxAggregateOutputType | null
  }

  export type HistoryAvgAggregateOutputType = {
    id_history: number | null
    userId: number | null
    userscore: number | null
    enemyId: number | null
    enemyscore: number | null
  }

  export type HistorySumAggregateOutputType = {
    id_history: number | null
    userId: number | null
    userscore: number | null
    enemyId: number | null
    enemyscore: number | null
  }

  export type HistoryMinAggregateOutputType = {
    winner: boolean | null
    id_history: number | null
    useravatar: string | null
    username: string | null
    userId: number | null
    userscore: number | null
    enemyId: number | null
    enemyname: string | null
    enemyavatar: string | null
    enemyscore: number | null
  }

  export type HistoryMaxAggregateOutputType = {
    winner: boolean | null
    id_history: number | null
    useravatar: string | null
    username: string | null
    userId: number | null
    userscore: number | null
    enemyId: number | null
    enemyname: string | null
    enemyavatar: string | null
    enemyscore: number | null
  }

  export type HistoryCountAggregateOutputType = {
    winner: number
    id_history: number
    useravatar: number
    username: number
    userId: number
    userscore: number
    enemyId: number
    enemyname: number
    enemyavatar: number
    enemyscore: number
    _all: number
  }


  export type HistoryAvgAggregateInputType = {
    id_history?: true
    userId?: true
    userscore?: true
    enemyId?: true
    enemyscore?: true
  }

  export type HistorySumAggregateInputType = {
    id_history?: true
    userId?: true
    userscore?: true
    enemyId?: true
    enemyscore?: true
  }

  export type HistoryMinAggregateInputType = {
    winner?: true
    id_history?: true
    useravatar?: true
    username?: true
    userId?: true
    userscore?: true
    enemyId?: true
    enemyname?: true
    enemyavatar?: true
    enemyscore?: true
  }

  export type HistoryMaxAggregateInputType = {
    winner?: true
    id_history?: true
    useravatar?: true
    username?: true
    userId?: true
    userscore?: true
    enemyId?: true
    enemyname?: true
    enemyavatar?: true
    enemyscore?: true
  }

  export type HistoryCountAggregateInputType = {
    winner?: true
    id_history?: true
    useravatar?: true
    username?: true
    userId?: true
    userscore?: true
    enemyId?: true
    enemyname?: true
    enemyavatar?: true
    enemyscore?: true
    _all?: true
  }

  export type HistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which History to aggregate.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Histories
    **/
    _count?: true | HistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistoryMaxAggregateInputType
  }

  export type GetHistoryAggregateType<T extends HistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistory[P]>
      : GetScalarType<T[P], AggregateHistory[P]>
  }




  export type HistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoryWhereInput
    orderBy?: HistoryOrderByWithAggregationInput | HistoryOrderByWithAggregationInput[]
    by: HistoryScalarFieldEnum[] | HistoryScalarFieldEnum
    having?: HistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistoryCountAggregateInputType | true
    _avg?: HistoryAvgAggregateInputType
    _sum?: HistorySumAggregateInputType
    _min?: HistoryMinAggregateInputType
    _max?: HistoryMaxAggregateInputType
  }

  export type HistoryGroupByOutputType = {
    winner: boolean | null
    id_history: number
    useravatar: string | null
    username: string | null
    userId: number
    userscore: number | null
    enemyId: number | null
    enemyname: string | null
    enemyavatar: string | null
    enemyscore: number | null
    _count: HistoryCountAggregateOutputType | null
    _avg: HistoryAvgAggregateOutputType | null
    _sum: HistorySumAggregateOutputType | null
    _min: HistoryMinAggregateOutputType | null
    _max: HistoryMaxAggregateOutputType | null
  }

  type GetHistoryGroupByPayload<T extends HistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistoryGroupByOutputType[P]>
            : GetScalarType<T[P], HistoryGroupByOutputType[P]>
        }
      >
    >


  export type HistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    winner?: boolean
    id_history?: boolean
    useravatar?: boolean
    username?: boolean
    userId?: boolean
    userscore?: boolean
    enemyId?: boolean
    enemyname?: boolean
    enemyavatar?: boolean
    enemyscore?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["history"]>

  export type HistorySelectScalar = {
    winner?: boolean
    id_history?: boolean
    useravatar?: boolean
    username?: boolean
    userId?: boolean
    userscore?: boolean
    enemyId?: boolean
    enemyname?: boolean
    enemyavatar?: boolean
    enemyscore?: boolean
  }

  export type HistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $HistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "History"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      winner: boolean | null
      id_history: number
      useravatar: string | null
      username: string | null
      userId: number
      userscore: number | null
      enemyId: number | null
      enemyname: string | null
      enemyavatar: string | null
      enemyscore: number | null
    }, ExtArgs["result"]["history"]>
    composites: {}
  }


  type HistoryGetPayload<S extends boolean | null | undefined | HistoryDefaultArgs> = $Result.GetResult<Prisma.$HistoryPayload, S>

  type HistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HistoryFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: HistoryCountAggregateInputType | true
    }

  export interface HistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['History'], meta: { name: 'History' } }
    /**
     * Find zero or one History that matches the filter.
     * @param {HistoryFindUniqueArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HistoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryFindUniqueArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one History that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HistoryFindUniqueOrThrowArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HistoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first History that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryFindFirstArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HistoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryFindFirstArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first History that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryFindFirstOrThrowArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HistoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Histories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Histories
     * const histories = await prisma.history.findMany()
     * 
     * // Get first 10 Histories
     * const histories = await prisma.history.findMany({ take: 10 })
     * 
     * // Only select the `winner`
     * const historyWithWinnerOnly = await prisma.history.findMany({ select: { winner: true } })
     * 
    **/
    findMany<T extends HistoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a History.
     * @param {HistoryCreateArgs} args - Arguments to create a History.
     * @example
     * // Create one History
     * const History = await prisma.history.create({
     *   data: {
     *     // ... data to create a History
     *   }
     * })
     * 
    **/
    create<T extends HistoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryCreateArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Histories.
     *     @param {HistoryCreateManyArgs} args - Arguments to create many Histories.
     *     @example
     *     // Create many Histories
     *     const history = await prisma.history.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HistoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a History.
     * @param {HistoryDeleteArgs} args - Arguments to delete one History.
     * @example
     * // Delete one History
     * const History = await prisma.history.delete({
     *   where: {
     *     // ... filter to delete one History
     *   }
     * })
     * 
    **/
    delete<T extends HistoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryDeleteArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one History.
     * @param {HistoryUpdateArgs} args - Arguments to update one History.
     * @example
     * // Update one History
     * const history = await prisma.history.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HistoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryUpdateArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Histories.
     * @param {HistoryDeleteManyArgs} args - Arguments to filter Histories to delete.
     * @example
     * // Delete a few Histories
     * const { count } = await prisma.history.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HistoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Histories
     * const history = await prisma.history.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HistoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one History.
     * @param {HistoryUpsertArgs} args - Arguments to update or create a History.
     * @example
     * // Update or create a History
     * const history = await prisma.history.upsert({
     *   create: {
     *     // ... data to create a History
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the History we want to update
     *   }
     * })
    **/
    upsert<T extends HistoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryUpsertArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryCountArgs} args - Arguments to filter Histories to count.
     * @example
     * // Count the number of Histories
     * const count = await prisma.history.count({
     *   where: {
     *     // ... the filter for the Histories we want to count
     *   }
     * })
    **/
    count<T extends HistoryCountArgs>(
      args?: Subset<T, HistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a History.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistoryAggregateArgs>(args: Subset<T, HistoryAggregateArgs>): Prisma.PrismaPromise<GetHistoryAggregateType<T>>

    /**
     * Group by History.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HistoryGroupByArgs['orderBy'] }
        : { orderBy?: HistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the History model
   */
  readonly fields: HistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for History.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the History model
   */ 
  interface HistoryFieldRefs {
    readonly winner: FieldRef<"History", 'Boolean'>
    readonly id_history: FieldRef<"History", 'Int'>
    readonly useravatar: FieldRef<"History", 'String'>
    readonly username: FieldRef<"History", 'String'>
    readonly userId: FieldRef<"History", 'Int'>
    readonly userscore: FieldRef<"History", 'Int'>
    readonly enemyId: FieldRef<"History", 'Int'>
    readonly enemyname: FieldRef<"History", 'String'>
    readonly enemyavatar: FieldRef<"History", 'String'>
    readonly enemyscore: FieldRef<"History", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * History findUnique
   */
  export type HistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where: HistoryWhereUniqueInput
  }


  /**
   * History findUniqueOrThrow
   */
  export type HistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where: HistoryWhereUniqueInput
  }


  /**
   * History findFirst
   */
  export type HistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Histories.
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Histories.
     */
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }


  /**
   * History findFirstOrThrow
   */
  export type HistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Histories.
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Histories.
     */
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }


  /**
   * History findMany
   */
  export type HistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which Histories to fetch.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Histories.
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }


  /**
   * History create
   */
  export type HistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a History.
     */
    data: XOR<HistoryCreateInput, HistoryUncheckedCreateInput>
  }


  /**
   * History createMany
   */
  export type HistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Histories.
     */
    data: HistoryCreateManyInput | HistoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * History update
   */
  export type HistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a History.
     */
    data: XOR<HistoryUpdateInput, HistoryUncheckedUpdateInput>
    /**
     * Choose, which History to update.
     */
    where: HistoryWhereUniqueInput
  }


  /**
   * History updateMany
   */
  export type HistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Histories.
     */
    data: XOR<HistoryUpdateManyMutationInput, HistoryUncheckedUpdateManyInput>
    /**
     * Filter which Histories to update
     */
    where?: HistoryWhereInput
  }


  /**
   * History upsert
   */
  export type HistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the History to update in case it exists.
     */
    where: HistoryWhereUniqueInput
    /**
     * In case the History found by the `where` argument doesn't exist, create a new History with this data.
     */
    create: XOR<HistoryCreateInput, HistoryUncheckedCreateInput>
    /**
     * In case the History was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HistoryUpdateInput, HistoryUncheckedUpdateInput>
  }


  /**
   * History delete
   */
  export type HistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter which History to delete.
     */
    where: HistoryWhereUniqueInput
  }


  /**
   * History deleteMany
   */
  export type HistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Histories to delete
     */
    where?: HistoryWhereInput
  }


  /**
   * History without action
   */
  export type HistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
  }



  /**
   * Model BlockedUser
   */

  export type AggregateBlockedUser = {
    _count: BlockedUserCountAggregateOutputType | null
    _avg: BlockedUserAvgAggregateOutputType | null
    _sum: BlockedUserSumAggregateOutputType | null
    _min: BlockedUserMinAggregateOutputType | null
    _max: BlockedUserMaxAggregateOutputType | null
  }

  export type BlockedUserAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    id_blocked_user: number | null
  }

  export type BlockedUserSumAggregateOutputType = {
    id: number | null
    userId: number | null
    id_blocked_user: number | null
  }

  export type BlockedUserMinAggregateOutputType = {
    id: number | null
    userId: number | null
    id_blocked_user: number | null
  }

  export type BlockedUserMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    id_blocked_user: number | null
  }

  export type BlockedUserCountAggregateOutputType = {
    id: number
    userId: number
    id_blocked_user: number
    _all: number
  }


  export type BlockedUserAvgAggregateInputType = {
    id?: true
    userId?: true
    id_blocked_user?: true
  }

  export type BlockedUserSumAggregateInputType = {
    id?: true
    userId?: true
    id_blocked_user?: true
  }

  export type BlockedUserMinAggregateInputType = {
    id?: true
    userId?: true
    id_blocked_user?: true
  }

  export type BlockedUserMaxAggregateInputType = {
    id?: true
    userId?: true
    id_blocked_user?: true
  }

  export type BlockedUserCountAggregateInputType = {
    id?: true
    userId?: true
    id_blocked_user?: true
    _all?: true
  }

  export type BlockedUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BlockedUser to aggregate.
     */
    where?: BlockedUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockedUsers to fetch.
     */
    orderBy?: BlockedUserOrderByWithRelationInput | BlockedUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BlockedUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockedUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockedUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BlockedUsers
    **/
    _count?: true | BlockedUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BlockedUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BlockedUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlockedUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlockedUserMaxAggregateInputType
  }

  export type GetBlockedUserAggregateType<T extends BlockedUserAggregateArgs> = {
        [P in keyof T & keyof AggregateBlockedUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlockedUser[P]>
      : GetScalarType<T[P], AggregateBlockedUser[P]>
  }




  export type BlockedUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlockedUserWhereInput
    orderBy?: BlockedUserOrderByWithAggregationInput | BlockedUserOrderByWithAggregationInput[]
    by: BlockedUserScalarFieldEnum[] | BlockedUserScalarFieldEnum
    having?: BlockedUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlockedUserCountAggregateInputType | true
    _avg?: BlockedUserAvgAggregateInputType
    _sum?: BlockedUserSumAggregateInputType
    _min?: BlockedUserMinAggregateInputType
    _max?: BlockedUserMaxAggregateInputType
  }

  export type BlockedUserGroupByOutputType = {
    id: number
    userId: number
    id_blocked_user: number
    _count: BlockedUserCountAggregateOutputType | null
    _avg: BlockedUserAvgAggregateOutputType | null
    _sum: BlockedUserSumAggregateOutputType | null
    _min: BlockedUserMinAggregateOutputType | null
    _max: BlockedUserMaxAggregateOutputType | null
  }

  type GetBlockedUserGroupByPayload<T extends BlockedUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BlockedUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlockedUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlockedUserGroupByOutputType[P]>
            : GetScalarType<T[P], BlockedUserGroupByOutputType[P]>
        }
      >
    >


  export type BlockedUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    id_blocked_user?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["blockedUser"]>

  export type BlockedUserSelectScalar = {
    id?: boolean
    userId?: boolean
    id_blocked_user?: boolean
  }

  export type BlockedUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $BlockedUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BlockedUser"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      id_blocked_user: number
    }, ExtArgs["result"]["blockedUser"]>
    composites: {}
  }


  type BlockedUserGetPayload<S extends boolean | null | undefined | BlockedUserDefaultArgs> = $Result.GetResult<Prisma.$BlockedUserPayload, S>

  type BlockedUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BlockedUserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: BlockedUserCountAggregateInputType | true
    }

  export interface BlockedUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BlockedUser'], meta: { name: 'BlockedUser' } }
    /**
     * Find zero or one BlockedUser that matches the filter.
     * @param {BlockedUserFindUniqueArgs} args - Arguments to find a BlockedUser
     * @example
     * // Get one BlockedUser
     * const blockedUser = await prisma.blockedUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BlockedUserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BlockedUserFindUniqueArgs<ExtArgs>>
    ): Prisma__BlockedUserClient<$Result.GetResult<Prisma.$BlockedUserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BlockedUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BlockedUserFindUniqueOrThrowArgs} args - Arguments to find a BlockedUser
     * @example
     * // Get one BlockedUser
     * const blockedUser = await prisma.blockedUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BlockedUserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BlockedUserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BlockedUserClient<$Result.GetResult<Prisma.$BlockedUserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BlockedUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedUserFindFirstArgs} args - Arguments to find a BlockedUser
     * @example
     * // Get one BlockedUser
     * const blockedUser = await prisma.blockedUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BlockedUserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BlockedUserFindFirstArgs<ExtArgs>>
    ): Prisma__BlockedUserClient<$Result.GetResult<Prisma.$BlockedUserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BlockedUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedUserFindFirstOrThrowArgs} args - Arguments to find a BlockedUser
     * @example
     * // Get one BlockedUser
     * const blockedUser = await prisma.blockedUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BlockedUserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BlockedUserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BlockedUserClient<$Result.GetResult<Prisma.$BlockedUserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BlockedUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BlockedUsers
     * const blockedUsers = await prisma.blockedUser.findMany()
     * 
     * // Get first 10 BlockedUsers
     * const blockedUsers = await prisma.blockedUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const blockedUserWithIdOnly = await prisma.blockedUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BlockedUserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlockedUserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlockedUserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BlockedUser.
     * @param {BlockedUserCreateArgs} args - Arguments to create a BlockedUser.
     * @example
     * // Create one BlockedUser
     * const BlockedUser = await prisma.blockedUser.create({
     *   data: {
     *     // ... data to create a BlockedUser
     *   }
     * })
     * 
    **/
    create<T extends BlockedUserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BlockedUserCreateArgs<ExtArgs>>
    ): Prisma__BlockedUserClient<$Result.GetResult<Prisma.$BlockedUserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BlockedUsers.
     *     @param {BlockedUserCreateManyArgs} args - Arguments to create many BlockedUsers.
     *     @example
     *     // Create many BlockedUsers
     *     const blockedUser = await prisma.blockedUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BlockedUserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlockedUserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BlockedUser.
     * @param {BlockedUserDeleteArgs} args - Arguments to delete one BlockedUser.
     * @example
     * // Delete one BlockedUser
     * const BlockedUser = await prisma.blockedUser.delete({
     *   where: {
     *     // ... filter to delete one BlockedUser
     *   }
     * })
     * 
    **/
    delete<T extends BlockedUserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BlockedUserDeleteArgs<ExtArgs>>
    ): Prisma__BlockedUserClient<$Result.GetResult<Prisma.$BlockedUserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BlockedUser.
     * @param {BlockedUserUpdateArgs} args - Arguments to update one BlockedUser.
     * @example
     * // Update one BlockedUser
     * const blockedUser = await prisma.blockedUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BlockedUserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BlockedUserUpdateArgs<ExtArgs>>
    ): Prisma__BlockedUserClient<$Result.GetResult<Prisma.$BlockedUserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BlockedUsers.
     * @param {BlockedUserDeleteManyArgs} args - Arguments to filter BlockedUsers to delete.
     * @example
     * // Delete a few BlockedUsers
     * const { count } = await prisma.blockedUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BlockedUserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlockedUserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BlockedUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BlockedUsers
     * const blockedUser = await prisma.blockedUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BlockedUserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BlockedUserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BlockedUser.
     * @param {BlockedUserUpsertArgs} args - Arguments to update or create a BlockedUser.
     * @example
     * // Update or create a BlockedUser
     * const blockedUser = await prisma.blockedUser.upsert({
     *   create: {
     *     // ... data to create a BlockedUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BlockedUser we want to update
     *   }
     * })
    **/
    upsert<T extends BlockedUserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BlockedUserUpsertArgs<ExtArgs>>
    ): Prisma__BlockedUserClient<$Result.GetResult<Prisma.$BlockedUserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BlockedUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedUserCountArgs} args - Arguments to filter BlockedUsers to count.
     * @example
     * // Count the number of BlockedUsers
     * const count = await prisma.blockedUser.count({
     *   where: {
     *     // ... the filter for the BlockedUsers we want to count
     *   }
     * })
    **/
    count<T extends BlockedUserCountArgs>(
      args?: Subset<T, BlockedUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlockedUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BlockedUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlockedUserAggregateArgs>(args: Subset<T, BlockedUserAggregateArgs>): Prisma.PrismaPromise<GetBlockedUserAggregateType<T>>

    /**
     * Group by BlockedUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlockedUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlockedUserGroupByArgs['orderBy'] }
        : { orderBy?: BlockedUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlockedUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlockedUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BlockedUser model
   */
  readonly fields: BlockedUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BlockedUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BlockedUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BlockedUser model
   */ 
  interface BlockedUserFieldRefs {
    readonly id: FieldRef<"BlockedUser", 'Int'>
    readonly userId: FieldRef<"BlockedUser", 'Int'>
    readonly id_blocked_user: FieldRef<"BlockedUser", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * BlockedUser findUnique
   */
  export type BlockedUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockedUser
     */
    select?: BlockedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedUserInclude<ExtArgs> | null
    /**
     * Filter, which BlockedUser to fetch.
     */
    where: BlockedUserWhereUniqueInput
  }


  /**
   * BlockedUser findUniqueOrThrow
   */
  export type BlockedUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockedUser
     */
    select?: BlockedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedUserInclude<ExtArgs> | null
    /**
     * Filter, which BlockedUser to fetch.
     */
    where: BlockedUserWhereUniqueInput
  }


  /**
   * BlockedUser findFirst
   */
  export type BlockedUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockedUser
     */
    select?: BlockedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedUserInclude<ExtArgs> | null
    /**
     * Filter, which BlockedUser to fetch.
     */
    where?: BlockedUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockedUsers to fetch.
     */
    orderBy?: BlockedUserOrderByWithRelationInput | BlockedUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlockedUsers.
     */
    cursor?: BlockedUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockedUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockedUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlockedUsers.
     */
    distinct?: BlockedUserScalarFieldEnum | BlockedUserScalarFieldEnum[]
  }


  /**
   * BlockedUser findFirstOrThrow
   */
  export type BlockedUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockedUser
     */
    select?: BlockedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedUserInclude<ExtArgs> | null
    /**
     * Filter, which BlockedUser to fetch.
     */
    where?: BlockedUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockedUsers to fetch.
     */
    orderBy?: BlockedUserOrderByWithRelationInput | BlockedUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlockedUsers.
     */
    cursor?: BlockedUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockedUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockedUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlockedUsers.
     */
    distinct?: BlockedUserScalarFieldEnum | BlockedUserScalarFieldEnum[]
  }


  /**
   * BlockedUser findMany
   */
  export type BlockedUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockedUser
     */
    select?: BlockedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedUserInclude<ExtArgs> | null
    /**
     * Filter, which BlockedUsers to fetch.
     */
    where?: BlockedUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockedUsers to fetch.
     */
    orderBy?: BlockedUserOrderByWithRelationInput | BlockedUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BlockedUsers.
     */
    cursor?: BlockedUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockedUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockedUsers.
     */
    skip?: number
    distinct?: BlockedUserScalarFieldEnum | BlockedUserScalarFieldEnum[]
  }


  /**
   * BlockedUser create
   */
  export type BlockedUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockedUser
     */
    select?: BlockedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedUserInclude<ExtArgs> | null
    /**
     * The data needed to create a BlockedUser.
     */
    data: XOR<BlockedUserCreateInput, BlockedUserUncheckedCreateInput>
  }


  /**
   * BlockedUser createMany
   */
  export type BlockedUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BlockedUsers.
     */
    data: BlockedUserCreateManyInput | BlockedUserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * BlockedUser update
   */
  export type BlockedUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockedUser
     */
    select?: BlockedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedUserInclude<ExtArgs> | null
    /**
     * The data needed to update a BlockedUser.
     */
    data: XOR<BlockedUserUpdateInput, BlockedUserUncheckedUpdateInput>
    /**
     * Choose, which BlockedUser to update.
     */
    where: BlockedUserWhereUniqueInput
  }


  /**
   * BlockedUser updateMany
   */
  export type BlockedUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BlockedUsers.
     */
    data: XOR<BlockedUserUpdateManyMutationInput, BlockedUserUncheckedUpdateManyInput>
    /**
     * Filter which BlockedUsers to update
     */
    where?: BlockedUserWhereInput
  }


  /**
   * BlockedUser upsert
   */
  export type BlockedUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockedUser
     */
    select?: BlockedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedUserInclude<ExtArgs> | null
    /**
     * The filter to search for the BlockedUser to update in case it exists.
     */
    where: BlockedUserWhereUniqueInput
    /**
     * In case the BlockedUser found by the `where` argument doesn't exist, create a new BlockedUser with this data.
     */
    create: XOR<BlockedUserCreateInput, BlockedUserUncheckedCreateInput>
    /**
     * In case the BlockedUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BlockedUserUpdateInput, BlockedUserUncheckedUpdateInput>
  }


  /**
   * BlockedUser delete
   */
  export type BlockedUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockedUser
     */
    select?: BlockedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedUserInclude<ExtArgs> | null
    /**
     * Filter which BlockedUser to delete.
     */
    where: BlockedUserWhereUniqueInput
  }


  /**
   * BlockedUser deleteMany
   */
  export type BlockedUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BlockedUsers to delete
     */
    where?: BlockedUserWhereInput
  }


  /**
   * BlockedUser without action
   */
  export type BlockedUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockedUser
     */
    select?: BlockedUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedUserInclude<ExtArgs> | null
  }



  /**
   * Model Freind
   */

  export type AggregateFreind = {
    _count: FreindCountAggregateOutputType | null
    _avg: FreindAvgAggregateOutputType | null
    _sum: FreindSumAggregateOutputType | null
    _min: FreindMinAggregateOutputType | null
    _max: FreindMaxAggregateOutputType | null
  }

  export type FreindAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    id_freind: number | null
  }

  export type FreindSumAggregateOutputType = {
    id: number | null
    userId: number | null
    id_freind: number | null
  }

  export type FreindMinAggregateOutputType = {
    id: number | null
    name: string | null
    userId: number | null
    id_freind: number | null
  }

  export type FreindMaxAggregateOutputType = {
    id: number | null
    name: string | null
    userId: number | null
    id_freind: number | null
  }

  export type FreindCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    id_freind: number
    _all: number
  }


  export type FreindAvgAggregateInputType = {
    id?: true
    userId?: true
    id_freind?: true
  }

  export type FreindSumAggregateInputType = {
    id?: true
    userId?: true
    id_freind?: true
  }

  export type FreindMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    id_freind?: true
  }

  export type FreindMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    id_freind?: true
  }

  export type FreindCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    id_freind?: true
    _all?: true
  }

  export type FreindAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Freind to aggregate.
     */
    where?: FreindWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Freinds to fetch.
     */
    orderBy?: FreindOrderByWithRelationInput | FreindOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FreindWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Freinds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Freinds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Freinds
    **/
    _count?: true | FreindCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FreindAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FreindSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FreindMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FreindMaxAggregateInputType
  }

  export type GetFreindAggregateType<T extends FreindAggregateArgs> = {
        [P in keyof T & keyof AggregateFreind]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFreind[P]>
      : GetScalarType<T[P], AggregateFreind[P]>
  }




  export type FreindGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FreindWhereInput
    orderBy?: FreindOrderByWithAggregationInput | FreindOrderByWithAggregationInput[]
    by: FreindScalarFieldEnum[] | FreindScalarFieldEnum
    having?: FreindScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FreindCountAggregateInputType | true
    _avg?: FreindAvgAggregateInputType
    _sum?: FreindSumAggregateInputType
    _min?: FreindMinAggregateInputType
    _max?: FreindMaxAggregateInputType
  }

  export type FreindGroupByOutputType = {
    id: number
    name: string | null
    userId: number
    id_freind: number | null
    _count: FreindCountAggregateOutputType | null
    _avg: FreindAvgAggregateOutputType | null
    _sum: FreindSumAggregateOutputType | null
    _min: FreindMinAggregateOutputType | null
    _max: FreindMaxAggregateOutputType | null
  }

  type GetFreindGroupByPayload<T extends FreindGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FreindGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FreindGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FreindGroupByOutputType[P]>
            : GetScalarType<T[P], FreindGroupByOutputType[P]>
        }
      >
    >


  export type FreindSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    id_freind?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["freind"]>

  export type FreindSelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
    id_freind?: boolean
  }

  export type FreindInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $FreindPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Freind"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      userId: number
      id_freind: number | null
    }, ExtArgs["result"]["freind"]>
    composites: {}
  }


  type FreindGetPayload<S extends boolean | null | undefined | FreindDefaultArgs> = $Result.GetResult<Prisma.$FreindPayload, S>

  type FreindCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FreindFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: FreindCountAggregateInputType | true
    }

  export interface FreindDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Freind'], meta: { name: 'Freind' } }
    /**
     * Find zero or one Freind that matches the filter.
     * @param {FreindFindUniqueArgs} args - Arguments to find a Freind
     * @example
     * // Get one Freind
     * const freind = await prisma.freind.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FreindFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FreindFindUniqueArgs<ExtArgs>>
    ): Prisma__FreindClient<$Result.GetResult<Prisma.$FreindPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Freind that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FreindFindUniqueOrThrowArgs} args - Arguments to find a Freind
     * @example
     * // Get one Freind
     * const freind = await prisma.freind.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FreindFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FreindFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FreindClient<$Result.GetResult<Prisma.$FreindPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Freind that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreindFindFirstArgs} args - Arguments to find a Freind
     * @example
     * // Get one Freind
     * const freind = await prisma.freind.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FreindFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FreindFindFirstArgs<ExtArgs>>
    ): Prisma__FreindClient<$Result.GetResult<Prisma.$FreindPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Freind that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreindFindFirstOrThrowArgs} args - Arguments to find a Freind
     * @example
     * // Get one Freind
     * const freind = await prisma.freind.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FreindFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FreindFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FreindClient<$Result.GetResult<Prisma.$FreindPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Freinds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreindFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Freinds
     * const freinds = await prisma.freind.findMany()
     * 
     * // Get first 10 Freinds
     * const freinds = await prisma.freind.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const freindWithIdOnly = await prisma.freind.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FreindFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FreindFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FreindPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Freind.
     * @param {FreindCreateArgs} args - Arguments to create a Freind.
     * @example
     * // Create one Freind
     * const Freind = await prisma.freind.create({
     *   data: {
     *     // ... data to create a Freind
     *   }
     * })
     * 
    **/
    create<T extends FreindCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FreindCreateArgs<ExtArgs>>
    ): Prisma__FreindClient<$Result.GetResult<Prisma.$FreindPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Freinds.
     *     @param {FreindCreateManyArgs} args - Arguments to create many Freinds.
     *     @example
     *     // Create many Freinds
     *     const freind = await prisma.freind.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FreindCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FreindCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Freind.
     * @param {FreindDeleteArgs} args - Arguments to delete one Freind.
     * @example
     * // Delete one Freind
     * const Freind = await prisma.freind.delete({
     *   where: {
     *     // ... filter to delete one Freind
     *   }
     * })
     * 
    **/
    delete<T extends FreindDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FreindDeleteArgs<ExtArgs>>
    ): Prisma__FreindClient<$Result.GetResult<Prisma.$FreindPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Freind.
     * @param {FreindUpdateArgs} args - Arguments to update one Freind.
     * @example
     * // Update one Freind
     * const freind = await prisma.freind.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FreindUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FreindUpdateArgs<ExtArgs>>
    ): Prisma__FreindClient<$Result.GetResult<Prisma.$FreindPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Freinds.
     * @param {FreindDeleteManyArgs} args - Arguments to filter Freinds to delete.
     * @example
     * // Delete a few Freinds
     * const { count } = await prisma.freind.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FreindDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FreindDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Freinds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreindUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Freinds
     * const freind = await prisma.freind.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FreindUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FreindUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Freind.
     * @param {FreindUpsertArgs} args - Arguments to update or create a Freind.
     * @example
     * // Update or create a Freind
     * const freind = await prisma.freind.upsert({
     *   create: {
     *     // ... data to create a Freind
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Freind we want to update
     *   }
     * })
    **/
    upsert<T extends FreindUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FreindUpsertArgs<ExtArgs>>
    ): Prisma__FreindClient<$Result.GetResult<Prisma.$FreindPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Freinds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreindCountArgs} args - Arguments to filter Freinds to count.
     * @example
     * // Count the number of Freinds
     * const count = await prisma.freind.count({
     *   where: {
     *     // ... the filter for the Freinds we want to count
     *   }
     * })
    **/
    count<T extends FreindCountArgs>(
      args?: Subset<T, FreindCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FreindCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Freind.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreindAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FreindAggregateArgs>(args: Subset<T, FreindAggregateArgs>): Prisma.PrismaPromise<GetFreindAggregateType<T>>

    /**
     * Group by Freind.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreindGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FreindGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FreindGroupByArgs['orderBy'] }
        : { orderBy?: FreindGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FreindGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFreindGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Freind model
   */
  readonly fields: FreindFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Freind.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FreindClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Freind model
   */ 
  interface FreindFieldRefs {
    readonly id: FieldRef<"Freind", 'Int'>
    readonly name: FieldRef<"Freind", 'String'>
    readonly userId: FieldRef<"Freind", 'Int'>
    readonly id_freind: FieldRef<"Freind", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Freind findUnique
   */
  export type FreindFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freind
     */
    select?: FreindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreindInclude<ExtArgs> | null
    /**
     * Filter, which Freind to fetch.
     */
    where: FreindWhereUniqueInput
  }


  /**
   * Freind findUniqueOrThrow
   */
  export type FreindFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freind
     */
    select?: FreindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreindInclude<ExtArgs> | null
    /**
     * Filter, which Freind to fetch.
     */
    where: FreindWhereUniqueInput
  }


  /**
   * Freind findFirst
   */
  export type FreindFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freind
     */
    select?: FreindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreindInclude<ExtArgs> | null
    /**
     * Filter, which Freind to fetch.
     */
    where?: FreindWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Freinds to fetch.
     */
    orderBy?: FreindOrderByWithRelationInput | FreindOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Freinds.
     */
    cursor?: FreindWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Freinds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Freinds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Freinds.
     */
    distinct?: FreindScalarFieldEnum | FreindScalarFieldEnum[]
  }


  /**
   * Freind findFirstOrThrow
   */
  export type FreindFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freind
     */
    select?: FreindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreindInclude<ExtArgs> | null
    /**
     * Filter, which Freind to fetch.
     */
    where?: FreindWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Freinds to fetch.
     */
    orderBy?: FreindOrderByWithRelationInput | FreindOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Freinds.
     */
    cursor?: FreindWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Freinds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Freinds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Freinds.
     */
    distinct?: FreindScalarFieldEnum | FreindScalarFieldEnum[]
  }


  /**
   * Freind findMany
   */
  export type FreindFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freind
     */
    select?: FreindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreindInclude<ExtArgs> | null
    /**
     * Filter, which Freinds to fetch.
     */
    where?: FreindWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Freinds to fetch.
     */
    orderBy?: FreindOrderByWithRelationInput | FreindOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Freinds.
     */
    cursor?: FreindWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Freinds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Freinds.
     */
    skip?: number
    distinct?: FreindScalarFieldEnum | FreindScalarFieldEnum[]
  }


  /**
   * Freind create
   */
  export type FreindCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freind
     */
    select?: FreindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreindInclude<ExtArgs> | null
    /**
     * The data needed to create a Freind.
     */
    data: XOR<FreindCreateInput, FreindUncheckedCreateInput>
  }


  /**
   * Freind createMany
   */
  export type FreindCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Freinds.
     */
    data: FreindCreateManyInput | FreindCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Freind update
   */
  export type FreindUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freind
     */
    select?: FreindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreindInclude<ExtArgs> | null
    /**
     * The data needed to update a Freind.
     */
    data: XOR<FreindUpdateInput, FreindUncheckedUpdateInput>
    /**
     * Choose, which Freind to update.
     */
    where: FreindWhereUniqueInput
  }


  /**
   * Freind updateMany
   */
  export type FreindUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Freinds.
     */
    data: XOR<FreindUpdateManyMutationInput, FreindUncheckedUpdateManyInput>
    /**
     * Filter which Freinds to update
     */
    where?: FreindWhereInput
  }


  /**
   * Freind upsert
   */
  export type FreindUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freind
     */
    select?: FreindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreindInclude<ExtArgs> | null
    /**
     * The filter to search for the Freind to update in case it exists.
     */
    where: FreindWhereUniqueInput
    /**
     * In case the Freind found by the `where` argument doesn't exist, create a new Freind with this data.
     */
    create: XOR<FreindCreateInput, FreindUncheckedCreateInput>
    /**
     * In case the Freind was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FreindUpdateInput, FreindUncheckedUpdateInput>
  }


  /**
   * Freind delete
   */
  export type FreindDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freind
     */
    select?: FreindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreindInclude<ExtArgs> | null
    /**
     * Filter which Freind to delete.
     */
    where: FreindWhereUniqueInput
  }


  /**
   * Freind deleteMany
   */
  export type FreindDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Freinds to delete
     */
    where?: FreindWhereInput
  }


  /**
   * Freind without action
   */
  export type FreindDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freind
     */
    select?: FreindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreindInclude<ExtArgs> | null
  }



  /**
   * Model Dm
   */

  export type AggregateDm = {
    _count: DmCountAggregateOutputType | null
    _avg: DmAvgAggregateOutputType | null
    _sum: DmSumAggregateOutputType | null
    _min: DmMinAggregateOutputType | null
    _max: DmMaxAggregateOutputType | null
  }

  export type DmAvgAggregateOutputType = {
    id_dm: number | null
    senderId: number | null
    receiverId: number | null
    unread: number | null
  }

  export type DmSumAggregateOutputType = {
    id_dm: number | null
    senderId: number | null
    receiverId: number | null
    unread: number | null
  }

  export type DmMinAggregateOutputType = {
    id_dm: number | null
    senderId: number | null
    receiverId: number | null
    unread: number | null
    pinned: boolean | null
  }

  export type DmMaxAggregateOutputType = {
    id_dm: number | null
    senderId: number | null
    receiverId: number | null
    unread: number | null
    pinned: boolean | null
  }

  export type DmCountAggregateOutputType = {
    id_dm: number
    senderId: number
    receiverId: number
    unread: number
    pinned: number
    _all: number
  }


  export type DmAvgAggregateInputType = {
    id_dm?: true
    senderId?: true
    receiverId?: true
    unread?: true
  }

  export type DmSumAggregateInputType = {
    id_dm?: true
    senderId?: true
    receiverId?: true
    unread?: true
  }

  export type DmMinAggregateInputType = {
    id_dm?: true
    senderId?: true
    receiverId?: true
    unread?: true
    pinned?: true
  }

  export type DmMaxAggregateInputType = {
    id_dm?: true
    senderId?: true
    receiverId?: true
    unread?: true
    pinned?: true
  }

  export type DmCountAggregateInputType = {
    id_dm?: true
    senderId?: true
    receiverId?: true
    unread?: true
    pinned?: true
    _all?: true
  }

  export type DmAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dm to aggregate.
     */
    where?: DmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dms to fetch.
     */
    orderBy?: DmOrderByWithRelationInput | DmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dms
    **/
    _count?: true | DmCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DmAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DmSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DmMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DmMaxAggregateInputType
  }

  export type GetDmAggregateType<T extends DmAggregateArgs> = {
        [P in keyof T & keyof AggregateDm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDm[P]>
      : GetScalarType<T[P], AggregateDm[P]>
  }




  export type DmGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DmWhereInput
    orderBy?: DmOrderByWithAggregationInput | DmOrderByWithAggregationInput[]
    by: DmScalarFieldEnum[] | DmScalarFieldEnum
    having?: DmScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DmCountAggregateInputType | true
    _avg?: DmAvgAggregateInputType
    _sum?: DmSumAggregateInputType
    _min?: DmMinAggregateInputType
    _max?: DmMaxAggregateInputType
  }

  export type DmGroupByOutputType = {
    id_dm: number
    senderId: number
    receiverId: number
    unread: number
    pinned: boolean
    _count: DmCountAggregateOutputType | null
    _avg: DmAvgAggregateOutputType | null
    _sum: DmSumAggregateOutputType | null
    _min: DmMinAggregateOutputType | null
    _max: DmMaxAggregateOutputType | null
  }

  type GetDmGroupByPayload<T extends DmGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DmGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DmGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DmGroupByOutputType[P]>
            : GetScalarType<T[P], DmGroupByOutputType[P]>
        }
      >
    >


  export type DmSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_dm?: boolean
    senderId?: boolean
    receiverId?: boolean
    unread?: boolean
    pinned?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
    conversation?: boolean | Dm$conversationArgs<ExtArgs>
    _count?: boolean | DmCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dm"]>

  export type DmSelectScalar = {
    id_dm?: boolean
    senderId?: boolean
    receiverId?: boolean
    unread?: boolean
    pinned?: boolean
  }

  export type DmInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
    conversation?: boolean | Dm$conversationArgs<ExtArgs>
    _count?: boolean | DmCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DmPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Dm"
    objects: {
      sender: Prisma.$UserPayload<ExtArgs>
      receiver: Prisma.$UserPayload<ExtArgs>
      conversation: Prisma.$ConversationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_dm: number
      senderId: number
      receiverId: number
      unread: number
      pinned: boolean
    }, ExtArgs["result"]["dm"]>
    composites: {}
  }


  type DmGetPayload<S extends boolean | null | undefined | DmDefaultArgs> = $Result.GetResult<Prisma.$DmPayload, S>

  type DmCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DmFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: DmCountAggregateInputType | true
    }

  export interface DmDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dm'], meta: { name: 'Dm' } }
    /**
     * Find zero or one Dm that matches the filter.
     * @param {DmFindUniqueArgs} args - Arguments to find a Dm
     * @example
     * // Get one Dm
     * const dm = await prisma.dm.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DmFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DmFindUniqueArgs<ExtArgs>>
    ): Prisma__DmClient<$Result.GetResult<Prisma.$DmPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Dm that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DmFindUniqueOrThrowArgs} args - Arguments to find a Dm
     * @example
     * // Get one Dm
     * const dm = await prisma.dm.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DmFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DmFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DmClient<$Result.GetResult<Prisma.$DmPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Dm that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DmFindFirstArgs} args - Arguments to find a Dm
     * @example
     * // Get one Dm
     * const dm = await prisma.dm.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DmFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DmFindFirstArgs<ExtArgs>>
    ): Prisma__DmClient<$Result.GetResult<Prisma.$DmPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Dm that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DmFindFirstOrThrowArgs} args - Arguments to find a Dm
     * @example
     * // Get one Dm
     * const dm = await prisma.dm.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DmFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DmFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DmClient<$Result.GetResult<Prisma.$DmPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Dms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DmFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dms
     * const dms = await prisma.dm.findMany()
     * 
     * // Get first 10 Dms
     * const dms = await prisma.dm.findMany({ take: 10 })
     * 
     * // Only select the `id_dm`
     * const dmWithId_dmOnly = await prisma.dm.findMany({ select: { id_dm: true } })
     * 
    **/
    findMany<T extends DmFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DmFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DmPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Dm.
     * @param {DmCreateArgs} args - Arguments to create a Dm.
     * @example
     * // Create one Dm
     * const Dm = await prisma.dm.create({
     *   data: {
     *     // ... data to create a Dm
     *   }
     * })
     * 
    **/
    create<T extends DmCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DmCreateArgs<ExtArgs>>
    ): Prisma__DmClient<$Result.GetResult<Prisma.$DmPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Dms.
     *     @param {DmCreateManyArgs} args - Arguments to create many Dms.
     *     @example
     *     // Create many Dms
     *     const dm = await prisma.dm.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DmCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DmCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Dm.
     * @param {DmDeleteArgs} args - Arguments to delete one Dm.
     * @example
     * // Delete one Dm
     * const Dm = await prisma.dm.delete({
     *   where: {
     *     // ... filter to delete one Dm
     *   }
     * })
     * 
    **/
    delete<T extends DmDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DmDeleteArgs<ExtArgs>>
    ): Prisma__DmClient<$Result.GetResult<Prisma.$DmPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Dm.
     * @param {DmUpdateArgs} args - Arguments to update one Dm.
     * @example
     * // Update one Dm
     * const dm = await prisma.dm.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DmUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DmUpdateArgs<ExtArgs>>
    ): Prisma__DmClient<$Result.GetResult<Prisma.$DmPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Dms.
     * @param {DmDeleteManyArgs} args - Arguments to filter Dms to delete.
     * @example
     * // Delete a few Dms
     * const { count } = await prisma.dm.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DmDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DmDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DmUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dms
     * const dm = await prisma.dm.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DmUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DmUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Dm.
     * @param {DmUpsertArgs} args - Arguments to update or create a Dm.
     * @example
     * // Update or create a Dm
     * const dm = await prisma.dm.upsert({
     *   create: {
     *     // ... data to create a Dm
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dm we want to update
     *   }
     * })
    **/
    upsert<T extends DmUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DmUpsertArgs<ExtArgs>>
    ): Prisma__DmClient<$Result.GetResult<Prisma.$DmPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Dms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DmCountArgs} args - Arguments to filter Dms to count.
     * @example
     * // Count the number of Dms
     * const count = await prisma.dm.count({
     *   where: {
     *     // ... the filter for the Dms we want to count
     *   }
     * })
    **/
    count<T extends DmCountArgs>(
      args?: Subset<T, DmCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DmCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DmAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DmAggregateArgs>(args: Subset<T, DmAggregateArgs>): Prisma.PrismaPromise<GetDmAggregateType<T>>

    /**
     * Group by Dm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DmGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DmGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DmGroupByArgs['orderBy'] }
        : { orderBy?: DmGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DmGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDmGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Dm model
   */
  readonly fields: DmFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dm.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DmClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    receiver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    conversation<T extends Dm$conversationArgs<ExtArgs> = {}>(args?: Subset<T, Dm$conversationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Dm model
   */ 
  interface DmFieldRefs {
    readonly id_dm: FieldRef<"Dm", 'Int'>
    readonly senderId: FieldRef<"Dm", 'Int'>
    readonly receiverId: FieldRef<"Dm", 'Int'>
    readonly unread: FieldRef<"Dm", 'Int'>
    readonly pinned: FieldRef<"Dm", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Dm findUnique
   */
  export type DmFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dm
     */
    select?: DmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DmInclude<ExtArgs> | null
    /**
     * Filter, which Dm to fetch.
     */
    where: DmWhereUniqueInput
  }


  /**
   * Dm findUniqueOrThrow
   */
  export type DmFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dm
     */
    select?: DmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DmInclude<ExtArgs> | null
    /**
     * Filter, which Dm to fetch.
     */
    where: DmWhereUniqueInput
  }


  /**
   * Dm findFirst
   */
  export type DmFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dm
     */
    select?: DmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DmInclude<ExtArgs> | null
    /**
     * Filter, which Dm to fetch.
     */
    where?: DmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dms to fetch.
     */
    orderBy?: DmOrderByWithRelationInput | DmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dms.
     */
    cursor?: DmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dms.
     */
    distinct?: DmScalarFieldEnum | DmScalarFieldEnum[]
  }


  /**
   * Dm findFirstOrThrow
   */
  export type DmFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dm
     */
    select?: DmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DmInclude<ExtArgs> | null
    /**
     * Filter, which Dm to fetch.
     */
    where?: DmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dms to fetch.
     */
    orderBy?: DmOrderByWithRelationInput | DmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dms.
     */
    cursor?: DmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dms.
     */
    distinct?: DmScalarFieldEnum | DmScalarFieldEnum[]
  }


  /**
   * Dm findMany
   */
  export type DmFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dm
     */
    select?: DmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DmInclude<ExtArgs> | null
    /**
     * Filter, which Dms to fetch.
     */
    where?: DmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dms to fetch.
     */
    orderBy?: DmOrderByWithRelationInput | DmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dms.
     */
    cursor?: DmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dms.
     */
    skip?: number
    distinct?: DmScalarFieldEnum | DmScalarFieldEnum[]
  }


  /**
   * Dm create
   */
  export type DmCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dm
     */
    select?: DmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DmInclude<ExtArgs> | null
    /**
     * The data needed to create a Dm.
     */
    data: XOR<DmCreateInput, DmUncheckedCreateInput>
  }


  /**
   * Dm createMany
   */
  export type DmCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dms.
     */
    data: DmCreateManyInput | DmCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Dm update
   */
  export type DmUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dm
     */
    select?: DmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DmInclude<ExtArgs> | null
    /**
     * The data needed to update a Dm.
     */
    data: XOR<DmUpdateInput, DmUncheckedUpdateInput>
    /**
     * Choose, which Dm to update.
     */
    where: DmWhereUniqueInput
  }


  /**
   * Dm updateMany
   */
  export type DmUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dms.
     */
    data: XOR<DmUpdateManyMutationInput, DmUncheckedUpdateManyInput>
    /**
     * Filter which Dms to update
     */
    where?: DmWhereInput
  }


  /**
   * Dm upsert
   */
  export type DmUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dm
     */
    select?: DmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DmInclude<ExtArgs> | null
    /**
     * The filter to search for the Dm to update in case it exists.
     */
    where: DmWhereUniqueInput
    /**
     * In case the Dm found by the `where` argument doesn't exist, create a new Dm with this data.
     */
    create: XOR<DmCreateInput, DmUncheckedCreateInput>
    /**
     * In case the Dm was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DmUpdateInput, DmUncheckedUpdateInput>
  }


  /**
   * Dm delete
   */
  export type DmDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dm
     */
    select?: DmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DmInclude<ExtArgs> | null
    /**
     * Filter which Dm to delete.
     */
    where: DmWhereUniqueInput
  }


  /**
   * Dm deleteMany
   */
  export type DmDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dms to delete
     */
    where?: DmWhereInput
  }


  /**
   * Dm.conversation
   */
  export type Dm$conversationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    where?: ConversationWhereInput
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    cursor?: ConversationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }


  /**
   * Dm without action
   */
  export type DmDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dm
     */
    select?: DmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DmInclude<ExtArgs> | null
  }



  /**
   * Model Conversation
   */

  export type AggregateConversation = {
    _count: ConversationCountAggregateOutputType | null
    _avg: ConversationAvgAggregateOutputType | null
    _sum: ConversationSumAggregateOutputType | null
    _min: ConversationMinAggregateOutputType | null
    _max: ConversationMaxAggregateOutputType | null
  }

  export type ConversationAvgAggregateOutputType = {
    id: number | null
    outgoing: number | null
    incoming: number | null
    idDm: number | null
  }

  export type ConversationSumAggregateOutputType = {
    id: number | null
    outgoing: number | null
    incoming: number | null
    idDm: number | null
  }

  export type ConversationMinAggregateOutputType = {
    id: number | null
    text: string | null
    dateSent: Date | null
    outgoing: number | null
    incoming: number | null
    type: string | null
    idDm: number | null
  }

  export type ConversationMaxAggregateOutputType = {
    id: number | null
    text: string | null
    dateSent: Date | null
    outgoing: number | null
    incoming: number | null
    type: string | null
    idDm: number | null
  }

  export type ConversationCountAggregateOutputType = {
    id: number
    text: number
    dateSent: number
    outgoing: number
    incoming: number
    type: number
    idDm: number
    _all: number
  }


  export type ConversationAvgAggregateInputType = {
    id?: true
    outgoing?: true
    incoming?: true
    idDm?: true
  }

  export type ConversationSumAggregateInputType = {
    id?: true
    outgoing?: true
    incoming?: true
    idDm?: true
  }

  export type ConversationMinAggregateInputType = {
    id?: true
    text?: true
    dateSent?: true
    outgoing?: true
    incoming?: true
    type?: true
    idDm?: true
  }

  export type ConversationMaxAggregateInputType = {
    id?: true
    text?: true
    dateSent?: true
    outgoing?: true
    incoming?: true
    type?: true
    idDm?: true
  }

  export type ConversationCountAggregateInputType = {
    id?: true
    text?: true
    dateSent?: true
    outgoing?: true
    incoming?: true
    type?: true
    idDm?: true
    _all?: true
  }

  export type ConversationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conversation to aggregate.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Conversations
    **/
    _count?: true | ConversationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConversationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConversationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConversationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConversationMaxAggregateInputType
  }

  export type GetConversationAggregateType<T extends ConversationAggregateArgs> = {
        [P in keyof T & keyof AggregateConversation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConversation[P]>
      : GetScalarType<T[P], AggregateConversation[P]>
  }




  export type ConversationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationWhereInput
    orderBy?: ConversationOrderByWithAggregationInput | ConversationOrderByWithAggregationInput[]
    by: ConversationScalarFieldEnum[] | ConversationScalarFieldEnum
    having?: ConversationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConversationCountAggregateInputType | true
    _avg?: ConversationAvgAggregateInputType
    _sum?: ConversationSumAggregateInputType
    _min?: ConversationMinAggregateInputType
    _max?: ConversationMaxAggregateInputType
  }

  export type ConversationGroupByOutputType = {
    id: number
    text: string
    dateSent: Date
    outgoing: number
    incoming: number
    type: string
    idDm: number
    _count: ConversationCountAggregateOutputType | null
    _avg: ConversationAvgAggregateOutputType | null
    _sum: ConversationSumAggregateOutputType | null
    _min: ConversationMinAggregateOutputType | null
    _max: ConversationMaxAggregateOutputType | null
  }

  type GetConversationGroupByPayload<T extends ConversationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConversationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConversationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConversationGroupByOutputType[P]>
            : GetScalarType<T[P], ConversationGroupByOutputType[P]>
        }
      >
    >


  export type ConversationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    dateSent?: boolean
    outgoing?: boolean
    incoming?: boolean
    type?: boolean
    idDm?: boolean
    dm?: boolean | DmDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conversation"]>

  export type ConversationSelectScalar = {
    id?: boolean
    text?: boolean
    dateSent?: boolean
    outgoing?: boolean
    incoming?: boolean
    type?: boolean
    idDm?: boolean
  }

  export type ConversationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dm?: boolean | DmDefaultArgs<ExtArgs>
  }


  export type $ConversationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Conversation"
    objects: {
      dm: Prisma.$DmPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      text: string
      dateSent: Date
      outgoing: number
      incoming: number
      type: string
      idDm: number
    }, ExtArgs["result"]["conversation"]>
    composites: {}
  }


  type ConversationGetPayload<S extends boolean | null | undefined | ConversationDefaultArgs> = $Result.GetResult<Prisma.$ConversationPayload, S>

  type ConversationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConversationFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ConversationCountAggregateInputType | true
    }

  export interface ConversationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Conversation'], meta: { name: 'Conversation' } }
    /**
     * Find zero or one Conversation that matches the filter.
     * @param {ConversationFindUniqueArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ConversationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ConversationFindUniqueArgs<ExtArgs>>
    ): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Conversation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ConversationFindUniqueOrThrowArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ConversationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConversationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Conversation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindFirstArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ConversationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ConversationFindFirstArgs<ExtArgs>>
    ): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Conversation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindFirstOrThrowArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ConversationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConversationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Conversations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conversations
     * const conversations = await prisma.conversation.findMany()
     * 
     * // Get first 10 Conversations
     * const conversations = await prisma.conversation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conversationWithIdOnly = await prisma.conversation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ConversationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConversationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Conversation.
     * @param {ConversationCreateArgs} args - Arguments to create a Conversation.
     * @example
     * // Create one Conversation
     * const Conversation = await prisma.conversation.create({
     *   data: {
     *     // ... data to create a Conversation
     *   }
     * })
     * 
    **/
    create<T extends ConversationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ConversationCreateArgs<ExtArgs>>
    ): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Conversations.
     *     @param {ConversationCreateManyArgs} args - Arguments to create many Conversations.
     *     @example
     *     // Create many Conversations
     *     const conversation = await prisma.conversation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ConversationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConversationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Conversation.
     * @param {ConversationDeleteArgs} args - Arguments to delete one Conversation.
     * @example
     * // Delete one Conversation
     * const Conversation = await prisma.conversation.delete({
     *   where: {
     *     // ... filter to delete one Conversation
     *   }
     * })
     * 
    **/
    delete<T extends ConversationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ConversationDeleteArgs<ExtArgs>>
    ): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Conversation.
     * @param {ConversationUpdateArgs} args - Arguments to update one Conversation.
     * @example
     * // Update one Conversation
     * const conversation = await prisma.conversation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ConversationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ConversationUpdateArgs<ExtArgs>>
    ): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Conversations.
     * @param {ConversationDeleteManyArgs} args - Arguments to filter Conversations to delete.
     * @example
     * // Delete a few Conversations
     * const { count } = await prisma.conversation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ConversationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConversationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conversations
     * const conversation = await prisma.conversation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ConversationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ConversationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Conversation.
     * @param {ConversationUpsertArgs} args - Arguments to update or create a Conversation.
     * @example
     * // Update or create a Conversation
     * const conversation = await prisma.conversation.upsert({
     *   create: {
     *     // ... data to create a Conversation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Conversation we want to update
     *   }
     * })
    **/
    upsert<T extends ConversationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ConversationUpsertArgs<ExtArgs>>
    ): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationCountArgs} args - Arguments to filter Conversations to count.
     * @example
     * // Count the number of Conversations
     * const count = await prisma.conversation.count({
     *   where: {
     *     // ... the filter for the Conversations we want to count
     *   }
     * })
    **/
    count<T extends ConversationCountArgs>(
      args?: Subset<T, ConversationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConversationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Conversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConversationAggregateArgs>(args: Subset<T, ConversationAggregateArgs>): Prisma.PrismaPromise<GetConversationAggregateType<T>>

    /**
     * Group by Conversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConversationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConversationGroupByArgs['orderBy'] }
        : { orderBy?: ConversationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConversationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConversationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Conversation model
   */
  readonly fields: ConversationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Conversation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConversationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    dm<T extends DmDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DmDefaultArgs<ExtArgs>>): Prisma__DmClient<$Result.GetResult<Prisma.$DmPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Conversation model
   */ 
  interface ConversationFieldRefs {
    readonly id: FieldRef<"Conversation", 'Int'>
    readonly text: FieldRef<"Conversation", 'String'>
    readonly dateSent: FieldRef<"Conversation", 'DateTime'>
    readonly outgoing: FieldRef<"Conversation", 'Int'>
    readonly incoming: FieldRef<"Conversation", 'Int'>
    readonly type: FieldRef<"Conversation", 'String'>
    readonly idDm: FieldRef<"Conversation", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Conversation findUnique
   */
  export type ConversationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where: ConversationWhereUniqueInput
  }


  /**
   * Conversation findUniqueOrThrow
   */
  export type ConversationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where: ConversationWhereUniqueInput
  }


  /**
   * Conversation findFirst
   */
  export type ConversationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conversations.
     */
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }


  /**
   * Conversation findFirstOrThrow
   */
  export type ConversationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conversations.
     */
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }


  /**
   * Conversation findMany
   */
  export type ConversationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversations to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }


  /**
   * Conversation create
   */
  export type ConversationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The data needed to create a Conversation.
     */
    data: XOR<ConversationCreateInput, ConversationUncheckedCreateInput>
  }


  /**
   * Conversation createMany
   */
  export type ConversationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Conversations.
     */
    data: ConversationCreateManyInput | ConversationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Conversation update
   */
  export type ConversationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The data needed to update a Conversation.
     */
    data: XOR<ConversationUpdateInput, ConversationUncheckedUpdateInput>
    /**
     * Choose, which Conversation to update.
     */
    where: ConversationWhereUniqueInput
  }


  /**
   * Conversation updateMany
   */
  export type ConversationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Conversations.
     */
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyInput>
    /**
     * Filter which Conversations to update
     */
    where?: ConversationWhereInput
  }


  /**
   * Conversation upsert
   */
  export type ConversationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The filter to search for the Conversation to update in case it exists.
     */
    where: ConversationWhereUniqueInput
    /**
     * In case the Conversation found by the `where` argument doesn't exist, create a new Conversation with this data.
     */
    create: XOR<ConversationCreateInput, ConversationUncheckedCreateInput>
    /**
     * In case the Conversation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConversationUpdateInput, ConversationUncheckedUpdateInput>
  }


  /**
   * Conversation delete
   */
  export type ConversationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter which Conversation to delete.
     */
    where: ConversationWhereUniqueInput
  }


  /**
   * Conversation deleteMany
   */
  export type ConversationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conversations to delete
     */
    where?: ConversationWhereInput
  }


  /**
   * Conversation without action
   */
  export type ConversationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
  }



  /**
   * Model Channel
   */

  export type AggregateChannel = {
    _count: ChannelCountAggregateOutputType | null
    _avg: ChannelAvgAggregateOutputType | null
    _sum: ChannelSumAggregateOutputType | null
    _min: ChannelMinAggregateOutputType | null
    _max: ChannelMaxAggregateOutputType | null
  }

  export type ChannelAvgAggregateOutputType = {
    id_channel: number | null
  }

  export type ChannelSumAggregateOutputType = {
    id_channel: number | null
  }

  export type ChannelMinAggregateOutputType = {
    id_channel: number | null
    name: string | null
    img: string | null
    visibility: string | null
    password: string | null
  }

  export type ChannelMaxAggregateOutputType = {
    id_channel: number | null
    name: string | null
    img: string | null
    visibility: string | null
    password: string | null
  }

  export type ChannelCountAggregateOutputType = {
    id_channel: number
    name: number
    img: number
    visibility: number
    password: number
    _all: number
  }


  export type ChannelAvgAggregateInputType = {
    id_channel?: true
  }

  export type ChannelSumAggregateInputType = {
    id_channel?: true
  }

  export type ChannelMinAggregateInputType = {
    id_channel?: true
    name?: true
    img?: true
    visibility?: true
    password?: true
  }

  export type ChannelMaxAggregateInputType = {
    id_channel?: true
    name?: true
    img?: true
    visibility?: true
    password?: true
  }

  export type ChannelCountAggregateInputType = {
    id_channel?: true
    name?: true
    img?: true
    visibility?: true
    password?: true
    _all?: true
  }

  export type ChannelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Channel to aggregate.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Channels
    **/
    _count?: true | ChannelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChannelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChannelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelMaxAggregateInputType
  }

  export type GetChannelAggregateType<T extends ChannelAggregateArgs> = {
        [P in keyof T & keyof AggregateChannel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannel[P]>
      : GetScalarType<T[P], AggregateChannel[P]>
  }




  export type ChannelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChannelWhereInput
    orderBy?: ChannelOrderByWithAggregationInput | ChannelOrderByWithAggregationInput[]
    by: ChannelScalarFieldEnum[] | ChannelScalarFieldEnum
    having?: ChannelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelCountAggregateInputType | true
    _avg?: ChannelAvgAggregateInputType
    _sum?: ChannelSumAggregateInputType
    _min?: ChannelMinAggregateInputType
    _max?: ChannelMaxAggregateInputType
  }

  export type ChannelGroupByOutputType = {
    id_channel: number
    name: string
    img: string | null
    visibility: string
    password: string | null
    _count: ChannelCountAggregateOutputType | null
    _avg: ChannelAvgAggregateOutputType | null
    _sum: ChannelSumAggregateOutputType | null
    _min: ChannelMinAggregateOutputType | null
    _max: ChannelMaxAggregateOutputType | null
  }

  type GetChannelGroupByPayload<T extends ChannelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChannelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelGroupByOutputType[P]>
        }
      >
    >


  export type ChannelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_channel?: boolean
    name?: boolean
    img?: boolean
    visibility?: boolean
    password?: boolean
    users?: boolean | Channel$usersArgs<ExtArgs>
    _count?: boolean | ChannelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["channel"]>

  export type ChannelSelectScalar = {
    id_channel?: boolean
    name?: boolean
    img?: boolean
    visibility?: boolean
    password?: boolean
  }

  export type ChannelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Channel$usersArgs<ExtArgs>
    _count?: boolean | ChannelCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ChannelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Channel"
    objects: {
      users: Prisma.$MemberChannelPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_channel: number
      name: string
      img: string | null
      visibility: string
      password: string | null
    }, ExtArgs["result"]["channel"]>
    composites: {}
  }


  type ChannelGetPayload<S extends boolean | null | undefined | ChannelDefaultArgs> = $Result.GetResult<Prisma.$ChannelPayload, S>

  type ChannelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChannelFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ChannelCountAggregateInputType | true
    }

  export interface ChannelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Channel'], meta: { name: 'Channel' } }
    /**
     * Find zero or one Channel that matches the filter.
     * @param {ChannelFindUniqueArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChannelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelFindUniqueArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Channel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChannelFindUniqueOrThrowArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChannelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Channel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindFirstArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChannelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindFirstArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Channel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindFirstOrThrowArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChannelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Channels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Channels
     * const channels = await prisma.channel.findMany()
     * 
     * // Get first 10 Channels
     * const channels = await prisma.channel.findMany({ take: 10 })
     * 
     * // Only select the `id_channel`
     * const channelWithId_channelOnly = await prisma.channel.findMany({ select: { id_channel: true } })
     * 
    **/
    findMany<T extends ChannelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Channel.
     * @param {ChannelCreateArgs} args - Arguments to create a Channel.
     * @example
     * // Create one Channel
     * const Channel = await prisma.channel.create({
     *   data: {
     *     // ... data to create a Channel
     *   }
     * })
     * 
    **/
    create<T extends ChannelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelCreateArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Channels.
     *     @param {ChannelCreateManyArgs} args - Arguments to create many Channels.
     *     @example
     *     // Create many Channels
     *     const channel = await prisma.channel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChannelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Channel.
     * @param {ChannelDeleteArgs} args - Arguments to delete one Channel.
     * @example
     * // Delete one Channel
     * const Channel = await prisma.channel.delete({
     *   where: {
     *     // ... filter to delete one Channel
     *   }
     * })
     * 
    **/
    delete<T extends ChannelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelDeleteArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Channel.
     * @param {ChannelUpdateArgs} args - Arguments to update one Channel.
     * @example
     * // Update one Channel
     * const channel = await prisma.channel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChannelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUpdateArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Channels.
     * @param {ChannelDeleteManyArgs} args - Arguments to filter Channels to delete.
     * @example
     * // Delete a few Channels
     * const { count } = await prisma.channel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChannelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Channels
     * const channel = await prisma.channel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChannelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Channel.
     * @param {ChannelUpsertArgs} args - Arguments to update or create a Channel.
     * @example
     * // Update or create a Channel
     * const channel = await prisma.channel.upsert({
     *   create: {
     *     // ... data to create a Channel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Channel we want to update
     *   }
     * })
    **/
    upsert<T extends ChannelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUpsertArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelCountArgs} args - Arguments to filter Channels to count.
     * @example
     * // Count the number of Channels
     * const count = await prisma.channel.count({
     *   where: {
     *     // ... the filter for the Channels we want to count
     *   }
     * })
    **/
    count<T extends ChannelCountArgs>(
      args?: Subset<T, ChannelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Channel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelAggregateArgs>(args: Subset<T, ChannelAggregateArgs>): Prisma.PrismaPromise<GetChannelAggregateType<T>>

    /**
     * Group by Channel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChannelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChannelGroupByArgs['orderBy'] }
        : { orderBy?: ChannelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChannelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Channel model
   */
  readonly fields: ChannelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Channel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChannelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends Channel$usersArgs<ExtArgs> = {}>(args?: Subset<T, Channel$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberChannelPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Channel model
   */ 
  interface ChannelFieldRefs {
    readonly id_channel: FieldRef<"Channel", 'Int'>
    readonly name: FieldRef<"Channel", 'String'>
    readonly img: FieldRef<"Channel", 'String'>
    readonly visibility: FieldRef<"Channel", 'String'>
    readonly password: FieldRef<"Channel", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Channel findUnique
   */
  export type ChannelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel findUniqueOrThrow
   */
  export type ChannelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel findFirst
   */
  export type ChannelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }


  /**
   * Channel findFirstOrThrow
   */
  export type ChannelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }


  /**
   * Channel findMany
   */
  export type ChannelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channels to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }


  /**
   * Channel create
   */
  export type ChannelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * The data needed to create a Channel.
     */
    data: XOR<ChannelCreateInput, ChannelUncheckedCreateInput>
  }


  /**
   * Channel createMany
   */
  export type ChannelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Channels.
     */
    data: ChannelCreateManyInput | ChannelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Channel update
   */
  export type ChannelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * The data needed to update a Channel.
     */
    data: XOR<ChannelUpdateInput, ChannelUncheckedUpdateInput>
    /**
     * Choose, which Channel to update.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel updateMany
   */
  export type ChannelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Channels.
     */
    data: XOR<ChannelUpdateManyMutationInput, ChannelUncheckedUpdateManyInput>
    /**
     * Filter which Channels to update
     */
    where?: ChannelWhereInput
  }


  /**
   * Channel upsert
   */
  export type ChannelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * The filter to search for the Channel to update in case it exists.
     */
    where: ChannelWhereUniqueInput
    /**
     * In case the Channel found by the `where` argument doesn't exist, create a new Channel with this data.
     */
    create: XOR<ChannelCreateInput, ChannelUncheckedCreateInput>
    /**
     * In case the Channel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChannelUpdateInput, ChannelUncheckedUpdateInput>
  }


  /**
   * Channel delete
   */
  export type ChannelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter which Channel to delete.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel deleteMany
   */
  export type ChannelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Channels to delete
     */
    where?: ChannelWhereInput
  }


  /**
   * Channel.users
   */
  export type Channel$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberChannel
     */
    select?: MemberChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MemberChannelInclude<ExtArgs> | null
    where?: MemberChannelWhereInput
    orderBy?: MemberChannelOrderByWithRelationInput | MemberChannelOrderByWithRelationInput[]
    cursor?: MemberChannelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MemberChannelScalarFieldEnum | MemberChannelScalarFieldEnum[]
  }


  /**
   * Channel without action
   */
  export type ChannelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
  }



  /**
   * Model MemberChannel
   */

  export type AggregateMemberChannel = {
    _count: MemberChannelCountAggregateOutputType | null
    _avg: MemberChannelAvgAggregateOutputType | null
    _sum: MemberChannelSumAggregateOutputType | null
    _min: MemberChannelMinAggregateOutputType | null
    _max: MemberChannelMaxAggregateOutputType | null
  }

  export type MemberChannelAvgAggregateOutputType = {
    userId: number | null
    channelId: number | null
  }

  export type MemberChannelSumAggregateOutputType = {
    userId: number | null
    channelId: number | null
  }

  export type MemberChannelMinAggregateOutputType = {
    userId: number | null
    channelId: number | null
    status_UserInChannel: string | null
    muted: boolean | null
    period: Date | null
  }

  export type MemberChannelMaxAggregateOutputType = {
    userId: number | null
    channelId: number | null
    status_UserInChannel: string | null
    muted: boolean | null
    period: Date | null
  }

  export type MemberChannelCountAggregateOutputType = {
    userId: number
    channelId: number
    status_UserInChannel: number
    muted: number
    period: number
    _all: number
  }


  export type MemberChannelAvgAggregateInputType = {
    userId?: true
    channelId?: true
  }

  export type MemberChannelSumAggregateInputType = {
    userId?: true
    channelId?: true
  }

  export type MemberChannelMinAggregateInputType = {
    userId?: true
    channelId?: true
    status_UserInChannel?: true
    muted?: true
    period?: true
  }

  export type MemberChannelMaxAggregateInputType = {
    userId?: true
    channelId?: true
    status_UserInChannel?: true
    muted?: true
    period?: true
  }

  export type MemberChannelCountAggregateInputType = {
    userId?: true
    channelId?: true
    status_UserInChannel?: true
    muted?: true
    period?: true
    _all?: true
  }

  export type MemberChannelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MemberChannel to aggregate.
     */
    where?: MemberChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberChannels to fetch.
     */
    orderBy?: MemberChannelOrderByWithRelationInput | MemberChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MemberChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberChannels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MemberChannels
    **/
    _count?: true | MemberChannelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MemberChannelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MemberChannelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MemberChannelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MemberChannelMaxAggregateInputType
  }

  export type GetMemberChannelAggregateType<T extends MemberChannelAggregateArgs> = {
        [P in keyof T & keyof AggregateMemberChannel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMemberChannel[P]>
      : GetScalarType<T[P], AggregateMemberChannel[P]>
  }




  export type MemberChannelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberChannelWhereInput
    orderBy?: MemberChannelOrderByWithAggregationInput | MemberChannelOrderByWithAggregationInput[]
    by: MemberChannelScalarFieldEnum[] | MemberChannelScalarFieldEnum
    having?: MemberChannelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MemberChannelCountAggregateInputType | true
    _avg?: MemberChannelAvgAggregateInputType
    _sum?: MemberChannelSumAggregateInputType
    _min?: MemberChannelMinAggregateInputType
    _max?: MemberChannelMaxAggregateInputType
  }

  export type MemberChannelGroupByOutputType = {
    userId: number
    channelId: number
    status_UserInChannel: string
    muted: boolean | null
    period: Date | null
    _count: MemberChannelCountAggregateOutputType | null
    _avg: MemberChannelAvgAggregateOutputType | null
    _sum: MemberChannelSumAggregateOutputType | null
    _min: MemberChannelMinAggregateOutputType | null
    _max: MemberChannelMaxAggregateOutputType | null
  }

  type GetMemberChannelGroupByPayload<T extends MemberChannelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MemberChannelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MemberChannelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MemberChannelGroupByOutputType[P]>
            : GetScalarType<T[P], MemberChannelGroupByOutputType[P]>
        }
      >
    >


  export type MemberChannelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    channelId?: boolean
    status_UserInChannel?: boolean
    muted?: boolean
    period?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    channel?: boolean | ChannelDefaultArgs<ExtArgs>
    discussions?: boolean | MemberChannel$discussionsArgs<ExtArgs>
    banned?: boolean | MemberChannel$bannedArgs<ExtArgs>
    _count?: boolean | MemberChannelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["memberChannel"]>

  export type MemberChannelSelectScalar = {
    userId?: boolean
    channelId?: boolean
    status_UserInChannel?: boolean
    muted?: boolean
    period?: boolean
  }

  export type MemberChannelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    channel?: boolean | ChannelDefaultArgs<ExtArgs>
    discussions?: boolean | MemberChannel$discussionsArgs<ExtArgs>
    banned?: boolean | MemberChannel$bannedArgs<ExtArgs>
    _count?: boolean | MemberChannelCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MemberChannelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MemberChannel"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      channel: Prisma.$ChannelPayload<ExtArgs>
      discussions: Prisma.$DiscussionPayload<ExtArgs>[]
      banned: Prisma.$ChannelBanPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      channelId: number
      status_UserInChannel: string
      muted: boolean | null
      period: Date | null
    }, ExtArgs["result"]["memberChannel"]>
    composites: {}
  }


  type MemberChannelGetPayload<S extends boolean | null | undefined | MemberChannelDefaultArgs> = $Result.GetResult<Prisma.$MemberChannelPayload, S>

  type MemberChannelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MemberChannelFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: MemberChannelCountAggregateInputType | true
    }

  export interface MemberChannelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MemberChannel'], meta: { name: 'MemberChannel' } }
    /**
     * Find zero or one MemberChannel that matches the filter.
     * @param {MemberChannelFindUniqueArgs} args - Arguments to find a MemberChannel
     * @example
     * // Get one MemberChannel
     * const memberChannel = await prisma.memberChannel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MemberChannelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MemberChannelFindUniqueArgs<ExtArgs>>
    ): Prisma__MemberChannelClient<$Result.GetResult<Prisma.$MemberChannelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MemberChannel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MemberChannelFindUniqueOrThrowArgs} args - Arguments to find a MemberChannel
     * @example
     * // Get one MemberChannel
     * const memberChannel = await prisma.memberChannel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MemberChannelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MemberChannelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MemberChannelClient<$Result.GetResult<Prisma.$MemberChannelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MemberChannel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberChannelFindFirstArgs} args - Arguments to find a MemberChannel
     * @example
     * // Get one MemberChannel
     * const memberChannel = await prisma.memberChannel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MemberChannelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MemberChannelFindFirstArgs<ExtArgs>>
    ): Prisma__MemberChannelClient<$Result.GetResult<Prisma.$MemberChannelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MemberChannel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberChannelFindFirstOrThrowArgs} args - Arguments to find a MemberChannel
     * @example
     * // Get one MemberChannel
     * const memberChannel = await prisma.memberChannel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MemberChannelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MemberChannelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MemberChannelClient<$Result.GetResult<Prisma.$MemberChannelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MemberChannels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberChannelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MemberChannels
     * const memberChannels = await prisma.memberChannel.findMany()
     * 
     * // Get first 10 MemberChannels
     * const memberChannels = await prisma.memberChannel.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const memberChannelWithUserIdOnly = await prisma.memberChannel.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends MemberChannelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MemberChannelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberChannelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MemberChannel.
     * @param {MemberChannelCreateArgs} args - Arguments to create a MemberChannel.
     * @example
     * // Create one MemberChannel
     * const MemberChannel = await prisma.memberChannel.create({
     *   data: {
     *     // ... data to create a MemberChannel
     *   }
     * })
     * 
    **/
    create<T extends MemberChannelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MemberChannelCreateArgs<ExtArgs>>
    ): Prisma__MemberChannelClient<$Result.GetResult<Prisma.$MemberChannelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MemberChannels.
     *     @param {MemberChannelCreateManyArgs} args - Arguments to create many MemberChannels.
     *     @example
     *     // Create many MemberChannels
     *     const memberChannel = await prisma.memberChannel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MemberChannelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MemberChannelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MemberChannel.
     * @param {MemberChannelDeleteArgs} args - Arguments to delete one MemberChannel.
     * @example
     * // Delete one MemberChannel
     * const MemberChannel = await prisma.memberChannel.delete({
     *   where: {
     *     // ... filter to delete one MemberChannel
     *   }
     * })
     * 
    **/
    delete<T extends MemberChannelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MemberChannelDeleteArgs<ExtArgs>>
    ): Prisma__MemberChannelClient<$Result.GetResult<Prisma.$MemberChannelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MemberChannel.
     * @param {MemberChannelUpdateArgs} args - Arguments to update one MemberChannel.
     * @example
     * // Update one MemberChannel
     * const memberChannel = await prisma.memberChannel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MemberChannelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MemberChannelUpdateArgs<ExtArgs>>
    ): Prisma__MemberChannelClient<$Result.GetResult<Prisma.$MemberChannelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MemberChannels.
     * @param {MemberChannelDeleteManyArgs} args - Arguments to filter MemberChannels to delete.
     * @example
     * // Delete a few MemberChannels
     * const { count } = await prisma.memberChannel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MemberChannelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MemberChannelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MemberChannels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberChannelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MemberChannels
     * const memberChannel = await prisma.memberChannel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MemberChannelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MemberChannelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MemberChannel.
     * @param {MemberChannelUpsertArgs} args - Arguments to update or create a MemberChannel.
     * @example
     * // Update or create a MemberChannel
     * const memberChannel = await prisma.memberChannel.upsert({
     *   create: {
     *     // ... data to create a MemberChannel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MemberChannel we want to update
     *   }
     * })
    **/
    upsert<T extends MemberChannelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MemberChannelUpsertArgs<ExtArgs>>
    ): Prisma__MemberChannelClient<$Result.GetResult<Prisma.$MemberChannelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MemberChannels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberChannelCountArgs} args - Arguments to filter MemberChannels to count.
     * @example
     * // Count the number of MemberChannels
     * const count = await prisma.memberChannel.count({
     *   where: {
     *     // ... the filter for the MemberChannels we want to count
     *   }
     * })
    **/
    count<T extends MemberChannelCountArgs>(
      args?: Subset<T, MemberChannelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MemberChannelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MemberChannel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberChannelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MemberChannelAggregateArgs>(args: Subset<T, MemberChannelAggregateArgs>): Prisma.PrismaPromise<GetMemberChannelAggregateType<T>>

    /**
     * Group by MemberChannel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberChannelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MemberChannelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MemberChannelGroupByArgs['orderBy'] }
        : { orderBy?: MemberChannelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MemberChannelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemberChannelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MemberChannel model
   */
  readonly fields: MemberChannelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MemberChannel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MemberChannelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    channel<T extends ChannelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChannelDefaultArgs<ExtArgs>>): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    discussions<T extends MemberChannel$discussionsArgs<ExtArgs> = {}>(args?: Subset<T, MemberChannel$discussionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, 'findMany'> | Null>;

    banned<T extends MemberChannel$bannedArgs<ExtArgs> = {}>(args?: Subset<T, MemberChannel$bannedArgs<ExtArgs>>): Prisma__ChannelBanClient<$Result.GetResult<Prisma.$ChannelBanPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MemberChannel model
   */ 
  interface MemberChannelFieldRefs {
    readonly userId: FieldRef<"MemberChannel", 'Int'>
    readonly channelId: FieldRef<"MemberChannel", 'Int'>
    readonly status_UserInChannel: FieldRef<"MemberChannel", 'String'>
    readonly muted: FieldRef<"MemberChannel", 'Boolean'>
    readonly period: FieldRef<"MemberChannel", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * MemberChannel findUnique
   */
  export type MemberChannelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberChannel
     */
    select?: MemberChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MemberChannelInclude<ExtArgs> | null
    /**
     * Filter, which MemberChannel to fetch.
     */
    where: MemberChannelWhereUniqueInput
  }


  /**
   * MemberChannel findUniqueOrThrow
   */
  export type MemberChannelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberChannel
     */
    select?: MemberChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MemberChannelInclude<ExtArgs> | null
    /**
     * Filter, which MemberChannel to fetch.
     */
    where: MemberChannelWhereUniqueInput
  }


  /**
   * MemberChannel findFirst
   */
  export type MemberChannelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberChannel
     */
    select?: MemberChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MemberChannelInclude<ExtArgs> | null
    /**
     * Filter, which MemberChannel to fetch.
     */
    where?: MemberChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberChannels to fetch.
     */
    orderBy?: MemberChannelOrderByWithRelationInput | MemberChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MemberChannels.
     */
    cursor?: MemberChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberChannels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MemberChannels.
     */
    distinct?: MemberChannelScalarFieldEnum | MemberChannelScalarFieldEnum[]
  }


  /**
   * MemberChannel findFirstOrThrow
   */
  export type MemberChannelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberChannel
     */
    select?: MemberChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MemberChannelInclude<ExtArgs> | null
    /**
     * Filter, which MemberChannel to fetch.
     */
    where?: MemberChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberChannels to fetch.
     */
    orderBy?: MemberChannelOrderByWithRelationInput | MemberChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MemberChannels.
     */
    cursor?: MemberChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberChannels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MemberChannels.
     */
    distinct?: MemberChannelScalarFieldEnum | MemberChannelScalarFieldEnum[]
  }


  /**
   * MemberChannel findMany
   */
  export type MemberChannelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberChannel
     */
    select?: MemberChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MemberChannelInclude<ExtArgs> | null
    /**
     * Filter, which MemberChannels to fetch.
     */
    where?: MemberChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberChannels to fetch.
     */
    orderBy?: MemberChannelOrderByWithRelationInput | MemberChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MemberChannels.
     */
    cursor?: MemberChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberChannels.
     */
    skip?: number
    distinct?: MemberChannelScalarFieldEnum | MemberChannelScalarFieldEnum[]
  }


  /**
   * MemberChannel create
   */
  export type MemberChannelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberChannel
     */
    select?: MemberChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MemberChannelInclude<ExtArgs> | null
    /**
     * The data needed to create a MemberChannel.
     */
    data: XOR<MemberChannelCreateInput, MemberChannelUncheckedCreateInput>
  }


  /**
   * MemberChannel createMany
   */
  export type MemberChannelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MemberChannels.
     */
    data: MemberChannelCreateManyInput | MemberChannelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * MemberChannel update
   */
  export type MemberChannelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberChannel
     */
    select?: MemberChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MemberChannelInclude<ExtArgs> | null
    /**
     * The data needed to update a MemberChannel.
     */
    data: XOR<MemberChannelUpdateInput, MemberChannelUncheckedUpdateInput>
    /**
     * Choose, which MemberChannel to update.
     */
    where: MemberChannelWhereUniqueInput
  }


  /**
   * MemberChannel updateMany
   */
  export type MemberChannelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MemberChannels.
     */
    data: XOR<MemberChannelUpdateManyMutationInput, MemberChannelUncheckedUpdateManyInput>
    /**
     * Filter which MemberChannels to update
     */
    where?: MemberChannelWhereInput
  }


  /**
   * MemberChannel upsert
   */
  export type MemberChannelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberChannel
     */
    select?: MemberChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MemberChannelInclude<ExtArgs> | null
    /**
     * The filter to search for the MemberChannel to update in case it exists.
     */
    where: MemberChannelWhereUniqueInput
    /**
     * In case the MemberChannel found by the `where` argument doesn't exist, create a new MemberChannel with this data.
     */
    create: XOR<MemberChannelCreateInput, MemberChannelUncheckedCreateInput>
    /**
     * In case the MemberChannel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MemberChannelUpdateInput, MemberChannelUncheckedUpdateInput>
  }


  /**
   * MemberChannel delete
   */
  export type MemberChannelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberChannel
     */
    select?: MemberChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MemberChannelInclude<ExtArgs> | null
    /**
     * Filter which MemberChannel to delete.
     */
    where: MemberChannelWhereUniqueInput
  }


  /**
   * MemberChannel deleteMany
   */
  export type MemberChannelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MemberChannels to delete
     */
    where?: MemberChannelWhereInput
  }


  /**
   * MemberChannel.discussions
   */
  export type MemberChannel$discussionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiscussionInclude<ExtArgs> | null
    where?: DiscussionWhereInput
    orderBy?: DiscussionOrderByWithRelationInput | DiscussionOrderByWithRelationInput[]
    cursor?: DiscussionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscussionScalarFieldEnum | DiscussionScalarFieldEnum[]
  }


  /**
   * MemberChannel.banned
   */
  export type MemberChannel$bannedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelBan
     */
    select?: ChannelBanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelBanInclude<ExtArgs> | null
    where?: ChannelBanWhereInput
  }


  /**
   * MemberChannel without action
   */
  export type MemberChannelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberChannel
     */
    select?: MemberChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MemberChannelInclude<ExtArgs> | null
  }



  /**
   * Model Discussion
   */

  export type AggregateDiscussion = {
    _count: DiscussionCountAggregateOutputType | null
    _avg: DiscussionAvgAggregateOutputType | null
    _sum: DiscussionSumAggregateOutputType | null
    _min: DiscussionMinAggregateOutputType | null
    _max: DiscussionMaxAggregateOutputType | null
  }

  export type DiscussionAvgAggregateOutputType = {
    id_disc: number | null
    userId: number | null
    channelId: number | null
  }

  export type DiscussionSumAggregateOutputType = {
    id_disc: number | null
    userId: number | null
    channelId: number | null
  }

  export type DiscussionMinAggregateOutputType = {
    id_disc: number | null
    message: string | null
    dateSent: Date | null
    userId: number | null
    channelId: number | null
  }

  export type DiscussionMaxAggregateOutputType = {
    id_disc: number | null
    message: string | null
    dateSent: Date | null
    userId: number | null
    channelId: number | null
  }

  export type DiscussionCountAggregateOutputType = {
    id_disc: number
    message: number
    dateSent: number
    userId: number
    channelId: number
    _all: number
  }


  export type DiscussionAvgAggregateInputType = {
    id_disc?: true
    userId?: true
    channelId?: true
  }

  export type DiscussionSumAggregateInputType = {
    id_disc?: true
    userId?: true
    channelId?: true
  }

  export type DiscussionMinAggregateInputType = {
    id_disc?: true
    message?: true
    dateSent?: true
    userId?: true
    channelId?: true
  }

  export type DiscussionMaxAggregateInputType = {
    id_disc?: true
    message?: true
    dateSent?: true
    userId?: true
    channelId?: true
  }

  export type DiscussionCountAggregateInputType = {
    id_disc?: true
    message?: true
    dateSent?: true
    userId?: true
    channelId?: true
    _all?: true
  }

  export type DiscussionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Discussion to aggregate.
     */
    where?: DiscussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Discussions to fetch.
     */
    orderBy?: DiscussionOrderByWithRelationInput | DiscussionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiscussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Discussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Discussions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Discussions
    **/
    _count?: true | DiscussionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DiscussionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DiscussionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiscussionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiscussionMaxAggregateInputType
  }

  export type GetDiscussionAggregateType<T extends DiscussionAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscussion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscussion[P]>
      : GetScalarType<T[P], AggregateDiscussion[P]>
  }




  export type DiscussionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionWhereInput
    orderBy?: DiscussionOrderByWithAggregationInput | DiscussionOrderByWithAggregationInput[]
    by: DiscussionScalarFieldEnum[] | DiscussionScalarFieldEnum
    having?: DiscussionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiscussionCountAggregateInputType | true
    _avg?: DiscussionAvgAggregateInputType
    _sum?: DiscussionSumAggregateInputType
    _min?: DiscussionMinAggregateInputType
    _max?: DiscussionMaxAggregateInputType
  }

  export type DiscussionGroupByOutputType = {
    id_disc: number
    message: string
    dateSent: Date
    userId: number
    channelId: number
    _count: DiscussionCountAggregateOutputType | null
    _avg: DiscussionAvgAggregateOutputType | null
    _sum: DiscussionSumAggregateOutputType | null
    _min: DiscussionMinAggregateOutputType | null
    _max: DiscussionMaxAggregateOutputType | null
  }

  type GetDiscussionGroupByPayload<T extends DiscussionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiscussionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiscussionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiscussionGroupByOutputType[P]>
            : GetScalarType<T[P], DiscussionGroupByOutputType[P]>
        }
      >
    >


  export type DiscussionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_disc?: boolean
    message?: boolean
    dateSent?: boolean
    userId?: boolean
    channelId?: boolean
    memberchannel?: boolean | MemberChannelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussion"]>

  export type DiscussionSelectScalar = {
    id_disc?: boolean
    message?: boolean
    dateSent?: boolean
    userId?: boolean
    channelId?: boolean
  }

  export type DiscussionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    memberchannel?: boolean | MemberChannelDefaultArgs<ExtArgs>
  }


  export type $DiscussionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Discussion"
    objects: {
      memberchannel: Prisma.$MemberChannelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_disc: number
      message: string
      dateSent: Date
      userId: number
      channelId: number
    }, ExtArgs["result"]["discussion"]>
    composites: {}
  }


  type DiscussionGetPayload<S extends boolean | null | undefined | DiscussionDefaultArgs> = $Result.GetResult<Prisma.$DiscussionPayload, S>

  type DiscussionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DiscussionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: DiscussionCountAggregateInputType | true
    }

  export interface DiscussionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Discussion'], meta: { name: 'Discussion' } }
    /**
     * Find zero or one Discussion that matches the filter.
     * @param {DiscussionFindUniqueArgs} args - Arguments to find a Discussion
     * @example
     * // Get one Discussion
     * const discussion = await prisma.discussion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DiscussionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DiscussionFindUniqueArgs<ExtArgs>>
    ): Prisma__DiscussionClient<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Discussion that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DiscussionFindUniqueOrThrowArgs} args - Arguments to find a Discussion
     * @example
     * // Get one Discussion
     * const discussion = await prisma.discussion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DiscussionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DiscussionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DiscussionClient<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Discussion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionFindFirstArgs} args - Arguments to find a Discussion
     * @example
     * // Get one Discussion
     * const discussion = await prisma.discussion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DiscussionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DiscussionFindFirstArgs<ExtArgs>>
    ): Prisma__DiscussionClient<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Discussion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionFindFirstOrThrowArgs} args - Arguments to find a Discussion
     * @example
     * // Get one Discussion
     * const discussion = await prisma.discussion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DiscussionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DiscussionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DiscussionClient<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Discussions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Discussions
     * const discussions = await prisma.discussion.findMany()
     * 
     * // Get first 10 Discussions
     * const discussions = await prisma.discussion.findMany({ take: 10 })
     * 
     * // Only select the `id_disc`
     * const discussionWithId_discOnly = await prisma.discussion.findMany({ select: { id_disc: true } })
     * 
    **/
    findMany<T extends DiscussionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DiscussionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Discussion.
     * @param {DiscussionCreateArgs} args - Arguments to create a Discussion.
     * @example
     * // Create one Discussion
     * const Discussion = await prisma.discussion.create({
     *   data: {
     *     // ... data to create a Discussion
     *   }
     * })
     * 
    **/
    create<T extends DiscussionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DiscussionCreateArgs<ExtArgs>>
    ): Prisma__DiscussionClient<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Discussions.
     *     @param {DiscussionCreateManyArgs} args - Arguments to create many Discussions.
     *     @example
     *     // Create many Discussions
     *     const discussion = await prisma.discussion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DiscussionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DiscussionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Discussion.
     * @param {DiscussionDeleteArgs} args - Arguments to delete one Discussion.
     * @example
     * // Delete one Discussion
     * const Discussion = await prisma.discussion.delete({
     *   where: {
     *     // ... filter to delete one Discussion
     *   }
     * })
     * 
    **/
    delete<T extends DiscussionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DiscussionDeleteArgs<ExtArgs>>
    ): Prisma__DiscussionClient<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Discussion.
     * @param {DiscussionUpdateArgs} args - Arguments to update one Discussion.
     * @example
     * // Update one Discussion
     * const discussion = await prisma.discussion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DiscussionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DiscussionUpdateArgs<ExtArgs>>
    ): Prisma__DiscussionClient<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Discussions.
     * @param {DiscussionDeleteManyArgs} args - Arguments to filter Discussions to delete.
     * @example
     * // Delete a few Discussions
     * const { count } = await prisma.discussion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DiscussionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DiscussionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Discussions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Discussions
     * const discussion = await prisma.discussion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DiscussionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DiscussionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Discussion.
     * @param {DiscussionUpsertArgs} args - Arguments to update or create a Discussion.
     * @example
     * // Update or create a Discussion
     * const discussion = await prisma.discussion.upsert({
     *   create: {
     *     // ... data to create a Discussion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Discussion we want to update
     *   }
     * })
    **/
    upsert<T extends DiscussionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DiscussionUpsertArgs<ExtArgs>>
    ): Prisma__DiscussionClient<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Discussions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionCountArgs} args - Arguments to filter Discussions to count.
     * @example
     * // Count the number of Discussions
     * const count = await prisma.discussion.count({
     *   where: {
     *     // ... the filter for the Discussions we want to count
     *   }
     * })
    **/
    count<T extends DiscussionCountArgs>(
      args?: Subset<T, DiscussionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiscussionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Discussion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiscussionAggregateArgs>(args: Subset<T, DiscussionAggregateArgs>): Prisma.PrismaPromise<GetDiscussionAggregateType<T>>

    /**
     * Group by Discussion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiscussionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiscussionGroupByArgs['orderBy'] }
        : { orderBy?: DiscussionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiscussionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Discussion model
   */
  readonly fields: DiscussionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Discussion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiscussionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    memberchannel<T extends MemberChannelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberChannelDefaultArgs<ExtArgs>>): Prisma__MemberChannelClient<$Result.GetResult<Prisma.$MemberChannelPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Discussion model
   */ 
  interface DiscussionFieldRefs {
    readonly id_disc: FieldRef<"Discussion", 'Int'>
    readonly message: FieldRef<"Discussion", 'String'>
    readonly dateSent: FieldRef<"Discussion", 'DateTime'>
    readonly userId: FieldRef<"Discussion", 'Int'>
    readonly channelId: FieldRef<"Discussion", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Discussion findUnique
   */
  export type DiscussionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiscussionInclude<ExtArgs> | null
    /**
     * Filter, which Discussion to fetch.
     */
    where: DiscussionWhereUniqueInput
  }


  /**
   * Discussion findUniqueOrThrow
   */
  export type DiscussionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiscussionInclude<ExtArgs> | null
    /**
     * Filter, which Discussion to fetch.
     */
    where: DiscussionWhereUniqueInput
  }


  /**
   * Discussion findFirst
   */
  export type DiscussionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiscussionInclude<ExtArgs> | null
    /**
     * Filter, which Discussion to fetch.
     */
    where?: DiscussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Discussions to fetch.
     */
    orderBy?: DiscussionOrderByWithRelationInput | DiscussionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Discussions.
     */
    cursor?: DiscussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Discussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Discussions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Discussions.
     */
    distinct?: DiscussionScalarFieldEnum | DiscussionScalarFieldEnum[]
  }


  /**
   * Discussion findFirstOrThrow
   */
  export type DiscussionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiscussionInclude<ExtArgs> | null
    /**
     * Filter, which Discussion to fetch.
     */
    where?: DiscussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Discussions to fetch.
     */
    orderBy?: DiscussionOrderByWithRelationInput | DiscussionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Discussions.
     */
    cursor?: DiscussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Discussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Discussions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Discussions.
     */
    distinct?: DiscussionScalarFieldEnum | DiscussionScalarFieldEnum[]
  }


  /**
   * Discussion findMany
   */
  export type DiscussionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiscussionInclude<ExtArgs> | null
    /**
     * Filter, which Discussions to fetch.
     */
    where?: DiscussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Discussions to fetch.
     */
    orderBy?: DiscussionOrderByWithRelationInput | DiscussionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Discussions.
     */
    cursor?: DiscussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Discussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Discussions.
     */
    skip?: number
    distinct?: DiscussionScalarFieldEnum | DiscussionScalarFieldEnum[]
  }


  /**
   * Discussion create
   */
  export type DiscussionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiscussionInclude<ExtArgs> | null
    /**
     * The data needed to create a Discussion.
     */
    data: XOR<DiscussionCreateInput, DiscussionUncheckedCreateInput>
  }


  /**
   * Discussion createMany
   */
  export type DiscussionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Discussions.
     */
    data: DiscussionCreateManyInput | DiscussionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Discussion update
   */
  export type DiscussionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiscussionInclude<ExtArgs> | null
    /**
     * The data needed to update a Discussion.
     */
    data: XOR<DiscussionUpdateInput, DiscussionUncheckedUpdateInput>
    /**
     * Choose, which Discussion to update.
     */
    where: DiscussionWhereUniqueInput
  }


  /**
   * Discussion updateMany
   */
  export type DiscussionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Discussions.
     */
    data: XOR<DiscussionUpdateManyMutationInput, DiscussionUncheckedUpdateManyInput>
    /**
     * Filter which Discussions to update
     */
    where?: DiscussionWhereInput
  }


  /**
   * Discussion upsert
   */
  export type DiscussionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiscussionInclude<ExtArgs> | null
    /**
     * The filter to search for the Discussion to update in case it exists.
     */
    where: DiscussionWhereUniqueInput
    /**
     * In case the Discussion found by the `where` argument doesn't exist, create a new Discussion with this data.
     */
    create: XOR<DiscussionCreateInput, DiscussionUncheckedCreateInput>
    /**
     * In case the Discussion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiscussionUpdateInput, DiscussionUncheckedUpdateInput>
  }


  /**
   * Discussion delete
   */
  export type DiscussionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiscussionInclude<ExtArgs> | null
    /**
     * Filter which Discussion to delete.
     */
    where: DiscussionWhereUniqueInput
  }


  /**
   * Discussion deleteMany
   */
  export type DiscussionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Discussions to delete
     */
    where?: DiscussionWhereInput
  }


  /**
   * Discussion without action
   */
  export type DiscussionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DiscussionInclude<ExtArgs> | null
  }



  /**
   * Model ChannelBan
   */

  export type AggregateChannelBan = {
    _count: ChannelBanCountAggregateOutputType | null
    _avg: ChannelBanAvgAggregateOutputType | null
    _sum: ChannelBanSumAggregateOutputType | null
    _min: ChannelBanMinAggregateOutputType | null
    _max: ChannelBanMaxAggregateOutputType | null
  }

  export type ChannelBanAvgAggregateOutputType = {
    bannedUserId: number | null
    channelId: number | null
  }

  export type ChannelBanSumAggregateOutputType = {
    bannedUserId: number | null
    channelId: number | null
  }

  export type ChannelBanMinAggregateOutputType = {
    bannedUserId: number | null
    channelId: number | null
    status_User: string | null
  }

  export type ChannelBanMaxAggregateOutputType = {
    bannedUserId: number | null
    channelId: number | null
    status_User: string | null
  }

  export type ChannelBanCountAggregateOutputType = {
    bannedUserId: number
    channelId: number
    status_User: number
    _all: number
  }


  export type ChannelBanAvgAggregateInputType = {
    bannedUserId?: true
    channelId?: true
  }

  export type ChannelBanSumAggregateInputType = {
    bannedUserId?: true
    channelId?: true
  }

  export type ChannelBanMinAggregateInputType = {
    bannedUserId?: true
    channelId?: true
    status_User?: true
  }

  export type ChannelBanMaxAggregateInputType = {
    bannedUserId?: true
    channelId?: true
    status_User?: true
  }

  export type ChannelBanCountAggregateInputType = {
    bannedUserId?: true
    channelId?: true
    status_User?: true
    _all?: true
  }

  export type ChannelBanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChannelBan to aggregate.
     */
    where?: ChannelBanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelBans to fetch.
     */
    orderBy?: ChannelBanOrderByWithRelationInput | ChannelBanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChannelBanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelBans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelBans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChannelBans
    **/
    _count?: true | ChannelBanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChannelBanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChannelBanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelBanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelBanMaxAggregateInputType
  }

  export type GetChannelBanAggregateType<T extends ChannelBanAggregateArgs> = {
        [P in keyof T & keyof AggregateChannelBan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannelBan[P]>
      : GetScalarType<T[P], AggregateChannelBan[P]>
  }




  export type ChannelBanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChannelBanWhereInput
    orderBy?: ChannelBanOrderByWithAggregationInput | ChannelBanOrderByWithAggregationInput[]
    by: ChannelBanScalarFieldEnum[] | ChannelBanScalarFieldEnum
    having?: ChannelBanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelBanCountAggregateInputType | true
    _avg?: ChannelBanAvgAggregateInputType
    _sum?: ChannelBanSumAggregateInputType
    _min?: ChannelBanMinAggregateInputType
    _max?: ChannelBanMaxAggregateInputType
  }

  export type ChannelBanGroupByOutputType = {
    bannedUserId: number
    channelId: number
    status_User: string
    _count: ChannelBanCountAggregateOutputType | null
    _avg: ChannelBanAvgAggregateOutputType | null
    _sum: ChannelBanSumAggregateOutputType | null
    _min: ChannelBanMinAggregateOutputType | null
    _max: ChannelBanMaxAggregateOutputType | null
  }

  type GetChannelBanGroupByPayload<T extends ChannelBanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChannelBanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelBanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelBanGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelBanGroupByOutputType[P]>
        }
      >
    >


  export type ChannelBanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    bannedUserId?: boolean
    channelId?: boolean
    status_User?: boolean
    bannedUser?: boolean | MemberChannelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["channelBan"]>

  export type ChannelBanSelectScalar = {
    bannedUserId?: boolean
    channelId?: boolean
    status_User?: boolean
  }

  export type ChannelBanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bannedUser?: boolean | MemberChannelDefaultArgs<ExtArgs>
  }


  export type $ChannelBanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChannelBan"
    objects: {
      bannedUser: Prisma.$MemberChannelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      bannedUserId: number
      channelId: number
      status_User: string
    }, ExtArgs["result"]["channelBan"]>
    composites: {}
  }


  type ChannelBanGetPayload<S extends boolean | null | undefined | ChannelBanDefaultArgs> = $Result.GetResult<Prisma.$ChannelBanPayload, S>

  type ChannelBanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChannelBanFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ChannelBanCountAggregateInputType | true
    }

  export interface ChannelBanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChannelBan'], meta: { name: 'ChannelBan' } }
    /**
     * Find zero or one ChannelBan that matches the filter.
     * @param {ChannelBanFindUniqueArgs} args - Arguments to find a ChannelBan
     * @example
     * // Get one ChannelBan
     * const channelBan = await prisma.channelBan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChannelBanFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelBanFindUniqueArgs<ExtArgs>>
    ): Prisma__ChannelBanClient<$Result.GetResult<Prisma.$ChannelBanPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ChannelBan that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChannelBanFindUniqueOrThrowArgs} args - Arguments to find a ChannelBan
     * @example
     * // Get one ChannelBan
     * const channelBan = await prisma.channelBan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChannelBanFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelBanFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelBanClient<$Result.GetResult<Prisma.$ChannelBanPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ChannelBan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelBanFindFirstArgs} args - Arguments to find a ChannelBan
     * @example
     * // Get one ChannelBan
     * const channelBan = await prisma.channelBan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChannelBanFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelBanFindFirstArgs<ExtArgs>>
    ): Prisma__ChannelBanClient<$Result.GetResult<Prisma.$ChannelBanPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ChannelBan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelBanFindFirstOrThrowArgs} args - Arguments to find a ChannelBan
     * @example
     * // Get one ChannelBan
     * const channelBan = await prisma.channelBan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChannelBanFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelBanFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelBanClient<$Result.GetResult<Prisma.$ChannelBanPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ChannelBans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelBanFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChannelBans
     * const channelBans = await prisma.channelBan.findMany()
     * 
     * // Get first 10 ChannelBans
     * const channelBans = await prisma.channelBan.findMany({ take: 10 })
     * 
     * // Only select the `bannedUserId`
     * const channelBanWithBannedUserIdOnly = await prisma.channelBan.findMany({ select: { bannedUserId: true } })
     * 
    **/
    findMany<T extends ChannelBanFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelBanFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChannelBanPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ChannelBan.
     * @param {ChannelBanCreateArgs} args - Arguments to create a ChannelBan.
     * @example
     * // Create one ChannelBan
     * const ChannelBan = await prisma.channelBan.create({
     *   data: {
     *     // ... data to create a ChannelBan
     *   }
     * })
     * 
    **/
    create<T extends ChannelBanCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelBanCreateArgs<ExtArgs>>
    ): Prisma__ChannelBanClient<$Result.GetResult<Prisma.$ChannelBanPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ChannelBans.
     *     @param {ChannelBanCreateManyArgs} args - Arguments to create many ChannelBans.
     *     @example
     *     // Create many ChannelBans
     *     const channelBan = await prisma.channelBan.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChannelBanCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelBanCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChannelBan.
     * @param {ChannelBanDeleteArgs} args - Arguments to delete one ChannelBan.
     * @example
     * // Delete one ChannelBan
     * const ChannelBan = await prisma.channelBan.delete({
     *   where: {
     *     // ... filter to delete one ChannelBan
     *   }
     * })
     * 
    **/
    delete<T extends ChannelBanDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelBanDeleteArgs<ExtArgs>>
    ): Prisma__ChannelBanClient<$Result.GetResult<Prisma.$ChannelBanPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ChannelBan.
     * @param {ChannelBanUpdateArgs} args - Arguments to update one ChannelBan.
     * @example
     * // Update one ChannelBan
     * const channelBan = await prisma.channelBan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChannelBanUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelBanUpdateArgs<ExtArgs>>
    ): Prisma__ChannelBanClient<$Result.GetResult<Prisma.$ChannelBanPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ChannelBans.
     * @param {ChannelBanDeleteManyArgs} args - Arguments to filter ChannelBans to delete.
     * @example
     * // Delete a few ChannelBans
     * const { count } = await prisma.channelBan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChannelBanDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelBanDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChannelBans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelBanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChannelBans
     * const channelBan = await prisma.channelBan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChannelBanUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelBanUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChannelBan.
     * @param {ChannelBanUpsertArgs} args - Arguments to update or create a ChannelBan.
     * @example
     * // Update or create a ChannelBan
     * const channelBan = await prisma.channelBan.upsert({
     *   create: {
     *     // ... data to create a ChannelBan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChannelBan we want to update
     *   }
     * })
    **/
    upsert<T extends ChannelBanUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelBanUpsertArgs<ExtArgs>>
    ): Prisma__ChannelBanClient<$Result.GetResult<Prisma.$ChannelBanPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ChannelBans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelBanCountArgs} args - Arguments to filter ChannelBans to count.
     * @example
     * // Count the number of ChannelBans
     * const count = await prisma.channelBan.count({
     *   where: {
     *     // ... the filter for the ChannelBans we want to count
     *   }
     * })
    **/
    count<T extends ChannelBanCountArgs>(
      args?: Subset<T, ChannelBanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelBanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChannelBan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelBanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelBanAggregateArgs>(args: Subset<T, ChannelBanAggregateArgs>): Prisma.PrismaPromise<GetChannelBanAggregateType<T>>

    /**
     * Group by ChannelBan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelBanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChannelBanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChannelBanGroupByArgs['orderBy'] }
        : { orderBy?: ChannelBanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChannelBanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelBanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChannelBan model
   */
  readonly fields: ChannelBanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChannelBan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChannelBanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    bannedUser<T extends MemberChannelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberChannelDefaultArgs<ExtArgs>>): Prisma__MemberChannelClient<$Result.GetResult<Prisma.$MemberChannelPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ChannelBan model
   */ 
  interface ChannelBanFieldRefs {
    readonly bannedUserId: FieldRef<"ChannelBan", 'Int'>
    readonly channelId: FieldRef<"ChannelBan", 'Int'>
    readonly status_User: FieldRef<"ChannelBan", 'String'>
  }
    

  // Custom InputTypes

  /**
   * ChannelBan findUnique
   */
  export type ChannelBanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelBan
     */
    select?: ChannelBanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelBanInclude<ExtArgs> | null
    /**
     * Filter, which ChannelBan to fetch.
     */
    where: ChannelBanWhereUniqueInput
  }


  /**
   * ChannelBan findUniqueOrThrow
   */
  export type ChannelBanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelBan
     */
    select?: ChannelBanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelBanInclude<ExtArgs> | null
    /**
     * Filter, which ChannelBan to fetch.
     */
    where: ChannelBanWhereUniqueInput
  }


  /**
   * ChannelBan findFirst
   */
  export type ChannelBanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelBan
     */
    select?: ChannelBanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelBanInclude<ExtArgs> | null
    /**
     * Filter, which ChannelBan to fetch.
     */
    where?: ChannelBanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelBans to fetch.
     */
    orderBy?: ChannelBanOrderByWithRelationInput | ChannelBanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChannelBans.
     */
    cursor?: ChannelBanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelBans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelBans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChannelBans.
     */
    distinct?: ChannelBanScalarFieldEnum | ChannelBanScalarFieldEnum[]
  }


  /**
   * ChannelBan findFirstOrThrow
   */
  export type ChannelBanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelBan
     */
    select?: ChannelBanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelBanInclude<ExtArgs> | null
    /**
     * Filter, which ChannelBan to fetch.
     */
    where?: ChannelBanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelBans to fetch.
     */
    orderBy?: ChannelBanOrderByWithRelationInput | ChannelBanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChannelBans.
     */
    cursor?: ChannelBanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelBans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelBans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChannelBans.
     */
    distinct?: ChannelBanScalarFieldEnum | ChannelBanScalarFieldEnum[]
  }


  /**
   * ChannelBan findMany
   */
  export type ChannelBanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelBan
     */
    select?: ChannelBanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelBanInclude<ExtArgs> | null
    /**
     * Filter, which ChannelBans to fetch.
     */
    where?: ChannelBanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelBans to fetch.
     */
    orderBy?: ChannelBanOrderByWithRelationInput | ChannelBanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChannelBans.
     */
    cursor?: ChannelBanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelBans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelBans.
     */
    skip?: number
    distinct?: ChannelBanScalarFieldEnum | ChannelBanScalarFieldEnum[]
  }


  /**
   * ChannelBan create
   */
  export type ChannelBanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelBan
     */
    select?: ChannelBanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelBanInclude<ExtArgs> | null
    /**
     * The data needed to create a ChannelBan.
     */
    data: XOR<ChannelBanCreateInput, ChannelBanUncheckedCreateInput>
  }


  /**
   * ChannelBan createMany
   */
  export type ChannelBanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChannelBans.
     */
    data: ChannelBanCreateManyInput | ChannelBanCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ChannelBan update
   */
  export type ChannelBanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelBan
     */
    select?: ChannelBanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelBanInclude<ExtArgs> | null
    /**
     * The data needed to update a ChannelBan.
     */
    data: XOR<ChannelBanUpdateInput, ChannelBanUncheckedUpdateInput>
    /**
     * Choose, which ChannelBan to update.
     */
    where: ChannelBanWhereUniqueInput
  }


  /**
   * ChannelBan updateMany
   */
  export type ChannelBanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChannelBans.
     */
    data: XOR<ChannelBanUpdateManyMutationInput, ChannelBanUncheckedUpdateManyInput>
    /**
     * Filter which ChannelBans to update
     */
    where?: ChannelBanWhereInput
  }


  /**
   * ChannelBan upsert
   */
  export type ChannelBanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelBan
     */
    select?: ChannelBanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelBanInclude<ExtArgs> | null
    /**
     * The filter to search for the ChannelBan to update in case it exists.
     */
    where: ChannelBanWhereUniqueInput
    /**
     * In case the ChannelBan found by the `where` argument doesn't exist, create a new ChannelBan with this data.
     */
    create: XOR<ChannelBanCreateInput, ChannelBanUncheckedCreateInput>
    /**
     * In case the ChannelBan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChannelBanUpdateInput, ChannelBanUncheckedUpdateInput>
  }


  /**
   * ChannelBan delete
   */
  export type ChannelBanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelBan
     */
    select?: ChannelBanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelBanInclude<ExtArgs> | null
    /**
     * Filter which ChannelBan to delete.
     */
    where: ChannelBanWhereUniqueInput
  }


  /**
   * ChannelBan deleteMany
   */
  export type ChannelBanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChannelBans to delete
     */
    where?: ChannelBanWhereInput
  }


  /**
   * ChannelBan without action
   */
  export type ChannelBanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelBan
     */
    select?: ChannelBanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelBanInclude<ExtArgs> | null
  }



  /**
   * Model saveBanned
   */

  export type AggregateSaveBanned = {
    _count: SaveBannedCountAggregateOutputType | null
    _avg: SaveBannedAvgAggregateOutputType | null
    _sum: SaveBannedSumAggregateOutputType | null
    _min: SaveBannedMinAggregateOutputType | null
    _max: SaveBannedMaxAggregateOutputType | null
  }

  export type SaveBannedAvgAggregateOutputType = {
    id: number | null
    bannedUserId: number | null
    channelId: number | null
  }

  export type SaveBannedSumAggregateOutputType = {
    id: number | null
    bannedUserId: number | null
    channelId: number | null
  }

  export type SaveBannedMinAggregateOutputType = {
    id: number | null
    bannedUserId: number | null
    channelId: number | null
    status_User: string | null
  }

  export type SaveBannedMaxAggregateOutputType = {
    id: number | null
    bannedUserId: number | null
    channelId: number | null
    status_User: string | null
  }

  export type SaveBannedCountAggregateOutputType = {
    id: number
    bannedUserId: number
    channelId: number
    status_User: number
    _all: number
  }


  export type SaveBannedAvgAggregateInputType = {
    id?: true
    bannedUserId?: true
    channelId?: true
  }

  export type SaveBannedSumAggregateInputType = {
    id?: true
    bannedUserId?: true
    channelId?: true
  }

  export type SaveBannedMinAggregateInputType = {
    id?: true
    bannedUserId?: true
    channelId?: true
    status_User?: true
  }

  export type SaveBannedMaxAggregateInputType = {
    id?: true
    bannedUserId?: true
    channelId?: true
    status_User?: true
  }

  export type SaveBannedCountAggregateInputType = {
    id?: true
    bannedUserId?: true
    channelId?: true
    status_User?: true
    _all?: true
  }

  export type SaveBannedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which saveBanned to aggregate.
     */
    where?: saveBannedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of saveBanneds to fetch.
     */
    orderBy?: saveBannedOrderByWithRelationInput | saveBannedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: saveBannedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` saveBanneds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` saveBanneds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned saveBanneds
    **/
    _count?: true | SaveBannedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SaveBannedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SaveBannedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SaveBannedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SaveBannedMaxAggregateInputType
  }

  export type GetSaveBannedAggregateType<T extends SaveBannedAggregateArgs> = {
        [P in keyof T & keyof AggregateSaveBanned]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSaveBanned[P]>
      : GetScalarType<T[P], AggregateSaveBanned[P]>
  }




  export type saveBannedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: saveBannedWhereInput
    orderBy?: saveBannedOrderByWithAggregationInput | saveBannedOrderByWithAggregationInput[]
    by: SaveBannedScalarFieldEnum[] | SaveBannedScalarFieldEnum
    having?: saveBannedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SaveBannedCountAggregateInputType | true
    _avg?: SaveBannedAvgAggregateInputType
    _sum?: SaveBannedSumAggregateInputType
    _min?: SaveBannedMinAggregateInputType
    _max?: SaveBannedMaxAggregateInputType
  }

  export type SaveBannedGroupByOutputType = {
    id: number
    bannedUserId: number
    channelId: number
    status_User: string
    _count: SaveBannedCountAggregateOutputType | null
    _avg: SaveBannedAvgAggregateOutputType | null
    _sum: SaveBannedSumAggregateOutputType | null
    _min: SaveBannedMinAggregateOutputType | null
    _max: SaveBannedMaxAggregateOutputType | null
  }

  type GetSaveBannedGroupByPayload<T extends saveBannedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SaveBannedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SaveBannedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaveBannedGroupByOutputType[P]>
            : GetScalarType<T[P], SaveBannedGroupByOutputType[P]>
        }
      >
    >


  export type saveBannedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bannedUserId?: boolean
    channelId?: boolean
    status_User?: boolean
  }, ExtArgs["result"]["saveBanned"]>

  export type saveBannedSelectScalar = {
    id?: boolean
    bannedUserId?: boolean
    channelId?: boolean
    status_User?: boolean
  }


  export type $saveBannedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "saveBanned"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      bannedUserId: number
      channelId: number
      status_User: string
    }, ExtArgs["result"]["saveBanned"]>
    composites: {}
  }


  type saveBannedGetPayload<S extends boolean | null | undefined | saveBannedDefaultArgs> = $Result.GetResult<Prisma.$saveBannedPayload, S>

  type saveBannedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<saveBannedFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SaveBannedCountAggregateInputType | true
    }

  export interface saveBannedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['saveBanned'], meta: { name: 'saveBanned' } }
    /**
     * Find zero or one SaveBanned that matches the filter.
     * @param {saveBannedFindUniqueArgs} args - Arguments to find a SaveBanned
     * @example
     * // Get one SaveBanned
     * const saveBanned = await prisma.saveBanned.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends saveBannedFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, saveBannedFindUniqueArgs<ExtArgs>>
    ): Prisma__saveBannedClient<$Result.GetResult<Prisma.$saveBannedPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SaveBanned that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {saveBannedFindUniqueOrThrowArgs} args - Arguments to find a SaveBanned
     * @example
     * // Get one SaveBanned
     * const saveBanned = await prisma.saveBanned.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends saveBannedFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, saveBannedFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__saveBannedClient<$Result.GetResult<Prisma.$saveBannedPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SaveBanned that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saveBannedFindFirstArgs} args - Arguments to find a SaveBanned
     * @example
     * // Get one SaveBanned
     * const saveBanned = await prisma.saveBanned.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends saveBannedFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, saveBannedFindFirstArgs<ExtArgs>>
    ): Prisma__saveBannedClient<$Result.GetResult<Prisma.$saveBannedPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SaveBanned that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saveBannedFindFirstOrThrowArgs} args - Arguments to find a SaveBanned
     * @example
     * // Get one SaveBanned
     * const saveBanned = await prisma.saveBanned.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends saveBannedFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, saveBannedFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__saveBannedClient<$Result.GetResult<Prisma.$saveBannedPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SaveBanneds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saveBannedFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SaveBanneds
     * const saveBanneds = await prisma.saveBanned.findMany()
     * 
     * // Get first 10 SaveBanneds
     * const saveBanneds = await prisma.saveBanned.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const saveBannedWithIdOnly = await prisma.saveBanned.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends saveBannedFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, saveBannedFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$saveBannedPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SaveBanned.
     * @param {saveBannedCreateArgs} args - Arguments to create a SaveBanned.
     * @example
     * // Create one SaveBanned
     * const SaveBanned = await prisma.saveBanned.create({
     *   data: {
     *     // ... data to create a SaveBanned
     *   }
     * })
     * 
    **/
    create<T extends saveBannedCreateArgs<ExtArgs>>(
      args: SelectSubset<T, saveBannedCreateArgs<ExtArgs>>
    ): Prisma__saveBannedClient<$Result.GetResult<Prisma.$saveBannedPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SaveBanneds.
     *     @param {saveBannedCreateManyArgs} args - Arguments to create many SaveBanneds.
     *     @example
     *     // Create many SaveBanneds
     *     const saveBanned = await prisma.saveBanned.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends saveBannedCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, saveBannedCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SaveBanned.
     * @param {saveBannedDeleteArgs} args - Arguments to delete one SaveBanned.
     * @example
     * // Delete one SaveBanned
     * const SaveBanned = await prisma.saveBanned.delete({
     *   where: {
     *     // ... filter to delete one SaveBanned
     *   }
     * })
     * 
    **/
    delete<T extends saveBannedDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, saveBannedDeleteArgs<ExtArgs>>
    ): Prisma__saveBannedClient<$Result.GetResult<Prisma.$saveBannedPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SaveBanned.
     * @param {saveBannedUpdateArgs} args - Arguments to update one SaveBanned.
     * @example
     * // Update one SaveBanned
     * const saveBanned = await prisma.saveBanned.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends saveBannedUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, saveBannedUpdateArgs<ExtArgs>>
    ): Prisma__saveBannedClient<$Result.GetResult<Prisma.$saveBannedPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SaveBanneds.
     * @param {saveBannedDeleteManyArgs} args - Arguments to filter SaveBanneds to delete.
     * @example
     * // Delete a few SaveBanneds
     * const { count } = await prisma.saveBanned.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends saveBannedDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, saveBannedDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SaveBanneds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saveBannedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SaveBanneds
     * const saveBanned = await prisma.saveBanned.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends saveBannedUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, saveBannedUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SaveBanned.
     * @param {saveBannedUpsertArgs} args - Arguments to update or create a SaveBanned.
     * @example
     * // Update or create a SaveBanned
     * const saveBanned = await prisma.saveBanned.upsert({
     *   create: {
     *     // ... data to create a SaveBanned
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SaveBanned we want to update
     *   }
     * })
    **/
    upsert<T extends saveBannedUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, saveBannedUpsertArgs<ExtArgs>>
    ): Prisma__saveBannedClient<$Result.GetResult<Prisma.$saveBannedPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SaveBanneds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saveBannedCountArgs} args - Arguments to filter SaveBanneds to count.
     * @example
     * // Count the number of SaveBanneds
     * const count = await prisma.saveBanned.count({
     *   where: {
     *     // ... the filter for the SaveBanneds we want to count
     *   }
     * })
    **/
    count<T extends saveBannedCountArgs>(
      args?: Subset<T, saveBannedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SaveBannedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SaveBanned.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaveBannedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SaveBannedAggregateArgs>(args: Subset<T, SaveBannedAggregateArgs>): Prisma.PrismaPromise<GetSaveBannedAggregateType<T>>

    /**
     * Group by SaveBanned.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saveBannedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends saveBannedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: saveBannedGroupByArgs['orderBy'] }
        : { orderBy?: saveBannedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, saveBannedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaveBannedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the saveBanned model
   */
  readonly fields: saveBannedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for saveBanned.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__saveBannedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the saveBanned model
   */ 
  interface saveBannedFieldRefs {
    readonly id: FieldRef<"saveBanned", 'Int'>
    readonly bannedUserId: FieldRef<"saveBanned", 'Int'>
    readonly channelId: FieldRef<"saveBanned", 'Int'>
    readonly status_User: FieldRef<"saveBanned", 'String'>
  }
    

  // Custom InputTypes

  /**
   * saveBanned findUnique
   */
  export type saveBannedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saveBanned
     */
    select?: saveBannedSelect<ExtArgs> | null
    /**
     * Filter, which saveBanned to fetch.
     */
    where: saveBannedWhereUniqueInput
  }


  /**
   * saveBanned findUniqueOrThrow
   */
  export type saveBannedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saveBanned
     */
    select?: saveBannedSelect<ExtArgs> | null
    /**
     * Filter, which saveBanned to fetch.
     */
    where: saveBannedWhereUniqueInput
  }


  /**
   * saveBanned findFirst
   */
  export type saveBannedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saveBanned
     */
    select?: saveBannedSelect<ExtArgs> | null
    /**
     * Filter, which saveBanned to fetch.
     */
    where?: saveBannedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of saveBanneds to fetch.
     */
    orderBy?: saveBannedOrderByWithRelationInput | saveBannedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for saveBanneds.
     */
    cursor?: saveBannedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` saveBanneds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` saveBanneds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of saveBanneds.
     */
    distinct?: SaveBannedScalarFieldEnum | SaveBannedScalarFieldEnum[]
  }


  /**
   * saveBanned findFirstOrThrow
   */
  export type saveBannedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saveBanned
     */
    select?: saveBannedSelect<ExtArgs> | null
    /**
     * Filter, which saveBanned to fetch.
     */
    where?: saveBannedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of saveBanneds to fetch.
     */
    orderBy?: saveBannedOrderByWithRelationInput | saveBannedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for saveBanneds.
     */
    cursor?: saveBannedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` saveBanneds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` saveBanneds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of saveBanneds.
     */
    distinct?: SaveBannedScalarFieldEnum | SaveBannedScalarFieldEnum[]
  }


  /**
   * saveBanned findMany
   */
  export type saveBannedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saveBanned
     */
    select?: saveBannedSelect<ExtArgs> | null
    /**
     * Filter, which saveBanneds to fetch.
     */
    where?: saveBannedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of saveBanneds to fetch.
     */
    orderBy?: saveBannedOrderByWithRelationInput | saveBannedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing saveBanneds.
     */
    cursor?: saveBannedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` saveBanneds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` saveBanneds.
     */
    skip?: number
    distinct?: SaveBannedScalarFieldEnum | SaveBannedScalarFieldEnum[]
  }


  /**
   * saveBanned create
   */
  export type saveBannedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saveBanned
     */
    select?: saveBannedSelect<ExtArgs> | null
    /**
     * The data needed to create a saveBanned.
     */
    data: XOR<saveBannedCreateInput, saveBannedUncheckedCreateInput>
  }


  /**
   * saveBanned createMany
   */
  export type saveBannedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many saveBanneds.
     */
    data: saveBannedCreateManyInput | saveBannedCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * saveBanned update
   */
  export type saveBannedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saveBanned
     */
    select?: saveBannedSelect<ExtArgs> | null
    /**
     * The data needed to update a saveBanned.
     */
    data: XOR<saveBannedUpdateInput, saveBannedUncheckedUpdateInput>
    /**
     * Choose, which saveBanned to update.
     */
    where: saveBannedWhereUniqueInput
  }


  /**
   * saveBanned updateMany
   */
  export type saveBannedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update saveBanneds.
     */
    data: XOR<saveBannedUpdateManyMutationInput, saveBannedUncheckedUpdateManyInput>
    /**
     * Filter which saveBanneds to update
     */
    where?: saveBannedWhereInput
  }


  /**
   * saveBanned upsert
   */
  export type saveBannedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saveBanned
     */
    select?: saveBannedSelect<ExtArgs> | null
    /**
     * The filter to search for the saveBanned to update in case it exists.
     */
    where: saveBannedWhereUniqueInput
    /**
     * In case the saveBanned found by the `where` argument doesn't exist, create a new saveBanned with this data.
     */
    create: XOR<saveBannedCreateInput, saveBannedUncheckedCreateInput>
    /**
     * In case the saveBanned was found with the provided `where` argument, update it with this data.
     */
    update: XOR<saveBannedUpdateInput, saveBannedUncheckedUpdateInput>
  }


  /**
   * saveBanned delete
   */
  export type saveBannedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saveBanned
     */
    select?: saveBannedSelect<ExtArgs> | null
    /**
     * Filter which saveBanned to delete.
     */
    where: saveBannedWhereUniqueInput
  }


  /**
   * saveBanned deleteMany
   */
  export type saveBannedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which saveBanneds to delete
     */
    where?: saveBannedWhereInput
  }


  /**
   * saveBanned without action
   */
  export type saveBannedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saveBanned
     */
    select?: saveBannedSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id_user: 'id_user',
    name: 'name',
    avatar: 'avatar',
    TwoFactor: 'TwoFactor',
    ISVERIDIED: 'ISVERIDIED',
    IsFirstTime: 'IsFirstTime',
    InGame: 'InGame',
    secretKey: 'secretKey',
    About: 'About',
    status_user: 'status_user',
    email: 'email',
    WonBot: 'WonBot',
    LoseBot: 'LoseBot',
    wins: 'wins',
    losses: 'losses',
    games_played: 'games_played',
    Progress: 'Progress',
    Wins_percent: 'Wins_percent',
    Losses_percent: 'Losses_percent',
    homies: 'homies',
    invited: 'invited',
    homie_id: 'homie_id'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AchievmentsScalarFieldEnum: {
    id: 'id',
    achieve: 'achieve',
    msg: 'msg',
    userId: 'userId'
  };

  export type AchievmentsScalarFieldEnum = (typeof AchievmentsScalarFieldEnum)[keyof typeof AchievmentsScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    AcceptFriend: 'AcceptFriend',
    GameInvitation: 'GameInvitation',
    id_user: 'id_user',
    email: 'email',
    avatar: 'avatar',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const StatScalarFieldEnum: {
    id_stat: 'id_stat',
    result: 'result',
    level: 'level',
    achievment: 'achievment',
    userId: 'userId'
  };

  export type StatScalarFieldEnum = (typeof StatScalarFieldEnum)[keyof typeof StatScalarFieldEnum]


  export const HistoryScalarFieldEnum: {
    winner: 'winner',
    id_history: 'id_history',
    useravatar: 'useravatar',
    username: 'username',
    userId: 'userId',
    userscore: 'userscore',
    enemyId: 'enemyId',
    enemyname: 'enemyname',
    enemyavatar: 'enemyavatar',
    enemyscore: 'enemyscore'
  };

  export type HistoryScalarFieldEnum = (typeof HistoryScalarFieldEnum)[keyof typeof HistoryScalarFieldEnum]


  export const BlockedUserScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    id_blocked_user: 'id_blocked_user'
  };

  export type BlockedUserScalarFieldEnum = (typeof BlockedUserScalarFieldEnum)[keyof typeof BlockedUserScalarFieldEnum]


  export const FreindScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId',
    id_freind: 'id_freind'
  };

  export type FreindScalarFieldEnum = (typeof FreindScalarFieldEnum)[keyof typeof FreindScalarFieldEnum]


  export const DmScalarFieldEnum: {
    id_dm: 'id_dm',
    senderId: 'senderId',
    receiverId: 'receiverId',
    unread: 'unread',
    pinned: 'pinned'
  };

  export type DmScalarFieldEnum = (typeof DmScalarFieldEnum)[keyof typeof DmScalarFieldEnum]


  export const ConversationScalarFieldEnum: {
    id: 'id',
    text: 'text',
    dateSent: 'dateSent',
    outgoing: 'outgoing',
    incoming: 'incoming',
    type: 'type',
    idDm: 'idDm'
  };

  export type ConversationScalarFieldEnum = (typeof ConversationScalarFieldEnum)[keyof typeof ConversationScalarFieldEnum]


  export const ChannelScalarFieldEnum: {
    id_channel: 'id_channel',
    name: 'name',
    img: 'img',
    visibility: 'visibility',
    password: 'password'
  };

  export type ChannelScalarFieldEnum = (typeof ChannelScalarFieldEnum)[keyof typeof ChannelScalarFieldEnum]


  export const MemberChannelScalarFieldEnum: {
    userId: 'userId',
    channelId: 'channelId',
    status_UserInChannel: 'status_UserInChannel',
    muted: 'muted',
    period: 'period'
  };

  export type MemberChannelScalarFieldEnum = (typeof MemberChannelScalarFieldEnum)[keyof typeof MemberChannelScalarFieldEnum]


  export const DiscussionScalarFieldEnum: {
    id_disc: 'id_disc',
    message: 'message',
    dateSent: 'dateSent',
    userId: 'userId',
    channelId: 'channelId'
  };

  export type DiscussionScalarFieldEnum = (typeof DiscussionScalarFieldEnum)[keyof typeof DiscussionScalarFieldEnum]


  export const ChannelBanScalarFieldEnum: {
    bannedUserId: 'bannedUserId',
    channelId: 'channelId',
    status_User: 'status_User'
  };

  export type ChannelBanScalarFieldEnum = (typeof ChannelBanScalarFieldEnum)[keyof typeof ChannelBanScalarFieldEnum]


  export const SaveBannedScalarFieldEnum: {
    id: 'id',
    bannedUserId: 'bannedUserId',
    channelId: 'channelId',
    status_User: 'status_User'
  };

  export type SaveBannedScalarFieldEnum = (typeof SaveBannedScalarFieldEnum)[keyof typeof SaveBannedScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id_user?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    TwoFactor?: BoolNullableFilter<"User"> | boolean | null
    ISVERIDIED?: BoolNullableFilter<"User"> | boolean | null
    IsFirstTime?: BoolNullableFilter<"User"> | boolean | null
    InGame?: BoolNullableFilter<"User"> | boolean | null
    secretKey?: StringNullableFilter<"User"> | string | null
    About?: StringNullableFilter<"User"> | string | null
    status_user?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    WonBot?: IntNullableFilter<"User"> | number | null
    LoseBot?: IntNullableFilter<"User"> | number | null
    wins?: IntNullableFilter<"User"> | number | null
    losses?: IntNullableFilter<"User"> | number | null
    games_played?: IntNullableFilter<"User"> | number | null
    Progress?: IntNullableFilter<"User"> | number | null
    Wins_percent?: IntNullableFilter<"User"> | number | null
    Losses_percent?: IntNullableFilter<"User"> | number | null
    homies?: BoolNullableFilter<"User"> | boolean | null
    invited?: BoolNullableFilter<"User"> | boolean | null
    homie_id?: IntNullableFilter<"User"> | number | null
    stat?: XOR<StatNullableRelationFilter, StatWhereInput> | null
    achievments?: AchievmentsListRelationFilter
    history?: HistoryListRelationFilter
    notification?: NotificationListRelationFilter
    blockedUser?: BlockedUserListRelationFilter
    freind?: FreindListRelationFilter
    channels?: MemberChannelListRelationFilter
    sentDms?: DmListRelationFilter
    recvDms?: DmListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id_user?: SortOrder
    name?: SortOrder
    avatar?: SortOrderInput | SortOrder
    TwoFactor?: SortOrderInput | SortOrder
    ISVERIDIED?: SortOrderInput | SortOrder
    IsFirstTime?: SortOrderInput | SortOrder
    InGame?: SortOrderInput | SortOrder
    secretKey?: SortOrderInput | SortOrder
    About?: SortOrderInput | SortOrder
    status_user?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    WonBot?: SortOrderInput | SortOrder
    LoseBot?: SortOrderInput | SortOrder
    wins?: SortOrderInput | SortOrder
    losses?: SortOrderInput | SortOrder
    games_played?: SortOrderInput | SortOrder
    Progress?: SortOrderInput | SortOrder
    Wins_percent?: SortOrderInput | SortOrder
    Losses_percent?: SortOrderInput | SortOrder
    homies?: SortOrderInput | SortOrder
    invited?: SortOrderInput | SortOrder
    homie_id?: SortOrderInput | SortOrder
    stat?: StatOrderByWithRelationInput
    achievments?: AchievmentsOrderByRelationAggregateInput
    history?: HistoryOrderByRelationAggregateInput
    notification?: NotificationOrderByRelationAggregateInput
    blockedUser?: BlockedUserOrderByRelationAggregateInput
    freind?: FreindOrderByRelationAggregateInput
    channels?: MemberChannelOrderByRelationAggregateInput
    sentDms?: DmOrderByRelationAggregateInput
    recvDms?: DmOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id_user?: number
    name?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    avatar?: StringNullableFilter<"User"> | string | null
    TwoFactor?: BoolNullableFilter<"User"> | boolean | null
    ISVERIDIED?: BoolNullableFilter<"User"> | boolean | null
    IsFirstTime?: BoolNullableFilter<"User"> | boolean | null
    InGame?: BoolNullableFilter<"User"> | boolean | null
    secretKey?: StringNullableFilter<"User"> | string | null
    About?: StringNullableFilter<"User"> | string | null
    status_user?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    WonBot?: IntNullableFilter<"User"> | number | null
    LoseBot?: IntNullableFilter<"User"> | number | null
    wins?: IntNullableFilter<"User"> | number | null
    losses?: IntNullableFilter<"User"> | number | null
    games_played?: IntNullableFilter<"User"> | number | null
    Progress?: IntNullableFilter<"User"> | number | null
    Wins_percent?: IntNullableFilter<"User"> | number | null
    Losses_percent?: IntNullableFilter<"User"> | number | null
    homies?: BoolNullableFilter<"User"> | boolean | null
    invited?: BoolNullableFilter<"User"> | boolean | null
    homie_id?: IntNullableFilter<"User"> | number | null
    stat?: XOR<StatNullableRelationFilter, StatWhereInput> | null
    achievments?: AchievmentsListRelationFilter
    history?: HistoryListRelationFilter
    notification?: NotificationListRelationFilter
    blockedUser?: BlockedUserListRelationFilter
    freind?: FreindListRelationFilter
    channels?: MemberChannelListRelationFilter
    sentDms?: DmListRelationFilter
    recvDms?: DmListRelationFilter
  }, "id_user" | "id_user" | "name">

  export type UserOrderByWithAggregationInput = {
    id_user?: SortOrder
    name?: SortOrder
    avatar?: SortOrderInput | SortOrder
    TwoFactor?: SortOrderInput | SortOrder
    ISVERIDIED?: SortOrderInput | SortOrder
    IsFirstTime?: SortOrderInput | SortOrder
    InGame?: SortOrderInput | SortOrder
    secretKey?: SortOrderInput | SortOrder
    About?: SortOrderInput | SortOrder
    status_user?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    WonBot?: SortOrderInput | SortOrder
    LoseBot?: SortOrderInput | SortOrder
    wins?: SortOrderInput | SortOrder
    losses?: SortOrderInput | SortOrder
    games_played?: SortOrderInput | SortOrder
    Progress?: SortOrderInput | SortOrder
    Wins_percent?: SortOrderInput | SortOrder
    Losses_percent?: SortOrderInput | SortOrder
    homies?: SortOrderInput | SortOrder
    invited?: SortOrderInput | SortOrder
    homie_id?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id_user?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    TwoFactor?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    ISVERIDIED?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    IsFirstTime?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    InGame?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    secretKey?: StringNullableWithAggregatesFilter<"User"> | string | null
    About?: StringNullableWithAggregatesFilter<"User"> | string | null
    status_user?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    WonBot?: IntNullableWithAggregatesFilter<"User"> | number | null
    LoseBot?: IntNullableWithAggregatesFilter<"User"> | number | null
    wins?: IntNullableWithAggregatesFilter<"User"> | number | null
    losses?: IntNullableWithAggregatesFilter<"User"> | number | null
    games_played?: IntNullableWithAggregatesFilter<"User"> | number | null
    Progress?: IntNullableWithAggregatesFilter<"User"> | number | null
    Wins_percent?: IntNullableWithAggregatesFilter<"User"> | number | null
    Losses_percent?: IntNullableWithAggregatesFilter<"User"> | number | null
    homies?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    invited?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    homie_id?: IntNullableWithAggregatesFilter<"User"> | number | null
  }

  export type AchievmentsWhereInput = {
    AND?: AchievmentsWhereInput | AchievmentsWhereInput[]
    OR?: AchievmentsWhereInput[]
    NOT?: AchievmentsWhereInput | AchievmentsWhereInput[]
    id?: IntFilter<"Achievments"> | number
    achieve?: StringNullableFilter<"Achievments"> | string | null
    msg?: StringNullableFilter<"Achievments"> | string | null
    userId?: IntFilter<"Achievments"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AchievmentsOrderByWithRelationInput = {
    id?: SortOrder
    achieve?: SortOrderInput | SortOrder
    msg?: SortOrderInput | SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AchievmentsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AchievmentsWhereInput | AchievmentsWhereInput[]
    OR?: AchievmentsWhereInput[]
    NOT?: AchievmentsWhereInput | AchievmentsWhereInput[]
    achieve?: StringNullableFilter<"Achievments"> | string | null
    msg?: StringNullableFilter<"Achievments"> | string | null
    userId?: IntFilter<"Achievments"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AchievmentsOrderByWithAggregationInput = {
    id?: SortOrder
    achieve?: SortOrderInput | SortOrder
    msg?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: AchievmentsCountOrderByAggregateInput
    _avg?: AchievmentsAvgOrderByAggregateInput
    _max?: AchievmentsMaxOrderByAggregateInput
    _min?: AchievmentsMinOrderByAggregateInput
    _sum?: AchievmentsSumOrderByAggregateInput
  }

  export type AchievmentsScalarWhereWithAggregatesInput = {
    AND?: AchievmentsScalarWhereWithAggregatesInput | AchievmentsScalarWhereWithAggregatesInput[]
    OR?: AchievmentsScalarWhereWithAggregatesInput[]
    NOT?: AchievmentsScalarWhereWithAggregatesInput | AchievmentsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Achievments"> | number
    achieve?: StringNullableWithAggregatesFilter<"Achievments"> | string | null
    msg?: StringNullableWithAggregatesFilter<"Achievments"> | string | null
    userId?: IntWithAggregatesFilter<"Achievments"> | number
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    AcceptFriend?: BoolNullableFilter<"Notification"> | boolean | null
    GameInvitation?: BoolNullableFilter<"Notification"> | boolean | null
    id_user?: IntNullableFilter<"Notification"> | number | null
    email?: StringNullableFilter<"Notification"> | string | null
    avatar?: StringNullableFilter<"Notification"> | string | null
    name?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    AcceptFriend?: SortOrderInput | SortOrder
    GameInvitation?: SortOrderInput | SortOrder
    id_user?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: IntFilter<"Notification"> | number
    AcceptFriend?: BoolNullableFilter<"Notification"> | boolean | null
    GameInvitation?: BoolNullableFilter<"Notification"> | boolean | null
    id_user?: IntNullableFilter<"Notification"> | number | null
    email?: StringNullableFilter<"Notification"> | string | null
    avatar?: StringNullableFilter<"Notification"> | string | null
    name?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    AcceptFriend?: SortOrderInput | SortOrder
    GameInvitation?: SortOrderInput | SortOrder
    id_user?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    userId?: IntWithAggregatesFilter<"Notification"> | number
    AcceptFriend?: BoolNullableWithAggregatesFilter<"Notification"> | boolean | null
    GameInvitation?: BoolNullableWithAggregatesFilter<"Notification"> | boolean | null
    id_user?: IntNullableWithAggregatesFilter<"Notification"> | number | null
    email?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    name?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type StatWhereInput = {
    AND?: StatWhereInput | StatWhereInput[]
    OR?: StatWhereInput[]
    NOT?: StatWhereInput | StatWhereInput[]
    id_stat?: IntFilter<"Stat"> | number
    result?: StringFilter<"Stat"> | string
    level?: IntFilter<"Stat"> | number
    achievment?: StringFilter<"Stat"> | string
    userId?: IntFilter<"Stat"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type StatOrderByWithRelationInput = {
    id_stat?: SortOrder
    result?: SortOrder
    level?: SortOrder
    achievment?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type StatWhereUniqueInput = Prisma.AtLeast<{
    id_stat?: number
    userId?: number
    AND?: StatWhereInput | StatWhereInput[]
    OR?: StatWhereInput[]
    NOT?: StatWhereInput | StatWhereInput[]
    result?: StringFilter<"Stat"> | string
    level?: IntFilter<"Stat"> | number
    achievment?: StringFilter<"Stat"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id_stat" | "userId">

  export type StatOrderByWithAggregationInput = {
    id_stat?: SortOrder
    result?: SortOrder
    level?: SortOrder
    achievment?: SortOrder
    userId?: SortOrder
    _count?: StatCountOrderByAggregateInput
    _avg?: StatAvgOrderByAggregateInput
    _max?: StatMaxOrderByAggregateInput
    _min?: StatMinOrderByAggregateInput
    _sum?: StatSumOrderByAggregateInput
  }

  export type StatScalarWhereWithAggregatesInput = {
    AND?: StatScalarWhereWithAggregatesInput | StatScalarWhereWithAggregatesInput[]
    OR?: StatScalarWhereWithAggregatesInput[]
    NOT?: StatScalarWhereWithAggregatesInput | StatScalarWhereWithAggregatesInput[]
    id_stat?: IntWithAggregatesFilter<"Stat"> | number
    result?: StringWithAggregatesFilter<"Stat"> | string
    level?: IntWithAggregatesFilter<"Stat"> | number
    achievment?: StringWithAggregatesFilter<"Stat"> | string
    userId?: IntWithAggregatesFilter<"Stat"> | number
  }

  export type HistoryWhereInput = {
    AND?: HistoryWhereInput | HistoryWhereInput[]
    OR?: HistoryWhereInput[]
    NOT?: HistoryWhereInput | HistoryWhereInput[]
    winner?: BoolNullableFilter<"History"> | boolean | null
    id_history?: IntFilter<"History"> | number
    useravatar?: StringNullableFilter<"History"> | string | null
    username?: StringNullableFilter<"History"> | string | null
    userId?: IntFilter<"History"> | number
    userscore?: IntNullableFilter<"History"> | number | null
    enemyId?: IntNullableFilter<"History"> | number | null
    enemyname?: StringNullableFilter<"History"> | string | null
    enemyavatar?: StringNullableFilter<"History"> | string | null
    enemyscore?: IntNullableFilter<"History"> | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type HistoryOrderByWithRelationInput = {
    winner?: SortOrderInput | SortOrder
    id_history?: SortOrder
    useravatar?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    userId?: SortOrder
    userscore?: SortOrderInput | SortOrder
    enemyId?: SortOrderInput | SortOrder
    enemyname?: SortOrderInput | SortOrder
    enemyavatar?: SortOrderInput | SortOrder
    enemyscore?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type HistoryWhereUniqueInput = Prisma.AtLeast<{
    id_history?: number
    AND?: HistoryWhereInput | HistoryWhereInput[]
    OR?: HistoryWhereInput[]
    NOT?: HistoryWhereInput | HistoryWhereInput[]
    winner?: BoolNullableFilter<"History"> | boolean | null
    useravatar?: StringNullableFilter<"History"> | string | null
    username?: StringNullableFilter<"History"> | string | null
    userId?: IntFilter<"History"> | number
    userscore?: IntNullableFilter<"History"> | number | null
    enemyId?: IntNullableFilter<"History"> | number | null
    enemyname?: StringNullableFilter<"History"> | string | null
    enemyavatar?: StringNullableFilter<"History"> | string | null
    enemyscore?: IntNullableFilter<"History"> | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id_history">

  export type HistoryOrderByWithAggregationInput = {
    winner?: SortOrderInput | SortOrder
    id_history?: SortOrder
    useravatar?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    userId?: SortOrder
    userscore?: SortOrderInput | SortOrder
    enemyId?: SortOrderInput | SortOrder
    enemyname?: SortOrderInput | SortOrder
    enemyavatar?: SortOrderInput | SortOrder
    enemyscore?: SortOrderInput | SortOrder
    _count?: HistoryCountOrderByAggregateInput
    _avg?: HistoryAvgOrderByAggregateInput
    _max?: HistoryMaxOrderByAggregateInput
    _min?: HistoryMinOrderByAggregateInput
    _sum?: HistorySumOrderByAggregateInput
  }

  export type HistoryScalarWhereWithAggregatesInput = {
    AND?: HistoryScalarWhereWithAggregatesInput | HistoryScalarWhereWithAggregatesInput[]
    OR?: HistoryScalarWhereWithAggregatesInput[]
    NOT?: HistoryScalarWhereWithAggregatesInput | HistoryScalarWhereWithAggregatesInput[]
    winner?: BoolNullableWithAggregatesFilter<"History"> | boolean | null
    id_history?: IntWithAggregatesFilter<"History"> | number
    useravatar?: StringNullableWithAggregatesFilter<"History"> | string | null
    username?: StringNullableWithAggregatesFilter<"History"> | string | null
    userId?: IntWithAggregatesFilter<"History"> | number
    userscore?: IntNullableWithAggregatesFilter<"History"> | number | null
    enemyId?: IntNullableWithAggregatesFilter<"History"> | number | null
    enemyname?: StringNullableWithAggregatesFilter<"History"> | string | null
    enemyavatar?: StringNullableWithAggregatesFilter<"History"> | string | null
    enemyscore?: IntNullableWithAggregatesFilter<"History"> | number | null
  }

  export type BlockedUserWhereInput = {
    AND?: BlockedUserWhereInput | BlockedUserWhereInput[]
    OR?: BlockedUserWhereInput[]
    NOT?: BlockedUserWhereInput | BlockedUserWhereInput[]
    id?: IntFilter<"BlockedUser"> | number
    userId?: IntFilter<"BlockedUser"> | number
    id_blocked_user?: IntFilter<"BlockedUser"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type BlockedUserOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    id_blocked_user?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type BlockedUserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BlockedUserWhereInput | BlockedUserWhereInput[]
    OR?: BlockedUserWhereInput[]
    NOT?: BlockedUserWhereInput | BlockedUserWhereInput[]
    userId?: IntFilter<"BlockedUser"> | number
    id_blocked_user?: IntFilter<"BlockedUser"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type BlockedUserOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    id_blocked_user?: SortOrder
    _count?: BlockedUserCountOrderByAggregateInput
    _avg?: BlockedUserAvgOrderByAggregateInput
    _max?: BlockedUserMaxOrderByAggregateInput
    _min?: BlockedUserMinOrderByAggregateInput
    _sum?: BlockedUserSumOrderByAggregateInput
  }

  export type BlockedUserScalarWhereWithAggregatesInput = {
    AND?: BlockedUserScalarWhereWithAggregatesInput | BlockedUserScalarWhereWithAggregatesInput[]
    OR?: BlockedUserScalarWhereWithAggregatesInput[]
    NOT?: BlockedUserScalarWhereWithAggregatesInput | BlockedUserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BlockedUser"> | number
    userId?: IntWithAggregatesFilter<"BlockedUser"> | number
    id_blocked_user?: IntWithAggregatesFilter<"BlockedUser"> | number
  }

  export type FreindWhereInput = {
    AND?: FreindWhereInput | FreindWhereInput[]
    OR?: FreindWhereInput[]
    NOT?: FreindWhereInput | FreindWhereInput[]
    id?: IntFilter<"Freind"> | number
    name?: StringNullableFilter<"Freind"> | string | null
    userId?: IntFilter<"Freind"> | number
    id_freind?: IntNullableFilter<"Freind"> | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FreindOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    userId?: SortOrder
    id_freind?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type FreindWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FreindWhereInput | FreindWhereInput[]
    OR?: FreindWhereInput[]
    NOT?: FreindWhereInput | FreindWhereInput[]
    name?: StringNullableFilter<"Freind"> | string | null
    userId?: IntFilter<"Freind"> | number
    id_freind?: IntNullableFilter<"Freind"> | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type FreindOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    userId?: SortOrder
    id_freind?: SortOrderInput | SortOrder
    _count?: FreindCountOrderByAggregateInput
    _avg?: FreindAvgOrderByAggregateInput
    _max?: FreindMaxOrderByAggregateInput
    _min?: FreindMinOrderByAggregateInput
    _sum?: FreindSumOrderByAggregateInput
  }

  export type FreindScalarWhereWithAggregatesInput = {
    AND?: FreindScalarWhereWithAggregatesInput | FreindScalarWhereWithAggregatesInput[]
    OR?: FreindScalarWhereWithAggregatesInput[]
    NOT?: FreindScalarWhereWithAggregatesInput | FreindScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Freind"> | number
    name?: StringNullableWithAggregatesFilter<"Freind"> | string | null
    userId?: IntWithAggregatesFilter<"Freind"> | number
    id_freind?: IntNullableWithAggregatesFilter<"Freind"> | number | null
  }

  export type DmWhereInput = {
    AND?: DmWhereInput | DmWhereInput[]
    OR?: DmWhereInput[]
    NOT?: DmWhereInput | DmWhereInput[]
    id_dm?: IntFilter<"Dm"> | number
    senderId?: IntFilter<"Dm"> | number
    receiverId?: IntFilter<"Dm"> | number
    unread?: IntFilter<"Dm"> | number
    pinned?: BoolFilter<"Dm"> | boolean
    sender?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
    conversation?: ConversationListRelationFilter
  }

  export type DmOrderByWithRelationInput = {
    id_dm?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    unread?: SortOrder
    pinned?: SortOrder
    sender?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
    conversation?: ConversationOrderByRelationAggregateInput
  }

  export type DmWhereUniqueInput = Prisma.AtLeast<{
    id_dm?: number
    senderId_receiverId?: DmSenderIdReceiverIdCompoundUniqueInput
    AND?: DmWhereInput | DmWhereInput[]
    OR?: DmWhereInput[]
    NOT?: DmWhereInput | DmWhereInput[]
    senderId?: IntFilter<"Dm"> | number
    receiverId?: IntFilter<"Dm"> | number
    unread?: IntFilter<"Dm"> | number
    pinned?: BoolFilter<"Dm"> | boolean
    sender?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
    conversation?: ConversationListRelationFilter
  }, "id_dm" | "senderId_receiverId">

  export type DmOrderByWithAggregationInput = {
    id_dm?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    unread?: SortOrder
    pinned?: SortOrder
    _count?: DmCountOrderByAggregateInput
    _avg?: DmAvgOrderByAggregateInput
    _max?: DmMaxOrderByAggregateInput
    _min?: DmMinOrderByAggregateInput
    _sum?: DmSumOrderByAggregateInput
  }

  export type DmScalarWhereWithAggregatesInput = {
    AND?: DmScalarWhereWithAggregatesInput | DmScalarWhereWithAggregatesInput[]
    OR?: DmScalarWhereWithAggregatesInput[]
    NOT?: DmScalarWhereWithAggregatesInput | DmScalarWhereWithAggregatesInput[]
    id_dm?: IntWithAggregatesFilter<"Dm"> | number
    senderId?: IntWithAggregatesFilter<"Dm"> | number
    receiverId?: IntWithAggregatesFilter<"Dm"> | number
    unread?: IntWithAggregatesFilter<"Dm"> | number
    pinned?: BoolWithAggregatesFilter<"Dm"> | boolean
  }

  export type ConversationWhereInput = {
    AND?: ConversationWhereInput | ConversationWhereInput[]
    OR?: ConversationWhereInput[]
    NOT?: ConversationWhereInput | ConversationWhereInput[]
    id?: IntFilter<"Conversation"> | number
    text?: StringFilter<"Conversation"> | string
    dateSent?: DateTimeFilter<"Conversation"> | Date | string
    outgoing?: IntFilter<"Conversation"> | number
    incoming?: IntFilter<"Conversation"> | number
    type?: StringFilter<"Conversation"> | string
    idDm?: IntFilter<"Conversation"> | number
    dm?: XOR<DmRelationFilter, DmWhereInput>
  }

  export type ConversationOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    dateSent?: SortOrder
    outgoing?: SortOrder
    incoming?: SortOrder
    type?: SortOrder
    idDm?: SortOrder
    dm?: DmOrderByWithRelationInput
  }

  export type ConversationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ConversationWhereInput | ConversationWhereInput[]
    OR?: ConversationWhereInput[]
    NOT?: ConversationWhereInput | ConversationWhereInput[]
    text?: StringFilter<"Conversation"> | string
    dateSent?: DateTimeFilter<"Conversation"> | Date | string
    outgoing?: IntFilter<"Conversation"> | number
    incoming?: IntFilter<"Conversation"> | number
    type?: StringFilter<"Conversation"> | string
    idDm?: IntFilter<"Conversation"> | number
    dm?: XOR<DmRelationFilter, DmWhereInput>
  }, "id">

  export type ConversationOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    dateSent?: SortOrder
    outgoing?: SortOrder
    incoming?: SortOrder
    type?: SortOrder
    idDm?: SortOrder
    _count?: ConversationCountOrderByAggregateInput
    _avg?: ConversationAvgOrderByAggregateInput
    _max?: ConversationMaxOrderByAggregateInput
    _min?: ConversationMinOrderByAggregateInput
    _sum?: ConversationSumOrderByAggregateInput
  }

  export type ConversationScalarWhereWithAggregatesInput = {
    AND?: ConversationScalarWhereWithAggregatesInput | ConversationScalarWhereWithAggregatesInput[]
    OR?: ConversationScalarWhereWithAggregatesInput[]
    NOT?: ConversationScalarWhereWithAggregatesInput | ConversationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Conversation"> | number
    text?: StringWithAggregatesFilter<"Conversation"> | string
    dateSent?: DateTimeWithAggregatesFilter<"Conversation"> | Date | string
    outgoing?: IntWithAggregatesFilter<"Conversation"> | number
    incoming?: IntWithAggregatesFilter<"Conversation"> | number
    type?: StringWithAggregatesFilter<"Conversation"> | string
    idDm?: IntWithAggregatesFilter<"Conversation"> | number
  }

  export type ChannelWhereInput = {
    AND?: ChannelWhereInput | ChannelWhereInput[]
    OR?: ChannelWhereInput[]
    NOT?: ChannelWhereInput | ChannelWhereInput[]
    id_channel?: IntFilter<"Channel"> | number
    name?: StringFilter<"Channel"> | string
    img?: StringNullableFilter<"Channel"> | string | null
    visibility?: StringFilter<"Channel"> | string
    password?: StringNullableFilter<"Channel"> | string | null
    users?: MemberChannelListRelationFilter
  }

  export type ChannelOrderByWithRelationInput = {
    id_channel?: SortOrder
    name?: SortOrder
    img?: SortOrderInput | SortOrder
    visibility?: SortOrder
    password?: SortOrderInput | SortOrder
    users?: MemberChannelOrderByRelationAggregateInput
  }

  export type ChannelWhereUniqueInput = Prisma.AtLeast<{
    id_channel?: number
    name?: string
    AND?: ChannelWhereInput | ChannelWhereInput[]
    OR?: ChannelWhereInput[]
    NOT?: ChannelWhereInput | ChannelWhereInput[]
    img?: StringNullableFilter<"Channel"> | string | null
    visibility?: StringFilter<"Channel"> | string
    password?: StringNullableFilter<"Channel"> | string | null
    users?: MemberChannelListRelationFilter
  }, "id_channel" | "name">

  export type ChannelOrderByWithAggregationInput = {
    id_channel?: SortOrder
    name?: SortOrder
    img?: SortOrderInput | SortOrder
    visibility?: SortOrder
    password?: SortOrderInput | SortOrder
    _count?: ChannelCountOrderByAggregateInput
    _avg?: ChannelAvgOrderByAggregateInput
    _max?: ChannelMaxOrderByAggregateInput
    _min?: ChannelMinOrderByAggregateInput
    _sum?: ChannelSumOrderByAggregateInput
  }

  export type ChannelScalarWhereWithAggregatesInput = {
    AND?: ChannelScalarWhereWithAggregatesInput | ChannelScalarWhereWithAggregatesInput[]
    OR?: ChannelScalarWhereWithAggregatesInput[]
    NOT?: ChannelScalarWhereWithAggregatesInput | ChannelScalarWhereWithAggregatesInput[]
    id_channel?: IntWithAggregatesFilter<"Channel"> | number
    name?: StringWithAggregatesFilter<"Channel"> | string
    img?: StringNullableWithAggregatesFilter<"Channel"> | string | null
    visibility?: StringWithAggregatesFilter<"Channel"> | string
    password?: StringNullableWithAggregatesFilter<"Channel"> | string | null
  }

  export type MemberChannelWhereInput = {
    AND?: MemberChannelWhereInput | MemberChannelWhereInput[]
    OR?: MemberChannelWhereInput[]
    NOT?: MemberChannelWhereInput | MemberChannelWhereInput[]
    userId?: IntFilter<"MemberChannel"> | number
    channelId?: IntFilter<"MemberChannel"> | number
    status_UserInChannel?: StringFilter<"MemberChannel"> | string
    muted?: BoolNullableFilter<"MemberChannel"> | boolean | null
    period?: DateTimeNullableFilter<"MemberChannel"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
    discussions?: DiscussionListRelationFilter
    banned?: XOR<ChannelBanNullableRelationFilter, ChannelBanWhereInput> | null
  }

  export type MemberChannelOrderByWithRelationInput = {
    userId?: SortOrder
    channelId?: SortOrder
    status_UserInChannel?: SortOrder
    muted?: SortOrderInput | SortOrder
    period?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    channel?: ChannelOrderByWithRelationInput
    discussions?: DiscussionOrderByRelationAggregateInput
    banned?: ChannelBanOrderByWithRelationInput
  }

  export type MemberChannelWhereUniqueInput = Prisma.AtLeast<{
    userId_channelId?: MemberChannelUserIdChannelIdCompoundUniqueInput
    AND?: MemberChannelWhereInput | MemberChannelWhereInput[]
    OR?: MemberChannelWhereInput[]
    NOT?: MemberChannelWhereInput | MemberChannelWhereInput[]
    userId?: IntFilter<"MemberChannel"> | number
    channelId?: IntFilter<"MemberChannel"> | number
    status_UserInChannel?: StringFilter<"MemberChannel"> | string
    muted?: BoolNullableFilter<"MemberChannel"> | boolean | null
    period?: DateTimeNullableFilter<"MemberChannel"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
    discussions?: DiscussionListRelationFilter
    banned?: XOR<ChannelBanNullableRelationFilter, ChannelBanWhereInput> | null
  }, "userId_channelId">

  export type MemberChannelOrderByWithAggregationInput = {
    userId?: SortOrder
    channelId?: SortOrder
    status_UserInChannel?: SortOrder
    muted?: SortOrderInput | SortOrder
    period?: SortOrderInput | SortOrder
    _count?: MemberChannelCountOrderByAggregateInput
    _avg?: MemberChannelAvgOrderByAggregateInput
    _max?: MemberChannelMaxOrderByAggregateInput
    _min?: MemberChannelMinOrderByAggregateInput
    _sum?: MemberChannelSumOrderByAggregateInput
  }

  export type MemberChannelScalarWhereWithAggregatesInput = {
    AND?: MemberChannelScalarWhereWithAggregatesInput | MemberChannelScalarWhereWithAggregatesInput[]
    OR?: MemberChannelScalarWhereWithAggregatesInput[]
    NOT?: MemberChannelScalarWhereWithAggregatesInput | MemberChannelScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"MemberChannel"> | number
    channelId?: IntWithAggregatesFilter<"MemberChannel"> | number
    status_UserInChannel?: StringWithAggregatesFilter<"MemberChannel"> | string
    muted?: BoolNullableWithAggregatesFilter<"MemberChannel"> | boolean | null
    period?: DateTimeNullableWithAggregatesFilter<"MemberChannel"> | Date | string | null
  }

  export type DiscussionWhereInput = {
    AND?: DiscussionWhereInput | DiscussionWhereInput[]
    OR?: DiscussionWhereInput[]
    NOT?: DiscussionWhereInput | DiscussionWhereInput[]
    id_disc?: IntFilter<"Discussion"> | number
    message?: StringFilter<"Discussion"> | string
    dateSent?: DateTimeFilter<"Discussion"> | Date | string
    userId?: IntFilter<"Discussion"> | number
    channelId?: IntFilter<"Discussion"> | number
    memberchannel?: XOR<MemberChannelRelationFilter, MemberChannelWhereInput>
  }

  export type DiscussionOrderByWithRelationInput = {
    id_disc?: SortOrder
    message?: SortOrder
    dateSent?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    memberchannel?: MemberChannelOrderByWithRelationInput
  }

  export type DiscussionWhereUniqueInput = Prisma.AtLeast<{
    id_disc?: number
    AND?: DiscussionWhereInput | DiscussionWhereInput[]
    OR?: DiscussionWhereInput[]
    NOT?: DiscussionWhereInput | DiscussionWhereInput[]
    message?: StringFilter<"Discussion"> | string
    dateSent?: DateTimeFilter<"Discussion"> | Date | string
    userId?: IntFilter<"Discussion"> | number
    channelId?: IntFilter<"Discussion"> | number
    memberchannel?: XOR<MemberChannelRelationFilter, MemberChannelWhereInput>
  }, "id_disc">

  export type DiscussionOrderByWithAggregationInput = {
    id_disc?: SortOrder
    message?: SortOrder
    dateSent?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    _count?: DiscussionCountOrderByAggregateInput
    _avg?: DiscussionAvgOrderByAggregateInput
    _max?: DiscussionMaxOrderByAggregateInput
    _min?: DiscussionMinOrderByAggregateInput
    _sum?: DiscussionSumOrderByAggregateInput
  }

  export type DiscussionScalarWhereWithAggregatesInput = {
    AND?: DiscussionScalarWhereWithAggregatesInput | DiscussionScalarWhereWithAggregatesInput[]
    OR?: DiscussionScalarWhereWithAggregatesInput[]
    NOT?: DiscussionScalarWhereWithAggregatesInput | DiscussionScalarWhereWithAggregatesInput[]
    id_disc?: IntWithAggregatesFilter<"Discussion"> | number
    message?: StringWithAggregatesFilter<"Discussion"> | string
    dateSent?: DateTimeWithAggregatesFilter<"Discussion"> | Date | string
    userId?: IntWithAggregatesFilter<"Discussion"> | number
    channelId?: IntWithAggregatesFilter<"Discussion"> | number
  }

  export type ChannelBanWhereInput = {
    AND?: ChannelBanWhereInput | ChannelBanWhereInput[]
    OR?: ChannelBanWhereInput[]
    NOT?: ChannelBanWhereInput | ChannelBanWhereInput[]
    bannedUserId?: IntFilter<"ChannelBan"> | number
    channelId?: IntFilter<"ChannelBan"> | number
    status_User?: StringFilter<"ChannelBan"> | string
    bannedUser?: XOR<MemberChannelRelationFilter, MemberChannelWhereInput>
  }

  export type ChannelBanOrderByWithRelationInput = {
    bannedUserId?: SortOrder
    channelId?: SortOrder
    status_User?: SortOrder
    bannedUser?: MemberChannelOrderByWithRelationInput
  }

  export type ChannelBanWhereUniqueInput = Prisma.AtLeast<{
    bannedUserId_channelId?: ChannelBanBannedUserIdChannelIdCompoundUniqueInput
    AND?: ChannelBanWhereInput | ChannelBanWhereInput[]
    OR?: ChannelBanWhereInput[]
    NOT?: ChannelBanWhereInput | ChannelBanWhereInput[]
    bannedUserId?: IntFilter<"ChannelBan"> | number
    channelId?: IntFilter<"ChannelBan"> | number
    status_User?: StringFilter<"ChannelBan"> | string
    bannedUser?: XOR<MemberChannelRelationFilter, MemberChannelWhereInput>
  }, "bannedUserId_channelId">

  export type ChannelBanOrderByWithAggregationInput = {
    bannedUserId?: SortOrder
    channelId?: SortOrder
    status_User?: SortOrder
    _count?: ChannelBanCountOrderByAggregateInput
    _avg?: ChannelBanAvgOrderByAggregateInput
    _max?: ChannelBanMaxOrderByAggregateInput
    _min?: ChannelBanMinOrderByAggregateInput
    _sum?: ChannelBanSumOrderByAggregateInput
  }

  export type ChannelBanScalarWhereWithAggregatesInput = {
    AND?: ChannelBanScalarWhereWithAggregatesInput | ChannelBanScalarWhereWithAggregatesInput[]
    OR?: ChannelBanScalarWhereWithAggregatesInput[]
    NOT?: ChannelBanScalarWhereWithAggregatesInput | ChannelBanScalarWhereWithAggregatesInput[]
    bannedUserId?: IntWithAggregatesFilter<"ChannelBan"> | number
    channelId?: IntWithAggregatesFilter<"ChannelBan"> | number
    status_User?: StringWithAggregatesFilter<"ChannelBan"> | string
  }

  export type saveBannedWhereInput = {
    AND?: saveBannedWhereInput | saveBannedWhereInput[]
    OR?: saveBannedWhereInput[]
    NOT?: saveBannedWhereInput | saveBannedWhereInput[]
    id?: IntFilter<"saveBanned"> | number
    bannedUserId?: IntFilter<"saveBanned"> | number
    channelId?: IntFilter<"saveBanned"> | number
    status_User?: StringFilter<"saveBanned"> | string
  }

  export type saveBannedOrderByWithRelationInput = {
    id?: SortOrder
    bannedUserId?: SortOrder
    channelId?: SortOrder
    status_User?: SortOrder
  }

  export type saveBannedWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: saveBannedWhereInput | saveBannedWhereInput[]
    OR?: saveBannedWhereInput[]
    NOT?: saveBannedWhereInput | saveBannedWhereInput[]
    bannedUserId?: IntFilter<"saveBanned"> | number
    channelId?: IntFilter<"saveBanned"> | number
    status_User?: StringFilter<"saveBanned"> | string
  }, "id">

  export type saveBannedOrderByWithAggregationInput = {
    id?: SortOrder
    bannedUserId?: SortOrder
    channelId?: SortOrder
    status_User?: SortOrder
    _count?: saveBannedCountOrderByAggregateInput
    _avg?: saveBannedAvgOrderByAggregateInput
    _max?: saveBannedMaxOrderByAggregateInput
    _min?: saveBannedMinOrderByAggregateInput
    _sum?: saveBannedSumOrderByAggregateInput
  }

  export type saveBannedScalarWhereWithAggregatesInput = {
    AND?: saveBannedScalarWhereWithAggregatesInput | saveBannedScalarWhereWithAggregatesInput[]
    OR?: saveBannedScalarWhereWithAggregatesInput[]
    NOT?: saveBannedScalarWhereWithAggregatesInput | saveBannedScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"saveBanned"> | number
    bannedUserId?: IntWithAggregatesFilter<"saveBanned"> | number
    channelId?: IntWithAggregatesFilter<"saveBanned"> | number
    status_User?: StringWithAggregatesFilter<"saveBanned"> | string
  }

  export type UserCreateInput = {
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    stat?: StatCreateNestedOneWithoutUserInput
    achievments?: AchievmentsCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    blockedUser?: BlockedUserCreateNestedManyWithoutUserInput
    freind?: FreindCreateNestedManyWithoutUserInput
    channels?: MemberChannelCreateNestedManyWithoutUserInput
    sentDms?: DmCreateNestedManyWithoutSenderInput
    recvDms?: DmCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateInput = {
    id_user?: number
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    stat?: StatUncheckedCreateNestedOneWithoutUserInput
    achievments?: AchievmentsUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    blockedUser?: BlockedUserUncheckedCreateNestedManyWithoutUserInput
    freind?: FreindUncheckedCreateNestedManyWithoutUserInput
    channels?: MemberChannelUncheckedCreateNestedManyWithoutUserInput
    sentDms?: DmUncheckedCreateNestedManyWithoutSenderInput
    recvDms?: DmUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    stat?: StatUpdateOneWithoutUserNestedInput
    achievments?: AchievmentsUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    blockedUser?: BlockedUserUpdateManyWithoutUserNestedInput
    freind?: FreindUpdateManyWithoutUserNestedInput
    channels?: MemberChannelUpdateManyWithoutUserNestedInput
    sentDms?: DmUpdateManyWithoutSenderNestedInput
    recvDms?: DmUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    stat?: StatUncheckedUpdateOneWithoutUserNestedInput
    achievments?: AchievmentsUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    blockedUser?: BlockedUserUncheckedUpdateManyWithoutUserNestedInput
    freind?: FreindUncheckedUpdateManyWithoutUserNestedInput
    channels?: MemberChannelUncheckedUpdateManyWithoutUserNestedInput
    sentDms?: DmUncheckedUpdateManyWithoutSenderNestedInput
    recvDms?: DmUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateManyInput = {
    id_user?: number
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUncheckedUpdateManyInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AchievmentsCreateInput = {
    achieve?: string | null
    msg?: string | null
    user: UserCreateNestedOneWithoutAchievmentsInput
  }

  export type AchievmentsUncheckedCreateInput = {
    id?: number
    achieve?: string | null
    msg?: string | null
    userId: number
  }

  export type AchievmentsUpdateInput = {
    achieve?: NullableStringFieldUpdateOperationsInput | string | null
    msg?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAchievmentsNestedInput
  }

  export type AchievmentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    achieve?: NullableStringFieldUpdateOperationsInput | string | null
    msg?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type AchievmentsCreateManyInput = {
    id?: number
    achieve?: string | null
    msg?: string | null
    userId: number
  }

  export type AchievmentsUpdateManyMutationInput = {
    achieve?: NullableStringFieldUpdateOperationsInput | string | null
    msg?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AchievmentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    achieve?: NullableStringFieldUpdateOperationsInput | string | null
    msg?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationCreateInput = {
    AcceptFriend?: boolean | null
    GameInvitation?: boolean | null
    id_user?: number | null
    email?: string | null
    avatar?: string | null
    name?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    userId: number
    AcceptFriend?: boolean | null
    GameInvitation?: boolean | null
    id_user?: number | null
    email?: string | null
    avatar?: string | null
    name?: string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    AcceptFriend?: NullableBoolFieldUpdateOperationsInput | boolean | null
    GameInvitation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    AcceptFriend?: NullableBoolFieldUpdateOperationsInput | boolean | null
    GameInvitation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: number
    userId: number
    AcceptFriend?: boolean | null
    GameInvitation?: boolean | null
    id_user?: number | null
    email?: string | null
    avatar?: string | null
    name?: string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    AcceptFriend?: NullableBoolFieldUpdateOperationsInput | boolean | null
    GameInvitation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    AcceptFriend?: NullableBoolFieldUpdateOperationsInput | boolean | null
    GameInvitation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatCreateInput = {
    result: string
    level: number
    achievment: string
    user: UserCreateNestedOneWithoutStatInput
  }

  export type StatUncheckedCreateInput = {
    id_stat?: number
    result: string
    level: number
    achievment: string
    userId: number
  }

  export type StatUpdateInput = {
    result?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    achievment?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutStatNestedInput
  }

  export type StatUncheckedUpdateInput = {
    id_stat?: IntFieldUpdateOperationsInput | number
    result?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    achievment?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type StatCreateManyInput = {
    id_stat?: number
    result: string
    level: number
    achievment: string
    userId: number
  }

  export type StatUpdateManyMutationInput = {
    result?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    achievment?: StringFieldUpdateOperationsInput | string
  }

  export type StatUncheckedUpdateManyInput = {
    id_stat?: IntFieldUpdateOperationsInput | number
    result?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    achievment?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type HistoryCreateInput = {
    winner?: boolean | null
    useravatar?: string | null
    username?: string | null
    userscore?: number | null
    enemyId?: number | null
    enemyname?: string | null
    enemyavatar?: string | null
    enemyscore?: number | null
    user: UserCreateNestedOneWithoutHistoryInput
  }

  export type HistoryUncheckedCreateInput = {
    winner?: boolean | null
    id_history?: number
    useravatar?: string | null
    username?: string | null
    userId: number
    userscore?: number | null
    enemyId?: number | null
    enemyname?: string | null
    enemyavatar?: string | null
    enemyscore?: number | null
  }

  export type HistoryUpdateInput = {
    winner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    useravatar?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    userscore?: NullableIntFieldUpdateOperationsInput | number | null
    enemyId?: NullableIntFieldUpdateOperationsInput | number | null
    enemyname?: NullableStringFieldUpdateOperationsInput | string | null
    enemyavatar?: NullableStringFieldUpdateOperationsInput | string | null
    enemyscore?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type HistoryUncheckedUpdateInput = {
    winner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    id_history?: IntFieldUpdateOperationsInput | number
    useravatar?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    userscore?: NullableIntFieldUpdateOperationsInput | number | null
    enemyId?: NullableIntFieldUpdateOperationsInput | number | null
    enemyname?: NullableStringFieldUpdateOperationsInput | string | null
    enemyavatar?: NullableStringFieldUpdateOperationsInput | string | null
    enemyscore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type HistoryCreateManyInput = {
    winner?: boolean | null
    id_history?: number
    useravatar?: string | null
    username?: string | null
    userId: number
    userscore?: number | null
    enemyId?: number | null
    enemyname?: string | null
    enemyavatar?: string | null
    enemyscore?: number | null
  }

  export type HistoryUpdateManyMutationInput = {
    winner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    useravatar?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    userscore?: NullableIntFieldUpdateOperationsInput | number | null
    enemyId?: NullableIntFieldUpdateOperationsInput | number | null
    enemyname?: NullableStringFieldUpdateOperationsInput | string | null
    enemyavatar?: NullableStringFieldUpdateOperationsInput | string | null
    enemyscore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type HistoryUncheckedUpdateManyInput = {
    winner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    id_history?: IntFieldUpdateOperationsInput | number
    useravatar?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    userscore?: NullableIntFieldUpdateOperationsInput | number | null
    enemyId?: NullableIntFieldUpdateOperationsInput | number | null
    enemyname?: NullableStringFieldUpdateOperationsInput | string | null
    enemyavatar?: NullableStringFieldUpdateOperationsInput | string | null
    enemyscore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BlockedUserCreateInput = {
    id_blocked_user: number
    user: UserCreateNestedOneWithoutBlockedUserInput
  }

  export type BlockedUserUncheckedCreateInput = {
    id?: number
    userId: number
    id_blocked_user: number
  }

  export type BlockedUserUpdateInput = {
    id_blocked_user?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutBlockedUserNestedInput
  }

  export type BlockedUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    id_blocked_user?: IntFieldUpdateOperationsInput | number
  }

  export type BlockedUserCreateManyInput = {
    id?: number
    userId: number
    id_blocked_user: number
  }

  export type BlockedUserUpdateManyMutationInput = {
    id_blocked_user?: IntFieldUpdateOperationsInput | number
  }

  export type BlockedUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    id_blocked_user?: IntFieldUpdateOperationsInput | number
  }

  export type FreindCreateInput = {
    name?: string | null
    id_freind?: number | null
    user: UserCreateNestedOneWithoutFreindInput
  }

  export type FreindUncheckedCreateInput = {
    id?: number
    name?: string | null
    userId: number
    id_freind?: number | null
  }

  export type FreindUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    id_freind?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutFreindNestedInput
  }

  export type FreindUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    id_freind?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FreindCreateManyInput = {
    id?: number
    name?: string | null
    userId: number
    id_freind?: number | null
  }

  export type FreindUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    id_freind?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FreindUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    id_freind?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DmCreateInput = {
    unread: number
    pinned: boolean
    sender: UserCreateNestedOneWithoutSentDmsInput
    receiver: UserCreateNestedOneWithoutRecvDmsInput
    conversation?: ConversationCreateNestedManyWithoutDmInput
  }

  export type DmUncheckedCreateInput = {
    id_dm?: number
    senderId: number
    receiverId: number
    unread: number
    pinned: boolean
    conversation?: ConversationUncheckedCreateNestedManyWithoutDmInput
  }

  export type DmUpdateInput = {
    unread?: IntFieldUpdateOperationsInput | number
    pinned?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutSentDmsNestedInput
    receiver?: UserUpdateOneRequiredWithoutRecvDmsNestedInput
    conversation?: ConversationUpdateManyWithoutDmNestedInput
  }

  export type DmUncheckedUpdateInput = {
    id_dm?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    unread?: IntFieldUpdateOperationsInput | number
    pinned?: BoolFieldUpdateOperationsInput | boolean
    conversation?: ConversationUncheckedUpdateManyWithoutDmNestedInput
  }

  export type DmCreateManyInput = {
    id_dm?: number
    senderId: number
    receiverId: number
    unread: number
    pinned: boolean
  }

  export type DmUpdateManyMutationInput = {
    unread?: IntFieldUpdateOperationsInput | number
    pinned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DmUncheckedUpdateManyInput = {
    id_dm?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    unread?: IntFieldUpdateOperationsInput | number
    pinned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConversationCreateInput = {
    text: string
    dateSent?: Date | string
    outgoing: number
    incoming: number
    type: string
    dm: DmCreateNestedOneWithoutConversationInput
  }

  export type ConversationUncheckedCreateInput = {
    id?: number
    text: string
    dateSent?: Date | string
    outgoing: number
    incoming: number
    type: string
    idDm: number
  }

  export type ConversationUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string
    dateSent?: DateTimeFieldUpdateOperationsInput | Date | string
    outgoing?: IntFieldUpdateOperationsInput | number
    incoming?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    dm?: DmUpdateOneRequiredWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    dateSent?: DateTimeFieldUpdateOperationsInput | Date | string
    outgoing?: IntFieldUpdateOperationsInput | number
    incoming?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    idDm?: IntFieldUpdateOperationsInput | number
  }

  export type ConversationCreateManyInput = {
    id?: number
    text: string
    dateSent?: Date | string
    outgoing: number
    incoming: number
    type: string
    idDm: number
  }

  export type ConversationUpdateManyMutationInput = {
    text?: StringFieldUpdateOperationsInput | string
    dateSent?: DateTimeFieldUpdateOperationsInput | Date | string
    outgoing?: IntFieldUpdateOperationsInput | number
    incoming?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type ConversationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    dateSent?: DateTimeFieldUpdateOperationsInput | Date | string
    outgoing?: IntFieldUpdateOperationsInput | number
    incoming?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    idDm?: IntFieldUpdateOperationsInput | number
  }

  export type ChannelCreateInput = {
    name: string
    img?: string | null
    visibility: string
    password?: string | null
    users?: MemberChannelCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateInput = {
    id_channel?: number
    name: string
    img?: string | null
    visibility: string
    password?: string | null
    users?: MemberChannelUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    users?: MemberChannelUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateInput = {
    id_channel?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    users?: MemberChannelUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type ChannelCreateManyInput = {
    id_channel?: number
    name: string
    img?: string | null
    visibility: string
    password?: string | null
  }

  export type ChannelUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChannelUncheckedUpdateManyInput = {
    id_channel?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MemberChannelCreateInput = {
    status_UserInChannel: string
    muted?: boolean | null
    period?: Date | string | null
    user: UserCreateNestedOneWithoutChannelsInput
    channel: ChannelCreateNestedOneWithoutUsersInput
    discussions?: DiscussionCreateNestedManyWithoutMemberchannelInput
    banned?: ChannelBanCreateNestedOneWithoutBannedUserInput
  }

  export type MemberChannelUncheckedCreateInput = {
    userId: number
    channelId: number
    status_UserInChannel: string
    muted?: boolean | null
    period?: Date | string | null
    discussions?: DiscussionUncheckedCreateNestedManyWithoutMemberchannelInput
    banned?: ChannelBanUncheckedCreateNestedOneWithoutBannedUserInput
  }

  export type MemberChannelUpdateInput = {
    status_UserInChannel?: StringFieldUpdateOperationsInput | string
    muted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutChannelsNestedInput
    channel?: ChannelUpdateOneRequiredWithoutUsersNestedInput
    discussions?: DiscussionUpdateManyWithoutMemberchannelNestedInput
    banned?: ChannelBanUpdateOneWithoutBannedUserNestedInput
  }

  export type MemberChannelUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    status_UserInChannel?: StringFieldUpdateOperationsInput | string
    muted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    discussions?: DiscussionUncheckedUpdateManyWithoutMemberchannelNestedInput
    banned?: ChannelBanUncheckedUpdateOneWithoutBannedUserNestedInput
  }

  export type MemberChannelCreateManyInput = {
    userId: number
    channelId: number
    status_UserInChannel: string
    muted?: boolean | null
    period?: Date | string | null
  }

  export type MemberChannelUpdateManyMutationInput = {
    status_UserInChannel?: StringFieldUpdateOperationsInput | string
    muted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MemberChannelUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    status_UserInChannel?: StringFieldUpdateOperationsInput | string
    muted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DiscussionCreateInput = {
    message: string
    dateSent?: Date | string
    memberchannel: MemberChannelCreateNestedOneWithoutDiscussionsInput
  }

  export type DiscussionUncheckedCreateInput = {
    id_disc?: number
    message: string
    dateSent?: Date | string
    userId: number
    channelId: number
  }

  export type DiscussionUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    dateSent?: DateTimeFieldUpdateOperationsInput | Date | string
    memberchannel?: MemberChannelUpdateOneRequiredWithoutDiscussionsNestedInput
  }

  export type DiscussionUncheckedUpdateInput = {
    id_disc?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    dateSent?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
  }

  export type DiscussionCreateManyInput = {
    id_disc?: number
    message: string
    dateSent?: Date | string
    userId: number
    channelId: number
  }

  export type DiscussionUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    dateSent?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionUncheckedUpdateManyInput = {
    id_disc?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    dateSent?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
  }

  export type ChannelBanCreateInput = {
    status_User: string
    bannedUser: MemberChannelCreateNestedOneWithoutBannedInput
  }

  export type ChannelBanUncheckedCreateInput = {
    bannedUserId: number
    channelId: number
    status_User: string
  }

  export type ChannelBanUpdateInput = {
    status_User?: StringFieldUpdateOperationsInput | string
    bannedUser?: MemberChannelUpdateOneRequiredWithoutBannedNestedInput
  }

  export type ChannelBanUncheckedUpdateInput = {
    bannedUserId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    status_User?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelBanCreateManyInput = {
    bannedUserId: number
    channelId: number
    status_User: string
  }

  export type ChannelBanUpdateManyMutationInput = {
    status_User?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelBanUncheckedUpdateManyInput = {
    bannedUserId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    status_User?: StringFieldUpdateOperationsInput | string
  }

  export type saveBannedCreateInput = {
    bannedUserId: number
    channelId: number
    status_User: string
  }

  export type saveBannedUncheckedCreateInput = {
    id?: number
    bannedUserId: number
    channelId: number
    status_User: string
  }

  export type saveBannedUpdateInput = {
    bannedUserId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    status_User?: StringFieldUpdateOperationsInput | string
  }

  export type saveBannedUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bannedUserId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    status_User?: StringFieldUpdateOperationsInput | string
  }

  export type saveBannedCreateManyInput = {
    id?: number
    bannedUserId: number
    channelId: number
    status_User: string
  }

  export type saveBannedUpdateManyMutationInput = {
    bannedUserId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    status_User?: StringFieldUpdateOperationsInput | string
  }

  export type saveBannedUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bannedUserId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    status_User?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StatNullableRelationFilter = {
    is?: StatWhereInput | null
    isNot?: StatWhereInput | null
  }

  export type AchievmentsListRelationFilter = {
    every?: AchievmentsWhereInput
    some?: AchievmentsWhereInput
    none?: AchievmentsWhereInput
  }

  export type HistoryListRelationFilter = {
    every?: HistoryWhereInput
    some?: HistoryWhereInput
    none?: HistoryWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type BlockedUserListRelationFilter = {
    every?: BlockedUserWhereInput
    some?: BlockedUserWhereInput
    none?: BlockedUserWhereInput
  }

  export type FreindListRelationFilter = {
    every?: FreindWhereInput
    some?: FreindWhereInput
    none?: FreindWhereInput
  }

  export type MemberChannelListRelationFilter = {
    every?: MemberChannelWhereInput
    some?: MemberChannelWhereInput
    none?: MemberChannelWhereInput
  }

  export type DmListRelationFilter = {
    every?: DmWhereInput
    some?: DmWhereInput
    none?: DmWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AchievmentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BlockedUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FreindOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MemberChannelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DmOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id_user?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    TwoFactor?: SortOrder
    ISVERIDIED?: SortOrder
    IsFirstTime?: SortOrder
    InGame?: SortOrder
    secretKey?: SortOrder
    About?: SortOrder
    status_user?: SortOrder
    email?: SortOrder
    WonBot?: SortOrder
    LoseBot?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    games_played?: SortOrder
    Progress?: SortOrder
    Wins_percent?: SortOrder
    Losses_percent?: SortOrder
    homies?: SortOrder
    invited?: SortOrder
    homie_id?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id_user?: SortOrder
    WonBot?: SortOrder
    LoseBot?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    games_played?: SortOrder
    Progress?: SortOrder
    Wins_percent?: SortOrder
    Losses_percent?: SortOrder
    homie_id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id_user?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    TwoFactor?: SortOrder
    ISVERIDIED?: SortOrder
    IsFirstTime?: SortOrder
    InGame?: SortOrder
    secretKey?: SortOrder
    About?: SortOrder
    status_user?: SortOrder
    email?: SortOrder
    WonBot?: SortOrder
    LoseBot?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    games_played?: SortOrder
    Progress?: SortOrder
    Wins_percent?: SortOrder
    Losses_percent?: SortOrder
    homies?: SortOrder
    invited?: SortOrder
    homie_id?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id_user?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    TwoFactor?: SortOrder
    ISVERIDIED?: SortOrder
    IsFirstTime?: SortOrder
    InGame?: SortOrder
    secretKey?: SortOrder
    About?: SortOrder
    status_user?: SortOrder
    email?: SortOrder
    WonBot?: SortOrder
    LoseBot?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    games_played?: SortOrder
    Progress?: SortOrder
    Wins_percent?: SortOrder
    Losses_percent?: SortOrder
    homies?: SortOrder
    invited?: SortOrder
    homie_id?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id_user?: SortOrder
    WonBot?: SortOrder
    LoseBot?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    games_played?: SortOrder
    Progress?: SortOrder
    Wins_percent?: SortOrder
    Losses_percent?: SortOrder
    homie_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AchievmentsCountOrderByAggregateInput = {
    id?: SortOrder
    achieve?: SortOrder
    msg?: SortOrder
    userId?: SortOrder
  }

  export type AchievmentsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AchievmentsMaxOrderByAggregateInput = {
    id?: SortOrder
    achieve?: SortOrder
    msg?: SortOrder
    userId?: SortOrder
  }

  export type AchievmentsMinOrderByAggregateInput = {
    id?: SortOrder
    achieve?: SortOrder
    msg?: SortOrder
    userId?: SortOrder
  }

  export type AchievmentsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    AcceptFriend?: SortOrder
    GameInvitation?: SortOrder
    id_user?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    id_user?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    AcceptFriend?: SortOrder
    GameInvitation?: SortOrder
    id_user?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    AcceptFriend?: SortOrder
    GameInvitation?: SortOrder
    id_user?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    id_user?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StatCountOrderByAggregateInput = {
    id_stat?: SortOrder
    result?: SortOrder
    level?: SortOrder
    achievment?: SortOrder
    userId?: SortOrder
  }

  export type StatAvgOrderByAggregateInput = {
    id_stat?: SortOrder
    level?: SortOrder
    userId?: SortOrder
  }

  export type StatMaxOrderByAggregateInput = {
    id_stat?: SortOrder
    result?: SortOrder
    level?: SortOrder
    achievment?: SortOrder
    userId?: SortOrder
  }

  export type StatMinOrderByAggregateInput = {
    id_stat?: SortOrder
    result?: SortOrder
    level?: SortOrder
    achievment?: SortOrder
    userId?: SortOrder
  }

  export type StatSumOrderByAggregateInput = {
    id_stat?: SortOrder
    level?: SortOrder
    userId?: SortOrder
  }

  export type HistoryCountOrderByAggregateInput = {
    winner?: SortOrder
    id_history?: SortOrder
    useravatar?: SortOrder
    username?: SortOrder
    userId?: SortOrder
    userscore?: SortOrder
    enemyId?: SortOrder
    enemyname?: SortOrder
    enemyavatar?: SortOrder
    enemyscore?: SortOrder
  }

  export type HistoryAvgOrderByAggregateInput = {
    id_history?: SortOrder
    userId?: SortOrder
    userscore?: SortOrder
    enemyId?: SortOrder
    enemyscore?: SortOrder
  }

  export type HistoryMaxOrderByAggregateInput = {
    winner?: SortOrder
    id_history?: SortOrder
    useravatar?: SortOrder
    username?: SortOrder
    userId?: SortOrder
    userscore?: SortOrder
    enemyId?: SortOrder
    enemyname?: SortOrder
    enemyavatar?: SortOrder
    enemyscore?: SortOrder
  }

  export type HistoryMinOrderByAggregateInput = {
    winner?: SortOrder
    id_history?: SortOrder
    useravatar?: SortOrder
    username?: SortOrder
    userId?: SortOrder
    userscore?: SortOrder
    enemyId?: SortOrder
    enemyname?: SortOrder
    enemyavatar?: SortOrder
    enemyscore?: SortOrder
  }

  export type HistorySumOrderByAggregateInput = {
    id_history?: SortOrder
    userId?: SortOrder
    userscore?: SortOrder
    enemyId?: SortOrder
    enemyscore?: SortOrder
  }

  export type BlockedUserCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    id_blocked_user?: SortOrder
  }

  export type BlockedUserAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    id_blocked_user?: SortOrder
  }

  export type BlockedUserMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    id_blocked_user?: SortOrder
  }

  export type BlockedUserMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    id_blocked_user?: SortOrder
  }

  export type BlockedUserSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    id_blocked_user?: SortOrder
  }

  export type FreindCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    id_freind?: SortOrder
  }

  export type FreindAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    id_freind?: SortOrder
  }

  export type FreindMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    id_freind?: SortOrder
  }

  export type FreindMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    id_freind?: SortOrder
  }

  export type FreindSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    id_freind?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ConversationListRelationFilter = {
    every?: ConversationWhereInput
    some?: ConversationWhereInput
    none?: ConversationWhereInput
  }

  export type ConversationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DmSenderIdReceiverIdCompoundUniqueInput = {
    senderId: number
    receiverId: number
  }

  export type DmCountOrderByAggregateInput = {
    id_dm?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    unread?: SortOrder
    pinned?: SortOrder
  }

  export type DmAvgOrderByAggregateInput = {
    id_dm?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    unread?: SortOrder
  }

  export type DmMaxOrderByAggregateInput = {
    id_dm?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    unread?: SortOrder
    pinned?: SortOrder
  }

  export type DmMinOrderByAggregateInput = {
    id_dm?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    unread?: SortOrder
    pinned?: SortOrder
  }

  export type DmSumOrderByAggregateInput = {
    id_dm?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    unread?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DmRelationFilter = {
    is?: DmWhereInput
    isNot?: DmWhereInput
  }

  export type ConversationCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    dateSent?: SortOrder
    outgoing?: SortOrder
    incoming?: SortOrder
    type?: SortOrder
    idDm?: SortOrder
  }

  export type ConversationAvgOrderByAggregateInput = {
    id?: SortOrder
    outgoing?: SortOrder
    incoming?: SortOrder
    idDm?: SortOrder
  }

  export type ConversationMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    dateSent?: SortOrder
    outgoing?: SortOrder
    incoming?: SortOrder
    type?: SortOrder
    idDm?: SortOrder
  }

  export type ConversationMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    dateSent?: SortOrder
    outgoing?: SortOrder
    incoming?: SortOrder
    type?: SortOrder
    idDm?: SortOrder
  }

  export type ConversationSumOrderByAggregateInput = {
    id?: SortOrder
    outgoing?: SortOrder
    incoming?: SortOrder
    idDm?: SortOrder
  }

  export type ChannelCountOrderByAggregateInput = {
    id_channel?: SortOrder
    name?: SortOrder
    img?: SortOrder
    visibility?: SortOrder
    password?: SortOrder
  }

  export type ChannelAvgOrderByAggregateInput = {
    id_channel?: SortOrder
  }

  export type ChannelMaxOrderByAggregateInput = {
    id_channel?: SortOrder
    name?: SortOrder
    img?: SortOrder
    visibility?: SortOrder
    password?: SortOrder
  }

  export type ChannelMinOrderByAggregateInput = {
    id_channel?: SortOrder
    name?: SortOrder
    img?: SortOrder
    visibility?: SortOrder
    password?: SortOrder
  }

  export type ChannelSumOrderByAggregateInput = {
    id_channel?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ChannelRelationFilter = {
    is?: ChannelWhereInput
    isNot?: ChannelWhereInput
  }

  export type DiscussionListRelationFilter = {
    every?: DiscussionWhereInput
    some?: DiscussionWhereInput
    none?: DiscussionWhereInput
  }

  export type ChannelBanNullableRelationFilter = {
    is?: ChannelBanWhereInput | null
    isNot?: ChannelBanWhereInput | null
  }

  export type DiscussionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MemberChannelUserIdChannelIdCompoundUniqueInput = {
    userId: number
    channelId: number
  }

  export type MemberChannelCountOrderByAggregateInput = {
    userId?: SortOrder
    channelId?: SortOrder
    status_UserInChannel?: SortOrder
    muted?: SortOrder
    period?: SortOrder
  }

  export type MemberChannelAvgOrderByAggregateInput = {
    userId?: SortOrder
    channelId?: SortOrder
  }

  export type MemberChannelMaxOrderByAggregateInput = {
    userId?: SortOrder
    channelId?: SortOrder
    status_UserInChannel?: SortOrder
    muted?: SortOrder
    period?: SortOrder
  }

  export type MemberChannelMinOrderByAggregateInput = {
    userId?: SortOrder
    channelId?: SortOrder
    status_UserInChannel?: SortOrder
    muted?: SortOrder
    period?: SortOrder
  }

  export type MemberChannelSumOrderByAggregateInput = {
    userId?: SortOrder
    channelId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type MemberChannelRelationFilter = {
    is?: MemberChannelWhereInput
    isNot?: MemberChannelWhereInput
  }

  export type DiscussionCountOrderByAggregateInput = {
    id_disc?: SortOrder
    message?: SortOrder
    dateSent?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
  }

  export type DiscussionAvgOrderByAggregateInput = {
    id_disc?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
  }

  export type DiscussionMaxOrderByAggregateInput = {
    id_disc?: SortOrder
    message?: SortOrder
    dateSent?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
  }

  export type DiscussionMinOrderByAggregateInput = {
    id_disc?: SortOrder
    message?: SortOrder
    dateSent?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
  }

  export type DiscussionSumOrderByAggregateInput = {
    id_disc?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
  }

  export type ChannelBanBannedUserIdChannelIdCompoundUniqueInput = {
    bannedUserId: number
    channelId: number
  }

  export type ChannelBanCountOrderByAggregateInput = {
    bannedUserId?: SortOrder
    channelId?: SortOrder
    status_User?: SortOrder
  }

  export type ChannelBanAvgOrderByAggregateInput = {
    bannedUserId?: SortOrder
    channelId?: SortOrder
  }

  export type ChannelBanMaxOrderByAggregateInput = {
    bannedUserId?: SortOrder
    channelId?: SortOrder
    status_User?: SortOrder
  }

  export type ChannelBanMinOrderByAggregateInput = {
    bannedUserId?: SortOrder
    channelId?: SortOrder
    status_User?: SortOrder
  }

  export type ChannelBanSumOrderByAggregateInput = {
    bannedUserId?: SortOrder
    channelId?: SortOrder
  }

  export type saveBannedCountOrderByAggregateInput = {
    id?: SortOrder
    bannedUserId?: SortOrder
    channelId?: SortOrder
    status_User?: SortOrder
  }

  export type saveBannedAvgOrderByAggregateInput = {
    id?: SortOrder
    bannedUserId?: SortOrder
    channelId?: SortOrder
  }

  export type saveBannedMaxOrderByAggregateInput = {
    id?: SortOrder
    bannedUserId?: SortOrder
    channelId?: SortOrder
    status_User?: SortOrder
  }

  export type saveBannedMinOrderByAggregateInput = {
    id?: SortOrder
    bannedUserId?: SortOrder
    channelId?: SortOrder
    status_User?: SortOrder
  }

  export type saveBannedSumOrderByAggregateInput = {
    id?: SortOrder
    bannedUserId?: SortOrder
    channelId?: SortOrder
  }

  export type StatCreateNestedOneWithoutUserInput = {
    create?: XOR<StatCreateWithoutUserInput, StatUncheckedCreateWithoutUserInput>
    connectOrCreate?: StatCreateOrConnectWithoutUserInput
    connect?: StatWhereUniqueInput
  }

  export type AchievmentsCreateNestedManyWithoutUserInput = {
    create?: XOR<AchievmentsCreateWithoutUserInput, AchievmentsUncheckedCreateWithoutUserInput> | AchievmentsCreateWithoutUserInput[] | AchievmentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AchievmentsCreateOrConnectWithoutUserInput | AchievmentsCreateOrConnectWithoutUserInput[]
    createMany?: AchievmentsCreateManyUserInputEnvelope
    connect?: AchievmentsWhereUniqueInput | AchievmentsWhereUniqueInput[]
  }

  export type HistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput> | HistoryCreateWithoutUserInput[] | HistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutUserInput | HistoryCreateOrConnectWithoutUserInput[]
    createMany?: HistoryCreateManyUserInputEnvelope
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type BlockedUserCreateNestedManyWithoutUserInput = {
    create?: XOR<BlockedUserCreateWithoutUserInput, BlockedUserUncheckedCreateWithoutUserInput> | BlockedUserCreateWithoutUserInput[] | BlockedUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BlockedUserCreateOrConnectWithoutUserInput | BlockedUserCreateOrConnectWithoutUserInput[]
    createMany?: BlockedUserCreateManyUserInputEnvelope
    connect?: BlockedUserWhereUniqueInput | BlockedUserWhereUniqueInput[]
  }

  export type FreindCreateNestedManyWithoutUserInput = {
    create?: XOR<FreindCreateWithoutUserInput, FreindUncheckedCreateWithoutUserInput> | FreindCreateWithoutUserInput[] | FreindUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FreindCreateOrConnectWithoutUserInput | FreindCreateOrConnectWithoutUserInput[]
    createMany?: FreindCreateManyUserInputEnvelope
    connect?: FreindWhereUniqueInput | FreindWhereUniqueInput[]
  }

  export type MemberChannelCreateNestedManyWithoutUserInput = {
    create?: XOR<MemberChannelCreateWithoutUserInput, MemberChannelUncheckedCreateWithoutUserInput> | MemberChannelCreateWithoutUserInput[] | MemberChannelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemberChannelCreateOrConnectWithoutUserInput | MemberChannelCreateOrConnectWithoutUserInput[]
    createMany?: MemberChannelCreateManyUserInputEnvelope
    connect?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
  }

  export type DmCreateNestedManyWithoutSenderInput = {
    create?: XOR<DmCreateWithoutSenderInput, DmUncheckedCreateWithoutSenderInput> | DmCreateWithoutSenderInput[] | DmUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: DmCreateOrConnectWithoutSenderInput | DmCreateOrConnectWithoutSenderInput[]
    createMany?: DmCreateManySenderInputEnvelope
    connect?: DmWhereUniqueInput | DmWhereUniqueInput[]
  }

  export type DmCreateNestedManyWithoutReceiverInput = {
    create?: XOR<DmCreateWithoutReceiverInput, DmUncheckedCreateWithoutReceiverInput> | DmCreateWithoutReceiverInput[] | DmUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: DmCreateOrConnectWithoutReceiverInput | DmCreateOrConnectWithoutReceiverInput[]
    createMany?: DmCreateManyReceiverInputEnvelope
    connect?: DmWhereUniqueInput | DmWhereUniqueInput[]
  }

  export type StatUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StatCreateWithoutUserInput, StatUncheckedCreateWithoutUserInput>
    connectOrCreate?: StatCreateOrConnectWithoutUserInput
    connect?: StatWhereUniqueInput
  }

  export type AchievmentsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AchievmentsCreateWithoutUserInput, AchievmentsUncheckedCreateWithoutUserInput> | AchievmentsCreateWithoutUserInput[] | AchievmentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AchievmentsCreateOrConnectWithoutUserInput | AchievmentsCreateOrConnectWithoutUserInput[]
    createMany?: AchievmentsCreateManyUserInputEnvelope
    connect?: AchievmentsWhereUniqueInput | AchievmentsWhereUniqueInput[]
  }

  export type HistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput> | HistoryCreateWithoutUserInput[] | HistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutUserInput | HistoryCreateOrConnectWithoutUserInput[]
    createMany?: HistoryCreateManyUserInputEnvelope
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type BlockedUserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BlockedUserCreateWithoutUserInput, BlockedUserUncheckedCreateWithoutUserInput> | BlockedUserCreateWithoutUserInput[] | BlockedUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BlockedUserCreateOrConnectWithoutUserInput | BlockedUserCreateOrConnectWithoutUserInput[]
    createMany?: BlockedUserCreateManyUserInputEnvelope
    connect?: BlockedUserWhereUniqueInput | BlockedUserWhereUniqueInput[]
  }

  export type FreindUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FreindCreateWithoutUserInput, FreindUncheckedCreateWithoutUserInput> | FreindCreateWithoutUserInput[] | FreindUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FreindCreateOrConnectWithoutUserInput | FreindCreateOrConnectWithoutUserInput[]
    createMany?: FreindCreateManyUserInputEnvelope
    connect?: FreindWhereUniqueInput | FreindWhereUniqueInput[]
  }

  export type MemberChannelUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MemberChannelCreateWithoutUserInput, MemberChannelUncheckedCreateWithoutUserInput> | MemberChannelCreateWithoutUserInput[] | MemberChannelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemberChannelCreateOrConnectWithoutUserInput | MemberChannelCreateOrConnectWithoutUserInput[]
    createMany?: MemberChannelCreateManyUserInputEnvelope
    connect?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
  }

  export type DmUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<DmCreateWithoutSenderInput, DmUncheckedCreateWithoutSenderInput> | DmCreateWithoutSenderInput[] | DmUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: DmCreateOrConnectWithoutSenderInput | DmCreateOrConnectWithoutSenderInput[]
    createMany?: DmCreateManySenderInputEnvelope
    connect?: DmWhereUniqueInput | DmWhereUniqueInput[]
  }

  export type DmUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<DmCreateWithoutReceiverInput, DmUncheckedCreateWithoutReceiverInput> | DmCreateWithoutReceiverInput[] | DmUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: DmCreateOrConnectWithoutReceiverInput | DmCreateOrConnectWithoutReceiverInput[]
    createMany?: DmCreateManyReceiverInputEnvelope
    connect?: DmWhereUniqueInput | DmWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StatUpdateOneWithoutUserNestedInput = {
    create?: XOR<StatCreateWithoutUserInput, StatUncheckedCreateWithoutUserInput>
    connectOrCreate?: StatCreateOrConnectWithoutUserInput
    upsert?: StatUpsertWithoutUserInput
    disconnect?: StatWhereInput | boolean
    delete?: StatWhereInput | boolean
    connect?: StatWhereUniqueInput
    update?: XOR<XOR<StatUpdateToOneWithWhereWithoutUserInput, StatUpdateWithoutUserInput>, StatUncheckedUpdateWithoutUserInput>
  }

  export type AchievmentsUpdateManyWithoutUserNestedInput = {
    create?: XOR<AchievmentsCreateWithoutUserInput, AchievmentsUncheckedCreateWithoutUserInput> | AchievmentsCreateWithoutUserInput[] | AchievmentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AchievmentsCreateOrConnectWithoutUserInput | AchievmentsCreateOrConnectWithoutUserInput[]
    upsert?: AchievmentsUpsertWithWhereUniqueWithoutUserInput | AchievmentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AchievmentsCreateManyUserInputEnvelope
    set?: AchievmentsWhereUniqueInput | AchievmentsWhereUniqueInput[]
    disconnect?: AchievmentsWhereUniqueInput | AchievmentsWhereUniqueInput[]
    delete?: AchievmentsWhereUniqueInput | AchievmentsWhereUniqueInput[]
    connect?: AchievmentsWhereUniqueInput | AchievmentsWhereUniqueInput[]
    update?: AchievmentsUpdateWithWhereUniqueWithoutUserInput | AchievmentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AchievmentsUpdateManyWithWhereWithoutUserInput | AchievmentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AchievmentsScalarWhereInput | AchievmentsScalarWhereInput[]
  }

  export type HistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput> | HistoryCreateWithoutUserInput[] | HistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutUserInput | HistoryCreateOrConnectWithoutUserInput[]
    upsert?: HistoryUpsertWithWhereUniqueWithoutUserInput | HistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HistoryCreateManyUserInputEnvelope
    set?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    disconnect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    delete?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    update?: HistoryUpdateWithWhereUniqueWithoutUserInput | HistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HistoryUpdateManyWithWhereWithoutUserInput | HistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type BlockedUserUpdateManyWithoutUserNestedInput = {
    create?: XOR<BlockedUserCreateWithoutUserInput, BlockedUserUncheckedCreateWithoutUserInput> | BlockedUserCreateWithoutUserInput[] | BlockedUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BlockedUserCreateOrConnectWithoutUserInput | BlockedUserCreateOrConnectWithoutUserInput[]
    upsert?: BlockedUserUpsertWithWhereUniqueWithoutUserInput | BlockedUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BlockedUserCreateManyUserInputEnvelope
    set?: BlockedUserWhereUniqueInput | BlockedUserWhereUniqueInput[]
    disconnect?: BlockedUserWhereUniqueInput | BlockedUserWhereUniqueInput[]
    delete?: BlockedUserWhereUniqueInput | BlockedUserWhereUniqueInput[]
    connect?: BlockedUserWhereUniqueInput | BlockedUserWhereUniqueInput[]
    update?: BlockedUserUpdateWithWhereUniqueWithoutUserInput | BlockedUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BlockedUserUpdateManyWithWhereWithoutUserInput | BlockedUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BlockedUserScalarWhereInput | BlockedUserScalarWhereInput[]
  }

  export type FreindUpdateManyWithoutUserNestedInput = {
    create?: XOR<FreindCreateWithoutUserInput, FreindUncheckedCreateWithoutUserInput> | FreindCreateWithoutUserInput[] | FreindUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FreindCreateOrConnectWithoutUserInput | FreindCreateOrConnectWithoutUserInput[]
    upsert?: FreindUpsertWithWhereUniqueWithoutUserInput | FreindUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FreindCreateManyUserInputEnvelope
    set?: FreindWhereUniqueInput | FreindWhereUniqueInput[]
    disconnect?: FreindWhereUniqueInput | FreindWhereUniqueInput[]
    delete?: FreindWhereUniqueInput | FreindWhereUniqueInput[]
    connect?: FreindWhereUniqueInput | FreindWhereUniqueInput[]
    update?: FreindUpdateWithWhereUniqueWithoutUserInput | FreindUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FreindUpdateManyWithWhereWithoutUserInput | FreindUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FreindScalarWhereInput | FreindScalarWhereInput[]
  }

  export type MemberChannelUpdateManyWithoutUserNestedInput = {
    create?: XOR<MemberChannelCreateWithoutUserInput, MemberChannelUncheckedCreateWithoutUserInput> | MemberChannelCreateWithoutUserInput[] | MemberChannelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemberChannelCreateOrConnectWithoutUserInput | MemberChannelCreateOrConnectWithoutUserInput[]
    upsert?: MemberChannelUpsertWithWhereUniqueWithoutUserInput | MemberChannelUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MemberChannelCreateManyUserInputEnvelope
    set?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
    disconnect?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
    delete?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
    connect?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
    update?: MemberChannelUpdateWithWhereUniqueWithoutUserInput | MemberChannelUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MemberChannelUpdateManyWithWhereWithoutUserInput | MemberChannelUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MemberChannelScalarWhereInput | MemberChannelScalarWhereInput[]
  }

  export type DmUpdateManyWithoutSenderNestedInput = {
    create?: XOR<DmCreateWithoutSenderInput, DmUncheckedCreateWithoutSenderInput> | DmCreateWithoutSenderInput[] | DmUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: DmCreateOrConnectWithoutSenderInput | DmCreateOrConnectWithoutSenderInput[]
    upsert?: DmUpsertWithWhereUniqueWithoutSenderInput | DmUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: DmCreateManySenderInputEnvelope
    set?: DmWhereUniqueInput | DmWhereUniqueInput[]
    disconnect?: DmWhereUniqueInput | DmWhereUniqueInput[]
    delete?: DmWhereUniqueInput | DmWhereUniqueInput[]
    connect?: DmWhereUniqueInput | DmWhereUniqueInput[]
    update?: DmUpdateWithWhereUniqueWithoutSenderInput | DmUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: DmUpdateManyWithWhereWithoutSenderInput | DmUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: DmScalarWhereInput | DmScalarWhereInput[]
  }

  export type DmUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<DmCreateWithoutReceiverInput, DmUncheckedCreateWithoutReceiverInput> | DmCreateWithoutReceiverInput[] | DmUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: DmCreateOrConnectWithoutReceiverInput | DmCreateOrConnectWithoutReceiverInput[]
    upsert?: DmUpsertWithWhereUniqueWithoutReceiverInput | DmUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: DmCreateManyReceiverInputEnvelope
    set?: DmWhereUniqueInput | DmWhereUniqueInput[]
    disconnect?: DmWhereUniqueInput | DmWhereUniqueInput[]
    delete?: DmWhereUniqueInput | DmWhereUniqueInput[]
    connect?: DmWhereUniqueInput | DmWhereUniqueInput[]
    update?: DmUpdateWithWhereUniqueWithoutReceiverInput | DmUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: DmUpdateManyWithWhereWithoutReceiverInput | DmUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: DmScalarWhereInput | DmScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StatUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StatCreateWithoutUserInput, StatUncheckedCreateWithoutUserInput>
    connectOrCreate?: StatCreateOrConnectWithoutUserInput
    upsert?: StatUpsertWithoutUserInput
    disconnect?: StatWhereInput | boolean
    delete?: StatWhereInput | boolean
    connect?: StatWhereUniqueInput
    update?: XOR<XOR<StatUpdateToOneWithWhereWithoutUserInput, StatUpdateWithoutUserInput>, StatUncheckedUpdateWithoutUserInput>
  }

  export type AchievmentsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AchievmentsCreateWithoutUserInput, AchievmentsUncheckedCreateWithoutUserInput> | AchievmentsCreateWithoutUserInput[] | AchievmentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AchievmentsCreateOrConnectWithoutUserInput | AchievmentsCreateOrConnectWithoutUserInput[]
    upsert?: AchievmentsUpsertWithWhereUniqueWithoutUserInput | AchievmentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AchievmentsCreateManyUserInputEnvelope
    set?: AchievmentsWhereUniqueInput | AchievmentsWhereUniqueInput[]
    disconnect?: AchievmentsWhereUniqueInput | AchievmentsWhereUniqueInput[]
    delete?: AchievmentsWhereUniqueInput | AchievmentsWhereUniqueInput[]
    connect?: AchievmentsWhereUniqueInput | AchievmentsWhereUniqueInput[]
    update?: AchievmentsUpdateWithWhereUniqueWithoutUserInput | AchievmentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AchievmentsUpdateManyWithWhereWithoutUserInput | AchievmentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AchievmentsScalarWhereInput | AchievmentsScalarWhereInput[]
  }

  export type HistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput> | HistoryCreateWithoutUserInput[] | HistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutUserInput | HistoryCreateOrConnectWithoutUserInput[]
    upsert?: HistoryUpsertWithWhereUniqueWithoutUserInput | HistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HistoryCreateManyUserInputEnvelope
    set?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    disconnect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    delete?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    update?: HistoryUpdateWithWhereUniqueWithoutUserInput | HistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HistoryUpdateManyWithWhereWithoutUserInput | HistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type BlockedUserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BlockedUserCreateWithoutUserInput, BlockedUserUncheckedCreateWithoutUserInput> | BlockedUserCreateWithoutUserInput[] | BlockedUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BlockedUserCreateOrConnectWithoutUserInput | BlockedUserCreateOrConnectWithoutUserInput[]
    upsert?: BlockedUserUpsertWithWhereUniqueWithoutUserInput | BlockedUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BlockedUserCreateManyUserInputEnvelope
    set?: BlockedUserWhereUniqueInput | BlockedUserWhereUniqueInput[]
    disconnect?: BlockedUserWhereUniqueInput | BlockedUserWhereUniqueInput[]
    delete?: BlockedUserWhereUniqueInput | BlockedUserWhereUniqueInput[]
    connect?: BlockedUserWhereUniqueInput | BlockedUserWhereUniqueInput[]
    update?: BlockedUserUpdateWithWhereUniqueWithoutUserInput | BlockedUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BlockedUserUpdateManyWithWhereWithoutUserInput | BlockedUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BlockedUserScalarWhereInput | BlockedUserScalarWhereInput[]
  }

  export type FreindUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FreindCreateWithoutUserInput, FreindUncheckedCreateWithoutUserInput> | FreindCreateWithoutUserInput[] | FreindUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FreindCreateOrConnectWithoutUserInput | FreindCreateOrConnectWithoutUserInput[]
    upsert?: FreindUpsertWithWhereUniqueWithoutUserInput | FreindUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FreindCreateManyUserInputEnvelope
    set?: FreindWhereUniqueInput | FreindWhereUniqueInput[]
    disconnect?: FreindWhereUniqueInput | FreindWhereUniqueInput[]
    delete?: FreindWhereUniqueInput | FreindWhereUniqueInput[]
    connect?: FreindWhereUniqueInput | FreindWhereUniqueInput[]
    update?: FreindUpdateWithWhereUniqueWithoutUserInput | FreindUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FreindUpdateManyWithWhereWithoutUserInput | FreindUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FreindScalarWhereInput | FreindScalarWhereInput[]
  }

  export type MemberChannelUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MemberChannelCreateWithoutUserInput, MemberChannelUncheckedCreateWithoutUserInput> | MemberChannelCreateWithoutUserInput[] | MemberChannelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemberChannelCreateOrConnectWithoutUserInput | MemberChannelCreateOrConnectWithoutUserInput[]
    upsert?: MemberChannelUpsertWithWhereUniqueWithoutUserInput | MemberChannelUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MemberChannelCreateManyUserInputEnvelope
    set?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
    disconnect?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
    delete?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
    connect?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
    update?: MemberChannelUpdateWithWhereUniqueWithoutUserInput | MemberChannelUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MemberChannelUpdateManyWithWhereWithoutUserInput | MemberChannelUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MemberChannelScalarWhereInput | MemberChannelScalarWhereInput[]
  }

  export type DmUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<DmCreateWithoutSenderInput, DmUncheckedCreateWithoutSenderInput> | DmCreateWithoutSenderInput[] | DmUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: DmCreateOrConnectWithoutSenderInput | DmCreateOrConnectWithoutSenderInput[]
    upsert?: DmUpsertWithWhereUniqueWithoutSenderInput | DmUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: DmCreateManySenderInputEnvelope
    set?: DmWhereUniqueInput | DmWhereUniqueInput[]
    disconnect?: DmWhereUniqueInput | DmWhereUniqueInput[]
    delete?: DmWhereUniqueInput | DmWhereUniqueInput[]
    connect?: DmWhereUniqueInput | DmWhereUniqueInput[]
    update?: DmUpdateWithWhereUniqueWithoutSenderInput | DmUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: DmUpdateManyWithWhereWithoutSenderInput | DmUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: DmScalarWhereInput | DmScalarWhereInput[]
  }

  export type DmUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<DmCreateWithoutReceiverInput, DmUncheckedCreateWithoutReceiverInput> | DmCreateWithoutReceiverInput[] | DmUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: DmCreateOrConnectWithoutReceiverInput | DmCreateOrConnectWithoutReceiverInput[]
    upsert?: DmUpsertWithWhereUniqueWithoutReceiverInput | DmUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: DmCreateManyReceiverInputEnvelope
    set?: DmWhereUniqueInput | DmWhereUniqueInput[]
    disconnect?: DmWhereUniqueInput | DmWhereUniqueInput[]
    delete?: DmWhereUniqueInput | DmWhereUniqueInput[]
    connect?: DmWhereUniqueInput | DmWhereUniqueInput[]
    update?: DmUpdateWithWhereUniqueWithoutReceiverInput | DmUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: DmUpdateManyWithWhereWithoutReceiverInput | DmUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: DmScalarWhereInput | DmScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAchievmentsInput = {
    create?: XOR<UserCreateWithoutAchievmentsInput, UserUncheckedCreateWithoutAchievmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAchievmentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAchievmentsNestedInput = {
    create?: XOR<UserCreateWithoutAchievmentsInput, UserUncheckedCreateWithoutAchievmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAchievmentsInput
    upsert?: UserUpsertWithoutAchievmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAchievmentsInput, UserUpdateWithoutAchievmentsInput>, UserUncheckedUpdateWithoutAchievmentsInput>
  }

  export type UserCreateNestedOneWithoutNotificationInput = {
    create?: XOR<UserCreateWithoutNotificationInput, UserUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutNotificationNestedInput = {
    create?: XOR<UserCreateWithoutNotificationInput, UserUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationInput
    upsert?: UserUpsertWithoutNotificationInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationInput, UserUpdateWithoutNotificationInput>, UserUncheckedUpdateWithoutNotificationInput>
  }

  export type UserCreateNestedOneWithoutStatInput = {
    create?: XOR<UserCreateWithoutStatInput, UserUncheckedCreateWithoutStatInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutStatNestedInput = {
    create?: XOR<UserCreateWithoutStatInput, UserUncheckedCreateWithoutStatInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatInput
    upsert?: UserUpsertWithoutStatInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStatInput, UserUpdateWithoutStatInput>, UserUncheckedUpdateWithoutStatInput>
  }

  export type UserCreateNestedOneWithoutHistoryInput = {
    create?: XOR<UserCreateWithoutHistoryInput, UserUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<UserCreateWithoutHistoryInput, UserUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutHistoryInput
    upsert?: UserUpsertWithoutHistoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHistoryInput, UserUpdateWithoutHistoryInput>, UserUncheckedUpdateWithoutHistoryInput>
  }

  export type UserCreateNestedOneWithoutBlockedUserInput = {
    create?: XOR<UserCreateWithoutBlockedUserInput, UserUncheckedCreateWithoutBlockedUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutBlockedUserInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBlockedUserNestedInput = {
    create?: XOR<UserCreateWithoutBlockedUserInput, UserUncheckedCreateWithoutBlockedUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutBlockedUserInput
    upsert?: UserUpsertWithoutBlockedUserInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBlockedUserInput, UserUpdateWithoutBlockedUserInput>, UserUncheckedUpdateWithoutBlockedUserInput>
  }

  export type UserCreateNestedOneWithoutFreindInput = {
    create?: XOR<UserCreateWithoutFreindInput, UserUncheckedCreateWithoutFreindInput>
    connectOrCreate?: UserCreateOrConnectWithoutFreindInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFreindNestedInput = {
    create?: XOR<UserCreateWithoutFreindInput, UserUncheckedCreateWithoutFreindInput>
    connectOrCreate?: UserCreateOrConnectWithoutFreindInput
    upsert?: UserUpsertWithoutFreindInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFreindInput, UserUpdateWithoutFreindInput>, UserUncheckedUpdateWithoutFreindInput>
  }

  export type UserCreateNestedOneWithoutSentDmsInput = {
    create?: XOR<UserCreateWithoutSentDmsInput, UserUncheckedCreateWithoutSentDmsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentDmsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRecvDmsInput = {
    create?: XOR<UserCreateWithoutRecvDmsInput, UserUncheckedCreateWithoutRecvDmsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecvDmsInput
    connect?: UserWhereUniqueInput
  }

  export type ConversationCreateNestedManyWithoutDmInput = {
    create?: XOR<ConversationCreateWithoutDmInput, ConversationUncheckedCreateWithoutDmInput> | ConversationCreateWithoutDmInput[] | ConversationUncheckedCreateWithoutDmInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutDmInput | ConversationCreateOrConnectWithoutDmInput[]
    createMany?: ConversationCreateManyDmInputEnvelope
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type ConversationUncheckedCreateNestedManyWithoutDmInput = {
    create?: XOR<ConversationCreateWithoutDmInput, ConversationUncheckedCreateWithoutDmInput> | ConversationCreateWithoutDmInput[] | ConversationUncheckedCreateWithoutDmInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutDmInput | ConversationCreateOrConnectWithoutDmInput[]
    createMany?: ConversationCreateManyDmInputEnvelope
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutSentDmsNestedInput = {
    create?: XOR<UserCreateWithoutSentDmsInput, UserUncheckedCreateWithoutSentDmsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentDmsInput
    upsert?: UserUpsertWithoutSentDmsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentDmsInput, UserUpdateWithoutSentDmsInput>, UserUncheckedUpdateWithoutSentDmsInput>
  }

  export type UserUpdateOneRequiredWithoutRecvDmsNestedInput = {
    create?: XOR<UserCreateWithoutRecvDmsInput, UserUncheckedCreateWithoutRecvDmsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecvDmsInput
    upsert?: UserUpsertWithoutRecvDmsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRecvDmsInput, UserUpdateWithoutRecvDmsInput>, UserUncheckedUpdateWithoutRecvDmsInput>
  }

  export type ConversationUpdateManyWithoutDmNestedInput = {
    create?: XOR<ConversationCreateWithoutDmInput, ConversationUncheckedCreateWithoutDmInput> | ConversationCreateWithoutDmInput[] | ConversationUncheckedCreateWithoutDmInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutDmInput | ConversationCreateOrConnectWithoutDmInput[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutDmInput | ConversationUpsertWithWhereUniqueWithoutDmInput[]
    createMany?: ConversationCreateManyDmInputEnvelope
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutDmInput | ConversationUpdateWithWhereUniqueWithoutDmInput[]
    updateMany?: ConversationUpdateManyWithWhereWithoutDmInput | ConversationUpdateManyWithWhereWithoutDmInput[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type ConversationUncheckedUpdateManyWithoutDmNestedInput = {
    create?: XOR<ConversationCreateWithoutDmInput, ConversationUncheckedCreateWithoutDmInput> | ConversationCreateWithoutDmInput[] | ConversationUncheckedCreateWithoutDmInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutDmInput | ConversationCreateOrConnectWithoutDmInput[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutDmInput | ConversationUpsertWithWhereUniqueWithoutDmInput[]
    createMany?: ConversationCreateManyDmInputEnvelope
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutDmInput | ConversationUpdateWithWhereUniqueWithoutDmInput[]
    updateMany?: ConversationUpdateManyWithWhereWithoutDmInput | ConversationUpdateManyWithWhereWithoutDmInput[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type DmCreateNestedOneWithoutConversationInput = {
    create?: XOR<DmCreateWithoutConversationInput, DmUncheckedCreateWithoutConversationInput>
    connectOrCreate?: DmCreateOrConnectWithoutConversationInput
    connect?: DmWhereUniqueInput
  }

  export type DmUpdateOneRequiredWithoutConversationNestedInput = {
    create?: XOR<DmCreateWithoutConversationInput, DmUncheckedCreateWithoutConversationInput>
    connectOrCreate?: DmCreateOrConnectWithoutConversationInput
    upsert?: DmUpsertWithoutConversationInput
    connect?: DmWhereUniqueInput
    update?: XOR<XOR<DmUpdateToOneWithWhereWithoutConversationInput, DmUpdateWithoutConversationInput>, DmUncheckedUpdateWithoutConversationInput>
  }

  export type MemberChannelCreateNestedManyWithoutChannelInput = {
    create?: XOR<MemberChannelCreateWithoutChannelInput, MemberChannelUncheckedCreateWithoutChannelInput> | MemberChannelCreateWithoutChannelInput[] | MemberChannelUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: MemberChannelCreateOrConnectWithoutChannelInput | MemberChannelCreateOrConnectWithoutChannelInput[]
    createMany?: MemberChannelCreateManyChannelInputEnvelope
    connect?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
  }

  export type MemberChannelUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<MemberChannelCreateWithoutChannelInput, MemberChannelUncheckedCreateWithoutChannelInput> | MemberChannelCreateWithoutChannelInput[] | MemberChannelUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: MemberChannelCreateOrConnectWithoutChannelInput | MemberChannelCreateOrConnectWithoutChannelInput[]
    createMany?: MemberChannelCreateManyChannelInputEnvelope
    connect?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
  }

  export type MemberChannelUpdateManyWithoutChannelNestedInput = {
    create?: XOR<MemberChannelCreateWithoutChannelInput, MemberChannelUncheckedCreateWithoutChannelInput> | MemberChannelCreateWithoutChannelInput[] | MemberChannelUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: MemberChannelCreateOrConnectWithoutChannelInput | MemberChannelCreateOrConnectWithoutChannelInput[]
    upsert?: MemberChannelUpsertWithWhereUniqueWithoutChannelInput | MemberChannelUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: MemberChannelCreateManyChannelInputEnvelope
    set?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
    disconnect?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
    delete?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
    connect?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
    update?: MemberChannelUpdateWithWhereUniqueWithoutChannelInput | MemberChannelUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: MemberChannelUpdateManyWithWhereWithoutChannelInput | MemberChannelUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: MemberChannelScalarWhereInput | MemberChannelScalarWhereInput[]
  }

  export type MemberChannelUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<MemberChannelCreateWithoutChannelInput, MemberChannelUncheckedCreateWithoutChannelInput> | MemberChannelCreateWithoutChannelInput[] | MemberChannelUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: MemberChannelCreateOrConnectWithoutChannelInput | MemberChannelCreateOrConnectWithoutChannelInput[]
    upsert?: MemberChannelUpsertWithWhereUniqueWithoutChannelInput | MemberChannelUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: MemberChannelCreateManyChannelInputEnvelope
    set?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
    disconnect?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
    delete?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
    connect?: MemberChannelWhereUniqueInput | MemberChannelWhereUniqueInput[]
    update?: MemberChannelUpdateWithWhereUniqueWithoutChannelInput | MemberChannelUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: MemberChannelUpdateManyWithWhereWithoutChannelInput | MemberChannelUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: MemberChannelScalarWhereInput | MemberChannelScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutChannelsInput = {
    create?: XOR<UserCreateWithoutChannelsInput, UserUncheckedCreateWithoutChannelsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChannelsInput
    connect?: UserWhereUniqueInput
  }

  export type ChannelCreateNestedOneWithoutUsersInput = {
    create?: XOR<ChannelCreateWithoutUsersInput, ChannelUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutUsersInput
    connect?: ChannelWhereUniqueInput
  }

  export type DiscussionCreateNestedManyWithoutMemberchannelInput = {
    create?: XOR<DiscussionCreateWithoutMemberchannelInput, DiscussionUncheckedCreateWithoutMemberchannelInput> | DiscussionCreateWithoutMemberchannelInput[] | DiscussionUncheckedCreateWithoutMemberchannelInput[]
    connectOrCreate?: DiscussionCreateOrConnectWithoutMemberchannelInput | DiscussionCreateOrConnectWithoutMemberchannelInput[]
    createMany?: DiscussionCreateManyMemberchannelInputEnvelope
    connect?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
  }

  export type ChannelBanCreateNestedOneWithoutBannedUserInput = {
    create?: XOR<ChannelBanCreateWithoutBannedUserInput, ChannelBanUncheckedCreateWithoutBannedUserInput>
    connectOrCreate?: ChannelBanCreateOrConnectWithoutBannedUserInput
    connect?: ChannelBanWhereUniqueInput
  }

  export type DiscussionUncheckedCreateNestedManyWithoutMemberchannelInput = {
    create?: XOR<DiscussionCreateWithoutMemberchannelInput, DiscussionUncheckedCreateWithoutMemberchannelInput> | DiscussionCreateWithoutMemberchannelInput[] | DiscussionUncheckedCreateWithoutMemberchannelInput[]
    connectOrCreate?: DiscussionCreateOrConnectWithoutMemberchannelInput | DiscussionCreateOrConnectWithoutMemberchannelInput[]
    createMany?: DiscussionCreateManyMemberchannelInputEnvelope
    connect?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
  }

  export type ChannelBanUncheckedCreateNestedOneWithoutBannedUserInput = {
    create?: XOR<ChannelBanCreateWithoutBannedUserInput, ChannelBanUncheckedCreateWithoutBannedUserInput>
    connectOrCreate?: ChannelBanCreateOrConnectWithoutBannedUserInput
    connect?: ChannelBanWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutChannelsNestedInput = {
    create?: XOR<UserCreateWithoutChannelsInput, UserUncheckedCreateWithoutChannelsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChannelsInput
    upsert?: UserUpsertWithoutChannelsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChannelsInput, UserUpdateWithoutChannelsInput>, UserUncheckedUpdateWithoutChannelsInput>
  }

  export type ChannelUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<ChannelCreateWithoutUsersInput, ChannelUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutUsersInput
    upsert?: ChannelUpsertWithoutUsersInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<XOR<ChannelUpdateToOneWithWhereWithoutUsersInput, ChannelUpdateWithoutUsersInput>, ChannelUncheckedUpdateWithoutUsersInput>
  }

  export type DiscussionUpdateManyWithoutMemberchannelNestedInput = {
    create?: XOR<DiscussionCreateWithoutMemberchannelInput, DiscussionUncheckedCreateWithoutMemberchannelInput> | DiscussionCreateWithoutMemberchannelInput[] | DiscussionUncheckedCreateWithoutMemberchannelInput[]
    connectOrCreate?: DiscussionCreateOrConnectWithoutMemberchannelInput | DiscussionCreateOrConnectWithoutMemberchannelInput[]
    upsert?: DiscussionUpsertWithWhereUniqueWithoutMemberchannelInput | DiscussionUpsertWithWhereUniqueWithoutMemberchannelInput[]
    createMany?: DiscussionCreateManyMemberchannelInputEnvelope
    set?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    disconnect?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    delete?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    connect?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    update?: DiscussionUpdateWithWhereUniqueWithoutMemberchannelInput | DiscussionUpdateWithWhereUniqueWithoutMemberchannelInput[]
    updateMany?: DiscussionUpdateManyWithWhereWithoutMemberchannelInput | DiscussionUpdateManyWithWhereWithoutMemberchannelInput[]
    deleteMany?: DiscussionScalarWhereInput | DiscussionScalarWhereInput[]
  }

  export type ChannelBanUpdateOneWithoutBannedUserNestedInput = {
    create?: XOR<ChannelBanCreateWithoutBannedUserInput, ChannelBanUncheckedCreateWithoutBannedUserInput>
    connectOrCreate?: ChannelBanCreateOrConnectWithoutBannedUserInput
    upsert?: ChannelBanUpsertWithoutBannedUserInput
    disconnect?: ChannelBanWhereInput | boolean
    delete?: ChannelBanWhereInput | boolean
    connect?: ChannelBanWhereUniqueInput
    update?: XOR<XOR<ChannelBanUpdateToOneWithWhereWithoutBannedUserInput, ChannelBanUpdateWithoutBannedUserInput>, ChannelBanUncheckedUpdateWithoutBannedUserInput>
  }

  export type DiscussionUncheckedUpdateManyWithoutMemberchannelNestedInput = {
    create?: XOR<DiscussionCreateWithoutMemberchannelInput, DiscussionUncheckedCreateWithoutMemberchannelInput> | DiscussionCreateWithoutMemberchannelInput[] | DiscussionUncheckedCreateWithoutMemberchannelInput[]
    connectOrCreate?: DiscussionCreateOrConnectWithoutMemberchannelInput | DiscussionCreateOrConnectWithoutMemberchannelInput[]
    upsert?: DiscussionUpsertWithWhereUniqueWithoutMemberchannelInput | DiscussionUpsertWithWhereUniqueWithoutMemberchannelInput[]
    createMany?: DiscussionCreateManyMemberchannelInputEnvelope
    set?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    disconnect?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    delete?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    connect?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    update?: DiscussionUpdateWithWhereUniqueWithoutMemberchannelInput | DiscussionUpdateWithWhereUniqueWithoutMemberchannelInput[]
    updateMany?: DiscussionUpdateManyWithWhereWithoutMemberchannelInput | DiscussionUpdateManyWithWhereWithoutMemberchannelInput[]
    deleteMany?: DiscussionScalarWhereInput | DiscussionScalarWhereInput[]
  }

  export type ChannelBanUncheckedUpdateOneWithoutBannedUserNestedInput = {
    create?: XOR<ChannelBanCreateWithoutBannedUserInput, ChannelBanUncheckedCreateWithoutBannedUserInput>
    connectOrCreate?: ChannelBanCreateOrConnectWithoutBannedUserInput
    upsert?: ChannelBanUpsertWithoutBannedUserInput
    disconnect?: ChannelBanWhereInput | boolean
    delete?: ChannelBanWhereInput | boolean
    connect?: ChannelBanWhereUniqueInput
    update?: XOR<XOR<ChannelBanUpdateToOneWithWhereWithoutBannedUserInput, ChannelBanUpdateWithoutBannedUserInput>, ChannelBanUncheckedUpdateWithoutBannedUserInput>
  }

  export type MemberChannelCreateNestedOneWithoutDiscussionsInput = {
    create?: XOR<MemberChannelCreateWithoutDiscussionsInput, MemberChannelUncheckedCreateWithoutDiscussionsInput>
    connectOrCreate?: MemberChannelCreateOrConnectWithoutDiscussionsInput
    connect?: MemberChannelWhereUniqueInput
  }

  export type MemberChannelUpdateOneRequiredWithoutDiscussionsNestedInput = {
    create?: XOR<MemberChannelCreateWithoutDiscussionsInput, MemberChannelUncheckedCreateWithoutDiscussionsInput>
    connectOrCreate?: MemberChannelCreateOrConnectWithoutDiscussionsInput
    upsert?: MemberChannelUpsertWithoutDiscussionsInput
    connect?: MemberChannelWhereUniqueInput
    update?: XOR<XOR<MemberChannelUpdateToOneWithWhereWithoutDiscussionsInput, MemberChannelUpdateWithoutDiscussionsInput>, MemberChannelUncheckedUpdateWithoutDiscussionsInput>
  }

  export type MemberChannelCreateNestedOneWithoutBannedInput = {
    create?: XOR<MemberChannelCreateWithoutBannedInput, MemberChannelUncheckedCreateWithoutBannedInput>
    connectOrCreate?: MemberChannelCreateOrConnectWithoutBannedInput
    connect?: MemberChannelWhereUniqueInput
  }

  export type MemberChannelUpdateOneRequiredWithoutBannedNestedInput = {
    create?: XOR<MemberChannelCreateWithoutBannedInput, MemberChannelUncheckedCreateWithoutBannedInput>
    connectOrCreate?: MemberChannelCreateOrConnectWithoutBannedInput
    upsert?: MemberChannelUpsertWithoutBannedInput
    connect?: MemberChannelWhereUniqueInput
    update?: XOR<XOR<MemberChannelUpdateToOneWithWhereWithoutBannedInput, MemberChannelUpdateWithoutBannedInput>, MemberChannelUncheckedUpdateWithoutBannedInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StatCreateWithoutUserInput = {
    result: string
    level: number
    achievment: string
  }

  export type StatUncheckedCreateWithoutUserInput = {
    id_stat?: number
    result: string
    level: number
    achievment: string
  }

  export type StatCreateOrConnectWithoutUserInput = {
    where: StatWhereUniqueInput
    create: XOR<StatCreateWithoutUserInput, StatUncheckedCreateWithoutUserInput>
  }

  export type AchievmentsCreateWithoutUserInput = {
    achieve?: string | null
    msg?: string | null
  }

  export type AchievmentsUncheckedCreateWithoutUserInput = {
    id?: number
    achieve?: string | null
    msg?: string | null
  }

  export type AchievmentsCreateOrConnectWithoutUserInput = {
    where: AchievmentsWhereUniqueInput
    create: XOR<AchievmentsCreateWithoutUserInput, AchievmentsUncheckedCreateWithoutUserInput>
  }

  export type AchievmentsCreateManyUserInputEnvelope = {
    data: AchievmentsCreateManyUserInput | AchievmentsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type HistoryCreateWithoutUserInput = {
    winner?: boolean | null
    useravatar?: string | null
    username?: string | null
    userscore?: number | null
    enemyId?: number | null
    enemyname?: string | null
    enemyavatar?: string | null
    enemyscore?: number | null
  }

  export type HistoryUncheckedCreateWithoutUserInput = {
    winner?: boolean | null
    id_history?: number
    useravatar?: string | null
    username?: string | null
    userscore?: number | null
    enemyId?: number | null
    enemyname?: string | null
    enemyavatar?: string | null
    enemyscore?: number | null
  }

  export type HistoryCreateOrConnectWithoutUserInput = {
    where: HistoryWhereUniqueInput
    create: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput>
  }

  export type HistoryCreateManyUserInputEnvelope = {
    data: HistoryCreateManyUserInput | HistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    AcceptFriend?: boolean | null
    GameInvitation?: boolean | null
    id_user?: number | null
    email?: string | null
    avatar?: string | null
    name?: string | null
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: number
    AcceptFriend?: boolean | null
    GameInvitation?: boolean | null
    id_user?: number | null
    email?: string | null
    avatar?: string | null
    name?: string | null
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BlockedUserCreateWithoutUserInput = {
    id_blocked_user: number
  }

  export type BlockedUserUncheckedCreateWithoutUserInput = {
    id?: number
    id_blocked_user: number
  }

  export type BlockedUserCreateOrConnectWithoutUserInput = {
    where: BlockedUserWhereUniqueInput
    create: XOR<BlockedUserCreateWithoutUserInput, BlockedUserUncheckedCreateWithoutUserInput>
  }

  export type BlockedUserCreateManyUserInputEnvelope = {
    data: BlockedUserCreateManyUserInput | BlockedUserCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FreindCreateWithoutUserInput = {
    name?: string | null
    id_freind?: number | null
  }

  export type FreindUncheckedCreateWithoutUserInput = {
    id?: number
    name?: string | null
    id_freind?: number | null
  }

  export type FreindCreateOrConnectWithoutUserInput = {
    where: FreindWhereUniqueInput
    create: XOR<FreindCreateWithoutUserInput, FreindUncheckedCreateWithoutUserInput>
  }

  export type FreindCreateManyUserInputEnvelope = {
    data: FreindCreateManyUserInput | FreindCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MemberChannelCreateWithoutUserInput = {
    status_UserInChannel: string
    muted?: boolean | null
    period?: Date | string | null
    channel: ChannelCreateNestedOneWithoutUsersInput
    discussions?: DiscussionCreateNestedManyWithoutMemberchannelInput
    banned?: ChannelBanCreateNestedOneWithoutBannedUserInput
  }

  export type MemberChannelUncheckedCreateWithoutUserInput = {
    channelId: number
    status_UserInChannel: string
    muted?: boolean | null
    period?: Date | string | null
    discussions?: DiscussionUncheckedCreateNestedManyWithoutMemberchannelInput
    banned?: ChannelBanUncheckedCreateNestedOneWithoutBannedUserInput
  }

  export type MemberChannelCreateOrConnectWithoutUserInput = {
    where: MemberChannelWhereUniqueInput
    create: XOR<MemberChannelCreateWithoutUserInput, MemberChannelUncheckedCreateWithoutUserInput>
  }

  export type MemberChannelCreateManyUserInputEnvelope = {
    data: MemberChannelCreateManyUserInput | MemberChannelCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DmCreateWithoutSenderInput = {
    unread: number
    pinned: boolean
    receiver: UserCreateNestedOneWithoutRecvDmsInput
    conversation?: ConversationCreateNestedManyWithoutDmInput
  }

  export type DmUncheckedCreateWithoutSenderInput = {
    id_dm?: number
    receiverId: number
    unread: number
    pinned: boolean
    conversation?: ConversationUncheckedCreateNestedManyWithoutDmInput
  }

  export type DmCreateOrConnectWithoutSenderInput = {
    where: DmWhereUniqueInput
    create: XOR<DmCreateWithoutSenderInput, DmUncheckedCreateWithoutSenderInput>
  }

  export type DmCreateManySenderInputEnvelope = {
    data: DmCreateManySenderInput | DmCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type DmCreateWithoutReceiverInput = {
    unread: number
    pinned: boolean
    sender: UserCreateNestedOneWithoutSentDmsInput
    conversation?: ConversationCreateNestedManyWithoutDmInput
  }

  export type DmUncheckedCreateWithoutReceiverInput = {
    id_dm?: number
    senderId: number
    unread: number
    pinned: boolean
    conversation?: ConversationUncheckedCreateNestedManyWithoutDmInput
  }

  export type DmCreateOrConnectWithoutReceiverInput = {
    where: DmWhereUniqueInput
    create: XOR<DmCreateWithoutReceiverInput, DmUncheckedCreateWithoutReceiverInput>
  }

  export type DmCreateManyReceiverInputEnvelope = {
    data: DmCreateManyReceiverInput | DmCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type StatUpsertWithoutUserInput = {
    update: XOR<StatUpdateWithoutUserInput, StatUncheckedUpdateWithoutUserInput>
    create: XOR<StatCreateWithoutUserInput, StatUncheckedCreateWithoutUserInput>
    where?: StatWhereInput
  }

  export type StatUpdateToOneWithWhereWithoutUserInput = {
    where?: StatWhereInput
    data: XOR<StatUpdateWithoutUserInput, StatUncheckedUpdateWithoutUserInput>
  }

  export type StatUpdateWithoutUserInput = {
    result?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    achievment?: StringFieldUpdateOperationsInput | string
  }

  export type StatUncheckedUpdateWithoutUserInput = {
    id_stat?: IntFieldUpdateOperationsInput | number
    result?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    achievment?: StringFieldUpdateOperationsInput | string
  }

  export type AchievmentsUpsertWithWhereUniqueWithoutUserInput = {
    where: AchievmentsWhereUniqueInput
    update: XOR<AchievmentsUpdateWithoutUserInput, AchievmentsUncheckedUpdateWithoutUserInput>
    create: XOR<AchievmentsCreateWithoutUserInput, AchievmentsUncheckedCreateWithoutUserInput>
  }

  export type AchievmentsUpdateWithWhereUniqueWithoutUserInput = {
    where: AchievmentsWhereUniqueInput
    data: XOR<AchievmentsUpdateWithoutUserInput, AchievmentsUncheckedUpdateWithoutUserInput>
  }

  export type AchievmentsUpdateManyWithWhereWithoutUserInput = {
    where: AchievmentsScalarWhereInput
    data: XOR<AchievmentsUpdateManyMutationInput, AchievmentsUncheckedUpdateManyWithoutUserInput>
  }

  export type AchievmentsScalarWhereInput = {
    AND?: AchievmentsScalarWhereInput | AchievmentsScalarWhereInput[]
    OR?: AchievmentsScalarWhereInput[]
    NOT?: AchievmentsScalarWhereInput | AchievmentsScalarWhereInput[]
    id?: IntFilter<"Achievments"> | number
    achieve?: StringNullableFilter<"Achievments"> | string | null
    msg?: StringNullableFilter<"Achievments"> | string | null
    userId?: IntFilter<"Achievments"> | number
  }

  export type HistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: HistoryWhereUniqueInput
    update: XOR<HistoryUpdateWithoutUserInput, HistoryUncheckedUpdateWithoutUserInput>
    create: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput>
  }

  export type HistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: HistoryWhereUniqueInput
    data: XOR<HistoryUpdateWithoutUserInput, HistoryUncheckedUpdateWithoutUserInput>
  }

  export type HistoryUpdateManyWithWhereWithoutUserInput = {
    where: HistoryScalarWhereInput
    data: XOR<HistoryUpdateManyMutationInput, HistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type HistoryScalarWhereInput = {
    AND?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
    OR?: HistoryScalarWhereInput[]
    NOT?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
    winner?: BoolNullableFilter<"History"> | boolean | null
    id_history?: IntFilter<"History"> | number
    useravatar?: StringNullableFilter<"History"> | string | null
    username?: StringNullableFilter<"History"> | string | null
    userId?: IntFilter<"History"> | number
    userscore?: IntNullableFilter<"History"> | number | null
    enemyId?: IntNullableFilter<"History"> | number | null
    enemyname?: StringNullableFilter<"History"> | string | null
    enemyavatar?: StringNullableFilter<"History"> | string | null
    enemyscore?: IntNullableFilter<"History"> | number | null
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    AcceptFriend?: BoolNullableFilter<"Notification"> | boolean | null
    GameInvitation?: BoolNullableFilter<"Notification"> | boolean | null
    id_user?: IntNullableFilter<"Notification"> | number | null
    email?: StringNullableFilter<"Notification"> | string | null
    avatar?: StringNullableFilter<"Notification"> | string | null
    name?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type BlockedUserUpsertWithWhereUniqueWithoutUserInput = {
    where: BlockedUserWhereUniqueInput
    update: XOR<BlockedUserUpdateWithoutUserInput, BlockedUserUncheckedUpdateWithoutUserInput>
    create: XOR<BlockedUserCreateWithoutUserInput, BlockedUserUncheckedCreateWithoutUserInput>
  }

  export type BlockedUserUpdateWithWhereUniqueWithoutUserInput = {
    where: BlockedUserWhereUniqueInput
    data: XOR<BlockedUserUpdateWithoutUserInput, BlockedUserUncheckedUpdateWithoutUserInput>
  }

  export type BlockedUserUpdateManyWithWhereWithoutUserInput = {
    where: BlockedUserScalarWhereInput
    data: XOR<BlockedUserUpdateManyMutationInput, BlockedUserUncheckedUpdateManyWithoutUserInput>
  }

  export type BlockedUserScalarWhereInput = {
    AND?: BlockedUserScalarWhereInput | BlockedUserScalarWhereInput[]
    OR?: BlockedUserScalarWhereInput[]
    NOT?: BlockedUserScalarWhereInput | BlockedUserScalarWhereInput[]
    id?: IntFilter<"BlockedUser"> | number
    userId?: IntFilter<"BlockedUser"> | number
    id_blocked_user?: IntFilter<"BlockedUser"> | number
  }

  export type FreindUpsertWithWhereUniqueWithoutUserInput = {
    where: FreindWhereUniqueInput
    update: XOR<FreindUpdateWithoutUserInput, FreindUncheckedUpdateWithoutUserInput>
    create: XOR<FreindCreateWithoutUserInput, FreindUncheckedCreateWithoutUserInput>
  }

  export type FreindUpdateWithWhereUniqueWithoutUserInput = {
    where: FreindWhereUniqueInput
    data: XOR<FreindUpdateWithoutUserInput, FreindUncheckedUpdateWithoutUserInput>
  }

  export type FreindUpdateManyWithWhereWithoutUserInput = {
    where: FreindScalarWhereInput
    data: XOR<FreindUpdateManyMutationInput, FreindUncheckedUpdateManyWithoutUserInput>
  }

  export type FreindScalarWhereInput = {
    AND?: FreindScalarWhereInput | FreindScalarWhereInput[]
    OR?: FreindScalarWhereInput[]
    NOT?: FreindScalarWhereInput | FreindScalarWhereInput[]
    id?: IntFilter<"Freind"> | number
    name?: StringNullableFilter<"Freind"> | string | null
    userId?: IntFilter<"Freind"> | number
    id_freind?: IntNullableFilter<"Freind"> | number | null
  }

  export type MemberChannelUpsertWithWhereUniqueWithoutUserInput = {
    where: MemberChannelWhereUniqueInput
    update: XOR<MemberChannelUpdateWithoutUserInput, MemberChannelUncheckedUpdateWithoutUserInput>
    create: XOR<MemberChannelCreateWithoutUserInput, MemberChannelUncheckedCreateWithoutUserInput>
  }

  export type MemberChannelUpdateWithWhereUniqueWithoutUserInput = {
    where: MemberChannelWhereUniqueInput
    data: XOR<MemberChannelUpdateWithoutUserInput, MemberChannelUncheckedUpdateWithoutUserInput>
  }

  export type MemberChannelUpdateManyWithWhereWithoutUserInput = {
    where: MemberChannelScalarWhereInput
    data: XOR<MemberChannelUpdateManyMutationInput, MemberChannelUncheckedUpdateManyWithoutUserInput>
  }

  export type MemberChannelScalarWhereInput = {
    AND?: MemberChannelScalarWhereInput | MemberChannelScalarWhereInput[]
    OR?: MemberChannelScalarWhereInput[]
    NOT?: MemberChannelScalarWhereInput | MemberChannelScalarWhereInput[]
    userId?: IntFilter<"MemberChannel"> | number
    channelId?: IntFilter<"MemberChannel"> | number
    status_UserInChannel?: StringFilter<"MemberChannel"> | string
    muted?: BoolNullableFilter<"MemberChannel"> | boolean | null
    period?: DateTimeNullableFilter<"MemberChannel"> | Date | string | null
  }

  export type DmUpsertWithWhereUniqueWithoutSenderInput = {
    where: DmWhereUniqueInput
    update: XOR<DmUpdateWithoutSenderInput, DmUncheckedUpdateWithoutSenderInput>
    create: XOR<DmCreateWithoutSenderInput, DmUncheckedCreateWithoutSenderInput>
  }

  export type DmUpdateWithWhereUniqueWithoutSenderInput = {
    where: DmWhereUniqueInput
    data: XOR<DmUpdateWithoutSenderInput, DmUncheckedUpdateWithoutSenderInput>
  }

  export type DmUpdateManyWithWhereWithoutSenderInput = {
    where: DmScalarWhereInput
    data: XOR<DmUpdateManyMutationInput, DmUncheckedUpdateManyWithoutSenderInput>
  }

  export type DmScalarWhereInput = {
    AND?: DmScalarWhereInput | DmScalarWhereInput[]
    OR?: DmScalarWhereInput[]
    NOT?: DmScalarWhereInput | DmScalarWhereInput[]
    id_dm?: IntFilter<"Dm"> | number
    senderId?: IntFilter<"Dm"> | number
    receiverId?: IntFilter<"Dm"> | number
    unread?: IntFilter<"Dm"> | number
    pinned?: BoolFilter<"Dm"> | boolean
  }

  export type DmUpsertWithWhereUniqueWithoutReceiverInput = {
    where: DmWhereUniqueInput
    update: XOR<DmUpdateWithoutReceiverInput, DmUncheckedUpdateWithoutReceiverInput>
    create: XOR<DmCreateWithoutReceiverInput, DmUncheckedCreateWithoutReceiverInput>
  }

  export type DmUpdateWithWhereUniqueWithoutReceiverInput = {
    where: DmWhereUniqueInput
    data: XOR<DmUpdateWithoutReceiverInput, DmUncheckedUpdateWithoutReceiverInput>
  }

  export type DmUpdateManyWithWhereWithoutReceiverInput = {
    where: DmScalarWhereInput
    data: XOR<DmUpdateManyMutationInput, DmUncheckedUpdateManyWithoutReceiverInput>
  }

  export type UserCreateWithoutAchievmentsInput = {
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    stat?: StatCreateNestedOneWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    blockedUser?: BlockedUserCreateNestedManyWithoutUserInput
    freind?: FreindCreateNestedManyWithoutUserInput
    channels?: MemberChannelCreateNestedManyWithoutUserInput
    sentDms?: DmCreateNestedManyWithoutSenderInput
    recvDms?: DmCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutAchievmentsInput = {
    id_user?: number
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    stat?: StatUncheckedCreateNestedOneWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    blockedUser?: BlockedUserUncheckedCreateNestedManyWithoutUserInput
    freind?: FreindUncheckedCreateNestedManyWithoutUserInput
    channels?: MemberChannelUncheckedCreateNestedManyWithoutUserInput
    sentDms?: DmUncheckedCreateNestedManyWithoutSenderInput
    recvDms?: DmUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutAchievmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAchievmentsInput, UserUncheckedCreateWithoutAchievmentsInput>
  }

  export type UserUpsertWithoutAchievmentsInput = {
    update: XOR<UserUpdateWithoutAchievmentsInput, UserUncheckedUpdateWithoutAchievmentsInput>
    create: XOR<UserCreateWithoutAchievmentsInput, UserUncheckedCreateWithoutAchievmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAchievmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAchievmentsInput, UserUncheckedUpdateWithoutAchievmentsInput>
  }

  export type UserUpdateWithoutAchievmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    stat?: StatUpdateOneWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    blockedUser?: BlockedUserUpdateManyWithoutUserNestedInput
    freind?: FreindUpdateManyWithoutUserNestedInput
    channels?: MemberChannelUpdateManyWithoutUserNestedInput
    sentDms?: DmUpdateManyWithoutSenderNestedInput
    recvDms?: DmUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutAchievmentsInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    stat?: StatUncheckedUpdateOneWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    blockedUser?: BlockedUserUncheckedUpdateManyWithoutUserNestedInput
    freind?: FreindUncheckedUpdateManyWithoutUserNestedInput
    channels?: MemberChannelUncheckedUpdateManyWithoutUserNestedInput
    sentDms?: DmUncheckedUpdateManyWithoutSenderNestedInput
    recvDms?: DmUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutNotificationInput = {
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    stat?: StatCreateNestedOneWithoutUserInput
    achievments?: AchievmentsCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
    blockedUser?: BlockedUserCreateNestedManyWithoutUserInput
    freind?: FreindCreateNestedManyWithoutUserInput
    channels?: MemberChannelCreateNestedManyWithoutUserInput
    sentDms?: DmCreateNestedManyWithoutSenderInput
    recvDms?: DmCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutNotificationInput = {
    id_user?: number
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    stat?: StatUncheckedCreateNestedOneWithoutUserInput
    achievments?: AchievmentsUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
    blockedUser?: BlockedUserUncheckedCreateNestedManyWithoutUserInput
    freind?: FreindUncheckedCreateNestedManyWithoutUserInput
    channels?: MemberChannelUncheckedCreateNestedManyWithoutUserInput
    sentDms?: DmUncheckedCreateNestedManyWithoutSenderInput
    recvDms?: DmUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutNotificationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationInput, UserUncheckedCreateWithoutNotificationInput>
  }

  export type UserUpsertWithoutNotificationInput = {
    update: XOR<UserUpdateWithoutNotificationInput, UserUncheckedUpdateWithoutNotificationInput>
    create: XOR<UserCreateWithoutNotificationInput, UserUncheckedCreateWithoutNotificationInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationInput, UserUncheckedUpdateWithoutNotificationInput>
  }

  export type UserUpdateWithoutNotificationInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    stat?: StatUpdateOneWithoutUserNestedInput
    achievments?: AchievmentsUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
    blockedUser?: BlockedUserUpdateManyWithoutUserNestedInput
    freind?: FreindUpdateManyWithoutUserNestedInput
    channels?: MemberChannelUpdateManyWithoutUserNestedInput
    sentDms?: DmUpdateManyWithoutSenderNestedInput
    recvDms?: DmUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    stat?: StatUncheckedUpdateOneWithoutUserNestedInput
    achievments?: AchievmentsUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    blockedUser?: BlockedUserUncheckedUpdateManyWithoutUserNestedInput
    freind?: FreindUncheckedUpdateManyWithoutUserNestedInput
    channels?: MemberChannelUncheckedUpdateManyWithoutUserNestedInput
    sentDms?: DmUncheckedUpdateManyWithoutSenderNestedInput
    recvDms?: DmUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutStatInput = {
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    achievments?: AchievmentsCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    blockedUser?: BlockedUserCreateNestedManyWithoutUserInput
    freind?: FreindCreateNestedManyWithoutUserInput
    channels?: MemberChannelCreateNestedManyWithoutUserInput
    sentDms?: DmCreateNestedManyWithoutSenderInput
    recvDms?: DmCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutStatInput = {
    id_user?: number
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    achievments?: AchievmentsUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    blockedUser?: BlockedUserUncheckedCreateNestedManyWithoutUserInput
    freind?: FreindUncheckedCreateNestedManyWithoutUserInput
    channels?: MemberChannelUncheckedCreateNestedManyWithoutUserInput
    sentDms?: DmUncheckedCreateNestedManyWithoutSenderInput
    recvDms?: DmUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutStatInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStatInput, UserUncheckedCreateWithoutStatInput>
  }

  export type UserUpsertWithoutStatInput = {
    update: XOR<UserUpdateWithoutStatInput, UserUncheckedUpdateWithoutStatInput>
    create: XOR<UserCreateWithoutStatInput, UserUncheckedCreateWithoutStatInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStatInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStatInput, UserUncheckedUpdateWithoutStatInput>
  }

  export type UserUpdateWithoutStatInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    achievments?: AchievmentsUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    blockedUser?: BlockedUserUpdateManyWithoutUserNestedInput
    freind?: FreindUpdateManyWithoutUserNestedInput
    channels?: MemberChannelUpdateManyWithoutUserNestedInput
    sentDms?: DmUpdateManyWithoutSenderNestedInput
    recvDms?: DmUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutStatInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    achievments?: AchievmentsUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    blockedUser?: BlockedUserUncheckedUpdateManyWithoutUserNestedInput
    freind?: FreindUncheckedUpdateManyWithoutUserNestedInput
    channels?: MemberChannelUncheckedUpdateManyWithoutUserNestedInput
    sentDms?: DmUncheckedUpdateManyWithoutSenderNestedInput
    recvDms?: DmUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutHistoryInput = {
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    stat?: StatCreateNestedOneWithoutUserInput
    achievments?: AchievmentsCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    blockedUser?: BlockedUserCreateNestedManyWithoutUserInput
    freind?: FreindCreateNestedManyWithoutUserInput
    channels?: MemberChannelCreateNestedManyWithoutUserInput
    sentDms?: DmCreateNestedManyWithoutSenderInput
    recvDms?: DmCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutHistoryInput = {
    id_user?: number
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    stat?: StatUncheckedCreateNestedOneWithoutUserInput
    achievments?: AchievmentsUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    blockedUser?: BlockedUserUncheckedCreateNestedManyWithoutUserInput
    freind?: FreindUncheckedCreateNestedManyWithoutUserInput
    channels?: MemberChannelUncheckedCreateNestedManyWithoutUserInput
    sentDms?: DmUncheckedCreateNestedManyWithoutSenderInput
    recvDms?: DmUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHistoryInput, UserUncheckedCreateWithoutHistoryInput>
  }

  export type UserUpsertWithoutHistoryInput = {
    update: XOR<UserUpdateWithoutHistoryInput, UserUncheckedUpdateWithoutHistoryInput>
    create: XOR<UserCreateWithoutHistoryInput, UserUncheckedCreateWithoutHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHistoryInput, UserUncheckedUpdateWithoutHistoryInput>
  }

  export type UserUpdateWithoutHistoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    stat?: StatUpdateOneWithoutUserNestedInput
    achievments?: AchievmentsUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    blockedUser?: BlockedUserUpdateManyWithoutUserNestedInput
    freind?: FreindUpdateManyWithoutUserNestedInput
    channels?: MemberChannelUpdateManyWithoutUserNestedInput
    sentDms?: DmUpdateManyWithoutSenderNestedInput
    recvDms?: DmUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutHistoryInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    stat?: StatUncheckedUpdateOneWithoutUserNestedInput
    achievments?: AchievmentsUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    blockedUser?: BlockedUserUncheckedUpdateManyWithoutUserNestedInput
    freind?: FreindUncheckedUpdateManyWithoutUserNestedInput
    channels?: MemberChannelUncheckedUpdateManyWithoutUserNestedInput
    sentDms?: DmUncheckedUpdateManyWithoutSenderNestedInput
    recvDms?: DmUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutBlockedUserInput = {
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    stat?: StatCreateNestedOneWithoutUserInput
    achievments?: AchievmentsCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    freind?: FreindCreateNestedManyWithoutUserInput
    channels?: MemberChannelCreateNestedManyWithoutUserInput
    sentDms?: DmCreateNestedManyWithoutSenderInput
    recvDms?: DmCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutBlockedUserInput = {
    id_user?: number
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    stat?: StatUncheckedCreateNestedOneWithoutUserInput
    achievments?: AchievmentsUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    freind?: FreindUncheckedCreateNestedManyWithoutUserInput
    channels?: MemberChannelUncheckedCreateNestedManyWithoutUserInput
    sentDms?: DmUncheckedCreateNestedManyWithoutSenderInput
    recvDms?: DmUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutBlockedUserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBlockedUserInput, UserUncheckedCreateWithoutBlockedUserInput>
  }

  export type UserUpsertWithoutBlockedUserInput = {
    update: XOR<UserUpdateWithoutBlockedUserInput, UserUncheckedUpdateWithoutBlockedUserInput>
    create: XOR<UserCreateWithoutBlockedUserInput, UserUncheckedCreateWithoutBlockedUserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBlockedUserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBlockedUserInput, UserUncheckedUpdateWithoutBlockedUserInput>
  }

  export type UserUpdateWithoutBlockedUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    stat?: StatUpdateOneWithoutUserNestedInput
    achievments?: AchievmentsUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    freind?: FreindUpdateManyWithoutUserNestedInput
    channels?: MemberChannelUpdateManyWithoutUserNestedInput
    sentDms?: DmUpdateManyWithoutSenderNestedInput
    recvDms?: DmUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutBlockedUserInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    stat?: StatUncheckedUpdateOneWithoutUserNestedInput
    achievments?: AchievmentsUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    freind?: FreindUncheckedUpdateManyWithoutUserNestedInput
    channels?: MemberChannelUncheckedUpdateManyWithoutUserNestedInput
    sentDms?: DmUncheckedUpdateManyWithoutSenderNestedInput
    recvDms?: DmUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutFreindInput = {
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    stat?: StatCreateNestedOneWithoutUserInput
    achievments?: AchievmentsCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    blockedUser?: BlockedUserCreateNestedManyWithoutUserInput
    channels?: MemberChannelCreateNestedManyWithoutUserInput
    sentDms?: DmCreateNestedManyWithoutSenderInput
    recvDms?: DmCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutFreindInput = {
    id_user?: number
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    stat?: StatUncheckedCreateNestedOneWithoutUserInput
    achievments?: AchievmentsUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    blockedUser?: BlockedUserUncheckedCreateNestedManyWithoutUserInput
    channels?: MemberChannelUncheckedCreateNestedManyWithoutUserInput
    sentDms?: DmUncheckedCreateNestedManyWithoutSenderInput
    recvDms?: DmUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutFreindInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFreindInput, UserUncheckedCreateWithoutFreindInput>
  }

  export type UserUpsertWithoutFreindInput = {
    update: XOR<UserUpdateWithoutFreindInput, UserUncheckedUpdateWithoutFreindInput>
    create: XOR<UserCreateWithoutFreindInput, UserUncheckedCreateWithoutFreindInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFreindInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFreindInput, UserUncheckedUpdateWithoutFreindInput>
  }

  export type UserUpdateWithoutFreindInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    stat?: StatUpdateOneWithoutUserNestedInput
    achievments?: AchievmentsUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    blockedUser?: BlockedUserUpdateManyWithoutUserNestedInput
    channels?: MemberChannelUpdateManyWithoutUserNestedInput
    sentDms?: DmUpdateManyWithoutSenderNestedInput
    recvDms?: DmUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutFreindInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    stat?: StatUncheckedUpdateOneWithoutUserNestedInput
    achievments?: AchievmentsUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    blockedUser?: BlockedUserUncheckedUpdateManyWithoutUserNestedInput
    channels?: MemberChannelUncheckedUpdateManyWithoutUserNestedInput
    sentDms?: DmUncheckedUpdateManyWithoutSenderNestedInput
    recvDms?: DmUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutSentDmsInput = {
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    stat?: StatCreateNestedOneWithoutUserInput
    achievments?: AchievmentsCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    blockedUser?: BlockedUserCreateNestedManyWithoutUserInput
    freind?: FreindCreateNestedManyWithoutUserInput
    channels?: MemberChannelCreateNestedManyWithoutUserInput
    recvDms?: DmCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutSentDmsInput = {
    id_user?: number
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    stat?: StatUncheckedCreateNestedOneWithoutUserInput
    achievments?: AchievmentsUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    blockedUser?: BlockedUserUncheckedCreateNestedManyWithoutUserInput
    freind?: FreindUncheckedCreateNestedManyWithoutUserInput
    channels?: MemberChannelUncheckedCreateNestedManyWithoutUserInput
    recvDms?: DmUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutSentDmsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentDmsInput, UserUncheckedCreateWithoutSentDmsInput>
  }

  export type UserCreateWithoutRecvDmsInput = {
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    stat?: StatCreateNestedOneWithoutUserInput
    achievments?: AchievmentsCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    blockedUser?: BlockedUserCreateNestedManyWithoutUserInput
    freind?: FreindCreateNestedManyWithoutUserInput
    channels?: MemberChannelCreateNestedManyWithoutUserInput
    sentDms?: DmCreateNestedManyWithoutSenderInput
  }

  export type UserUncheckedCreateWithoutRecvDmsInput = {
    id_user?: number
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    stat?: StatUncheckedCreateNestedOneWithoutUserInput
    achievments?: AchievmentsUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    blockedUser?: BlockedUserUncheckedCreateNestedManyWithoutUserInput
    freind?: FreindUncheckedCreateNestedManyWithoutUserInput
    channels?: MemberChannelUncheckedCreateNestedManyWithoutUserInput
    sentDms?: DmUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserCreateOrConnectWithoutRecvDmsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRecvDmsInput, UserUncheckedCreateWithoutRecvDmsInput>
  }

  export type ConversationCreateWithoutDmInput = {
    text: string
    dateSent?: Date | string
    outgoing: number
    incoming: number
    type: string
  }

  export type ConversationUncheckedCreateWithoutDmInput = {
    id?: number
    text: string
    dateSent?: Date | string
    outgoing: number
    incoming: number
    type: string
  }

  export type ConversationCreateOrConnectWithoutDmInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutDmInput, ConversationUncheckedCreateWithoutDmInput>
  }

  export type ConversationCreateManyDmInputEnvelope = {
    data: ConversationCreateManyDmInput | ConversationCreateManyDmInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSentDmsInput = {
    update: XOR<UserUpdateWithoutSentDmsInput, UserUncheckedUpdateWithoutSentDmsInput>
    create: XOR<UserCreateWithoutSentDmsInput, UserUncheckedCreateWithoutSentDmsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentDmsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentDmsInput, UserUncheckedUpdateWithoutSentDmsInput>
  }

  export type UserUpdateWithoutSentDmsInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    stat?: StatUpdateOneWithoutUserNestedInput
    achievments?: AchievmentsUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    blockedUser?: BlockedUserUpdateManyWithoutUserNestedInput
    freind?: FreindUpdateManyWithoutUserNestedInput
    channels?: MemberChannelUpdateManyWithoutUserNestedInput
    recvDms?: DmUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutSentDmsInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    stat?: StatUncheckedUpdateOneWithoutUserNestedInput
    achievments?: AchievmentsUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    blockedUser?: BlockedUserUncheckedUpdateManyWithoutUserNestedInput
    freind?: FreindUncheckedUpdateManyWithoutUserNestedInput
    channels?: MemberChannelUncheckedUpdateManyWithoutUserNestedInput
    recvDms?: DmUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserUpsertWithoutRecvDmsInput = {
    update: XOR<UserUpdateWithoutRecvDmsInput, UserUncheckedUpdateWithoutRecvDmsInput>
    create: XOR<UserCreateWithoutRecvDmsInput, UserUncheckedCreateWithoutRecvDmsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRecvDmsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRecvDmsInput, UserUncheckedUpdateWithoutRecvDmsInput>
  }

  export type UserUpdateWithoutRecvDmsInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    stat?: StatUpdateOneWithoutUserNestedInput
    achievments?: AchievmentsUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    blockedUser?: BlockedUserUpdateManyWithoutUserNestedInput
    freind?: FreindUpdateManyWithoutUserNestedInput
    channels?: MemberChannelUpdateManyWithoutUserNestedInput
    sentDms?: DmUpdateManyWithoutSenderNestedInput
  }

  export type UserUncheckedUpdateWithoutRecvDmsInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    stat?: StatUncheckedUpdateOneWithoutUserNestedInput
    achievments?: AchievmentsUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    blockedUser?: BlockedUserUncheckedUpdateManyWithoutUserNestedInput
    freind?: FreindUncheckedUpdateManyWithoutUserNestedInput
    channels?: MemberChannelUncheckedUpdateManyWithoutUserNestedInput
    sentDms?: DmUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type ConversationUpsertWithWhereUniqueWithoutDmInput = {
    where: ConversationWhereUniqueInput
    update: XOR<ConversationUpdateWithoutDmInput, ConversationUncheckedUpdateWithoutDmInput>
    create: XOR<ConversationCreateWithoutDmInput, ConversationUncheckedCreateWithoutDmInput>
  }

  export type ConversationUpdateWithWhereUniqueWithoutDmInput = {
    where: ConversationWhereUniqueInput
    data: XOR<ConversationUpdateWithoutDmInput, ConversationUncheckedUpdateWithoutDmInput>
  }

  export type ConversationUpdateManyWithWhereWithoutDmInput = {
    where: ConversationScalarWhereInput
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyWithoutDmInput>
  }

  export type ConversationScalarWhereInput = {
    AND?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
    OR?: ConversationScalarWhereInput[]
    NOT?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
    id?: IntFilter<"Conversation"> | number
    text?: StringFilter<"Conversation"> | string
    dateSent?: DateTimeFilter<"Conversation"> | Date | string
    outgoing?: IntFilter<"Conversation"> | number
    incoming?: IntFilter<"Conversation"> | number
    type?: StringFilter<"Conversation"> | string
    idDm?: IntFilter<"Conversation"> | number
  }

  export type DmCreateWithoutConversationInput = {
    unread: number
    pinned: boolean
    sender: UserCreateNestedOneWithoutSentDmsInput
    receiver: UserCreateNestedOneWithoutRecvDmsInput
  }

  export type DmUncheckedCreateWithoutConversationInput = {
    id_dm?: number
    senderId: number
    receiverId: number
    unread: number
    pinned: boolean
  }

  export type DmCreateOrConnectWithoutConversationInput = {
    where: DmWhereUniqueInput
    create: XOR<DmCreateWithoutConversationInput, DmUncheckedCreateWithoutConversationInput>
  }

  export type DmUpsertWithoutConversationInput = {
    update: XOR<DmUpdateWithoutConversationInput, DmUncheckedUpdateWithoutConversationInput>
    create: XOR<DmCreateWithoutConversationInput, DmUncheckedCreateWithoutConversationInput>
    where?: DmWhereInput
  }

  export type DmUpdateToOneWithWhereWithoutConversationInput = {
    where?: DmWhereInput
    data: XOR<DmUpdateWithoutConversationInput, DmUncheckedUpdateWithoutConversationInput>
  }

  export type DmUpdateWithoutConversationInput = {
    unread?: IntFieldUpdateOperationsInput | number
    pinned?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutSentDmsNestedInput
    receiver?: UserUpdateOneRequiredWithoutRecvDmsNestedInput
  }

  export type DmUncheckedUpdateWithoutConversationInput = {
    id_dm?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    unread?: IntFieldUpdateOperationsInput | number
    pinned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MemberChannelCreateWithoutChannelInput = {
    status_UserInChannel: string
    muted?: boolean | null
    period?: Date | string | null
    user: UserCreateNestedOneWithoutChannelsInput
    discussions?: DiscussionCreateNestedManyWithoutMemberchannelInput
    banned?: ChannelBanCreateNestedOneWithoutBannedUserInput
  }

  export type MemberChannelUncheckedCreateWithoutChannelInput = {
    userId: number
    status_UserInChannel: string
    muted?: boolean | null
    period?: Date | string | null
    discussions?: DiscussionUncheckedCreateNestedManyWithoutMemberchannelInput
    banned?: ChannelBanUncheckedCreateNestedOneWithoutBannedUserInput
  }

  export type MemberChannelCreateOrConnectWithoutChannelInput = {
    where: MemberChannelWhereUniqueInput
    create: XOR<MemberChannelCreateWithoutChannelInput, MemberChannelUncheckedCreateWithoutChannelInput>
  }

  export type MemberChannelCreateManyChannelInputEnvelope = {
    data: MemberChannelCreateManyChannelInput | MemberChannelCreateManyChannelInput[]
    skipDuplicates?: boolean
  }

  export type MemberChannelUpsertWithWhereUniqueWithoutChannelInput = {
    where: MemberChannelWhereUniqueInput
    update: XOR<MemberChannelUpdateWithoutChannelInput, MemberChannelUncheckedUpdateWithoutChannelInput>
    create: XOR<MemberChannelCreateWithoutChannelInput, MemberChannelUncheckedCreateWithoutChannelInput>
  }

  export type MemberChannelUpdateWithWhereUniqueWithoutChannelInput = {
    where: MemberChannelWhereUniqueInput
    data: XOR<MemberChannelUpdateWithoutChannelInput, MemberChannelUncheckedUpdateWithoutChannelInput>
  }

  export type MemberChannelUpdateManyWithWhereWithoutChannelInput = {
    where: MemberChannelScalarWhereInput
    data: XOR<MemberChannelUpdateManyMutationInput, MemberChannelUncheckedUpdateManyWithoutChannelInput>
  }

  export type UserCreateWithoutChannelsInput = {
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    stat?: StatCreateNestedOneWithoutUserInput
    achievments?: AchievmentsCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    blockedUser?: BlockedUserCreateNestedManyWithoutUserInput
    freind?: FreindCreateNestedManyWithoutUserInput
    sentDms?: DmCreateNestedManyWithoutSenderInput
    recvDms?: DmCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutChannelsInput = {
    id_user?: number
    name: string
    avatar?: string | null
    TwoFactor?: boolean | null
    ISVERIDIED?: boolean | null
    IsFirstTime?: boolean | null
    InGame?: boolean | null
    secretKey?: string | null
    About?: string | null
    status_user?: string | null
    email?: string | null
    WonBot?: number | null
    LoseBot?: number | null
    wins?: number | null
    losses?: number | null
    games_played?: number | null
    Progress?: number | null
    Wins_percent?: number | null
    Losses_percent?: number | null
    homies?: boolean | null
    invited?: boolean | null
    homie_id?: number | null
    stat?: StatUncheckedCreateNestedOneWithoutUserInput
    achievments?: AchievmentsUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    blockedUser?: BlockedUserUncheckedCreateNestedManyWithoutUserInput
    freind?: FreindUncheckedCreateNestedManyWithoutUserInput
    sentDms?: DmUncheckedCreateNestedManyWithoutSenderInput
    recvDms?: DmUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutChannelsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChannelsInput, UserUncheckedCreateWithoutChannelsInput>
  }

  export type ChannelCreateWithoutUsersInput = {
    name: string
    img?: string | null
    visibility: string
    password?: string | null
  }

  export type ChannelUncheckedCreateWithoutUsersInput = {
    id_channel?: number
    name: string
    img?: string | null
    visibility: string
    password?: string | null
  }

  export type ChannelCreateOrConnectWithoutUsersInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutUsersInput, ChannelUncheckedCreateWithoutUsersInput>
  }

  export type DiscussionCreateWithoutMemberchannelInput = {
    message: string
    dateSent?: Date | string
  }

  export type DiscussionUncheckedCreateWithoutMemberchannelInput = {
    id_disc?: number
    message: string
    dateSent?: Date | string
  }

  export type DiscussionCreateOrConnectWithoutMemberchannelInput = {
    where: DiscussionWhereUniqueInput
    create: XOR<DiscussionCreateWithoutMemberchannelInput, DiscussionUncheckedCreateWithoutMemberchannelInput>
  }

  export type DiscussionCreateManyMemberchannelInputEnvelope = {
    data: DiscussionCreateManyMemberchannelInput | DiscussionCreateManyMemberchannelInput[]
    skipDuplicates?: boolean
  }

  export type ChannelBanCreateWithoutBannedUserInput = {
    status_User: string
  }

  export type ChannelBanUncheckedCreateWithoutBannedUserInput = {
    status_User: string
  }

  export type ChannelBanCreateOrConnectWithoutBannedUserInput = {
    where: ChannelBanWhereUniqueInput
    create: XOR<ChannelBanCreateWithoutBannedUserInput, ChannelBanUncheckedCreateWithoutBannedUserInput>
  }

  export type UserUpsertWithoutChannelsInput = {
    update: XOR<UserUpdateWithoutChannelsInput, UserUncheckedUpdateWithoutChannelsInput>
    create: XOR<UserCreateWithoutChannelsInput, UserUncheckedCreateWithoutChannelsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChannelsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChannelsInput, UserUncheckedUpdateWithoutChannelsInput>
  }

  export type UserUpdateWithoutChannelsInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    stat?: StatUpdateOneWithoutUserNestedInput
    achievments?: AchievmentsUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    blockedUser?: BlockedUserUpdateManyWithoutUserNestedInput
    freind?: FreindUpdateManyWithoutUserNestedInput
    sentDms?: DmUpdateManyWithoutSenderNestedInput
    recvDms?: DmUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutChannelsInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    TwoFactor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ISVERIDIED?: NullableBoolFieldUpdateOperationsInput | boolean | null
    IsFirstTime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    InGame?: NullableBoolFieldUpdateOperationsInput | boolean | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    About?: NullableStringFieldUpdateOperationsInput | string | null
    status_user?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    WonBot?: NullableIntFieldUpdateOperationsInput | number | null
    LoseBot?: NullableIntFieldUpdateOperationsInput | number | null
    wins?: NullableIntFieldUpdateOperationsInput | number | null
    losses?: NullableIntFieldUpdateOperationsInput | number | null
    games_played?: NullableIntFieldUpdateOperationsInput | number | null
    Progress?: NullableIntFieldUpdateOperationsInput | number | null
    Wins_percent?: NullableIntFieldUpdateOperationsInput | number | null
    Losses_percent?: NullableIntFieldUpdateOperationsInput | number | null
    homies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    invited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    homie_id?: NullableIntFieldUpdateOperationsInput | number | null
    stat?: StatUncheckedUpdateOneWithoutUserNestedInput
    achievments?: AchievmentsUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    blockedUser?: BlockedUserUncheckedUpdateManyWithoutUserNestedInput
    freind?: FreindUncheckedUpdateManyWithoutUserNestedInput
    sentDms?: DmUncheckedUpdateManyWithoutSenderNestedInput
    recvDms?: DmUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type ChannelUpsertWithoutUsersInput = {
    update: XOR<ChannelUpdateWithoutUsersInput, ChannelUncheckedUpdateWithoutUsersInput>
    create: XOR<ChannelCreateWithoutUsersInput, ChannelUncheckedCreateWithoutUsersInput>
    where?: ChannelWhereInput
  }

  export type ChannelUpdateToOneWithWhereWithoutUsersInput = {
    where?: ChannelWhereInput
    data: XOR<ChannelUpdateWithoutUsersInput, ChannelUncheckedUpdateWithoutUsersInput>
  }

  export type ChannelUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChannelUncheckedUpdateWithoutUsersInput = {
    id_channel?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DiscussionUpsertWithWhereUniqueWithoutMemberchannelInput = {
    where: DiscussionWhereUniqueInput
    update: XOR<DiscussionUpdateWithoutMemberchannelInput, DiscussionUncheckedUpdateWithoutMemberchannelInput>
    create: XOR<DiscussionCreateWithoutMemberchannelInput, DiscussionUncheckedCreateWithoutMemberchannelInput>
  }

  export type DiscussionUpdateWithWhereUniqueWithoutMemberchannelInput = {
    where: DiscussionWhereUniqueInput
    data: XOR<DiscussionUpdateWithoutMemberchannelInput, DiscussionUncheckedUpdateWithoutMemberchannelInput>
  }

  export type DiscussionUpdateManyWithWhereWithoutMemberchannelInput = {
    where: DiscussionScalarWhereInput
    data: XOR<DiscussionUpdateManyMutationInput, DiscussionUncheckedUpdateManyWithoutMemberchannelInput>
  }

  export type DiscussionScalarWhereInput = {
    AND?: DiscussionScalarWhereInput | DiscussionScalarWhereInput[]
    OR?: DiscussionScalarWhereInput[]
    NOT?: DiscussionScalarWhereInput | DiscussionScalarWhereInput[]
    id_disc?: IntFilter<"Discussion"> | number
    message?: StringFilter<"Discussion"> | string
    dateSent?: DateTimeFilter<"Discussion"> | Date | string
    userId?: IntFilter<"Discussion"> | number
    channelId?: IntFilter<"Discussion"> | number
  }

  export type ChannelBanUpsertWithoutBannedUserInput = {
    update: XOR<ChannelBanUpdateWithoutBannedUserInput, ChannelBanUncheckedUpdateWithoutBannedUserInput>
    create: XOR<ChannelBanCreateWithoutBannedUserInput, ChannelBanUncheckedCreateWithoutBannedUserInput>
    where?: ChannelBanWhereInput
  }

  export type ChannelBanUpdateToOneWithWhereWithoutBannedUserInput = {
    where?: ChannelBanWhereInput
    data: XOR<ChannelBanUpdateWithoutBannedUserInput, ChannelBanUncheckedUpdateWithoutBannedUserInput>
  }

  export type ChannelBanUpdateWithoutBannedUserInput = {
    status_User?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelBanUncheckedUpdateWithoutBannedUserInput = {
    status_User?: StringFieldUpdateOperationsInput | string
  }

  export type MemberChannelCreateWithoutDiscussionsInput = {
    status_UserInChannel: string
    muted?: boolean | null
    period?: Date | string | null
    user: UserCreateNestedOneWithoutChannelsInput
    channel: ChannelCreateNestedOneWithoutUsersInput
    banned?: ChannelBanCreateNestedOneWithoutBannedUserInput
  }

  export type MemberChannelUncheckedCreateWithoutDiscussionsInput = {
    userId: number
    channelId: number
    status_UserInChannel: string
    muted?: boolean | null
    period?: Date | string | null
    banned?: ChannelBanUncheckedCreateNestedOneWithoutBannedUserInput
  }

  export type MemberChannelCreateOrConnectWithoutDiscussionsInput = {
    where: MemberChannelWhereUniqueInput
    create: XOR<MemberChannelCreateWithoutDiscussionsInput, MemberChannelUncheckedCreateWithoutDiscussionsInput>
  }

  export type MemberChannelUpsertWithoutDiscussionsInput = {
    update: XOR<MemberChannelUpdateWithoutDiscussionsInput, MemberChannelUncheckedUpdateWithoutDiscussionsInput>
    create: XOR<MemberChannelCreateWithoutDiscussionsInput, MemberChannelUncheckedCreateWithoutDiscussionsInput>
    where?: MemberChannelWhereInput
  }

  export type MemberChannelUpdateToOneWithWhereWithoutDiscussionsInput = {
    where?: MemberChannelWhereInput
    data: XOR<MemberChannelUpdateWithoutDiscussionsInput, MemberChannelUncheckedUpdateWithoutDiscussionsInput>
  }

  export type MemberChannelUpdateWithoutDiscussionsInput = {
    status_UserInChannel?: StringFieldUpdateOperationsInput | string
    muted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutChannelsNestedInput
    channel?: ChannelUpdateOneRequiredWithoutUsersNestedInput
    banned?: ChannelBanUpdateOneWithoutBannedUserNestedInput
  }

  export type MemberChannelUncheckedUpdateWithoutDiscussionsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    status_UserInChannel?: StringFieldUpdateOperationsInput | string
    muted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banned?: ChannelBanUncheckedUpdateOneWithoutBannedUserNestedInput
  }

  export type MemberChannelCreateWithoutBannedInput = {
    status_UserInChannel: string
    muted?: boolean | null
    period?: Date | string | null
    user: UserCreateNestedOneWithoutChannelsInput
    channel: ChannelCreateNestedOneWithoutUsersInput
    discussions?: DiscussionCreateNestedManyWithoutMemberchannelInput
  }

  export type MemberChannelUncheckedCreateWithoutBannedInput = {
    userId: number
    channelId: number
    status_UserInChannel: string
    muted?: boolean | null
    period?: Date | string | null
    discussions?: DiscussionUncheckedCreateNestedManyWithoutMemberchannelInput
  }

  export type MemberChannelCreateOrConnectWithoutBannedInput = {
    where: MemberChannelWhereUniqueInput
    create: XOR<MemberChannelCreateWithoutBannedInput, MemberChannelUncheckedCreateWithoutBannedInput>
  }

  export type MemberChannelUpsertWithoutBannedInput = {
    update: XOR<MemberChannelUpdateWithoutBannedInput, MemberChannelUncheckedUpdateWithoutBannedInput>
    create: XOR<MemberChannelCreateWithoutBannedInput, MemberChannelUncheckedCreateWithoutBannedInput>
    where?: MemberChannelWhereInput
  }

  export type MemberChannelUpdateToOneWithWhereWithoutBannedInput = {
    where?: MemberChannelWhereInput
    data: XOR<MemberChannelUpdateWithoutBannedInput, MemberChannelUncheckedUpdateWithoutBannedInput>
  }

  export type MemberChannelUpdateWithoutBannedInput = {
    status_UserInChannel?: StringFieldUpdateOperationsInput | string
    muted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutChannelsNestedInput
    channel?: ChannelUpdateOneRequiredWithoutUsersNestedInput
    discussions?: DiscussionUpdateManyWithoutMemberchannelNestedInput
  }

  export type MemberChannelUncheckedUpdateWithoutBannedInput = {
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    status_UserInChannel?: StringFieldUpdateOperationsInput | string
    muted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    discussions?: DiscussionUncheckedUpdateManyWithoutMemberchannelNestedInput
  }

  export type AchievmentsCreateManyUserInput = {
    id?: number
    achieve?: string | null
    msg?: string | null
  }

  export type HistoryCreateManyUserInput = {
    winner?: boolean | null
    id_history?: number
    useravatar?: string | null
    username?: string | null
    userscore?: number | null
    enemyId?: number | null
    enemyname?: string | null
    enemyavatar?: string | null
    enemyscore?: number | null
  }

  export type NotificationCreateManyUserInput = {
    id?: number
    AcceptFriend?: boolean | null
    GameInvitation?: boolean | null
    id_user?: number | null
    email?: string | null
    avatar?: string | null
    name?: string | null
    createdAt?: Date | string
  }

  export type BlockedUserCreateManyUserInput = {
    id?: number
    id_blocked_user: number
  }

  export type FreindCreateManyUserInput = {
    id?: number
    name?: string | null
    id_freind?: number | null
  }

  export type MemberChannelCreateManyUserInput = {
    channelId: number
    status_UserInChannel: string
    muted?: boolean | null
    period?: Date | string | null
  }

  export type DmCreateManySenderInput = {
    id_dm?: number
    receiverId: number
    unread: number
    pinned: boolean
  }

  export type DmCreateManyReceiverInput = {
    id_dm?: number
    senderId: number
    unread: number
    pinned: boolean
  }

  export type AchievmentsUpdateWithoutUserInput = {
    achieve?: NullableStringFieldUpdateOperationsInput | string | null
    msg?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AchievmentsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    achieve?: NullableStringFieldUpdateOperationsInput | string | null
    msg?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AchievmentsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    achieve?: NullableStringFieldUpdateOperationsInput | string | null
    msg?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HistoryUpdateWithoutUserInput = {
    winner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    useravatar?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    userscore?: NullableIntFieldUpdateOperationsInput | number | null
    enemyId?: NullableIntFieldUpdateOperationsInput | number | null
    enemyname?: NullableStringFieldUpdateOperationsInput | string | null
    enemyavatar?: NullableStringFieldUpdateOperationsInput | string | null
    enemyscore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type HistoryUncheckedUpdateWithoutUserInput = {
    winner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    id_history?: IntFieldUpdateOperationsInput | number
    useravatar?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    userscore?: NullableIntFieldUpdateOperationsInput | number | null
    enemyId?: NullableIntFieldUpdateOperationsInput | number | null
    enemyname?: NullableStringFieldUpdateOperationsInput | string | null
    enemyavatar?: NullableStringFieldUpdateOperationsInput | string | null
    enemyscore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type HistoryUncheckedUpdateManyWithoutUserInput = {
    winner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    id_history?: IntFieldUpdateOperationsInput | number
    useravatar?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    userscore?: NullableIntFieldUpdateOperationsInput | number | null
    enemyId?: NullableIntFieldUpdateOperationsInput | number | null
    enemyname?: NullableStringFieldUpdateOperationsInput | string | null
    enemyavatar?: NullableStringFieldUpdateOperationsInput | string | null
    enemyscore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NotificationUpdateWithoutUserInput = {
    AcceptFriend?: NullableBoolFieldUpdateOperationsInput | boolean | null
    GameInvitation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    AcceptFriend?: NullableBoolFieldUpdateOperationsInput | boolean | null
    GameInvitation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    AcceptFriend?: NullableBoolFieldUpdateOperationsInput | boolean | null
    GameInvitation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlockedUserUpdateWithoutUserInput = {
    id_blocked_user?: IntFieldUpdateOperationsInput | number
  }

  export type BlockedUserUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_blocked_user?: IntFieldUpdateOperationsInput | number
  }

  export type BlockedUserUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_blocked_user?: IntFieldUpdateOperationsInput | number
  }

  export type FreindUpdateWithoutUserInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    id_freind?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FreindUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    id_freind?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FreindUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    id_freind?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MemberChannelUpdateWithoutUserInput = {
    status_UserInChannel?: StringFieldUpdateOperationsInput | string
    muted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    channel?: ChannelUpdateOneRequiredWithoutUsersNestedInput
    discussions?: DiscussionUpdateManyWithoutMemberchannelNestedInput
    banned?: ChannelBanUpdateOneWithoutBannedUserNestedInput
  }

  export type MemberChannelUncheckedUpdateWithoutUserInput = {
    channelId?: IntFieldUpdateOperationsInput | number
    status_UserInChannel?: StringFieldUpdateOperationsInput | string
    muted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    discussions?: DiscussionUncheckedUpdateManyWithoutMemberchannelNestedInput
    banned?: ChannelBanUncheckedUpdateOneWithoutBannedUserNestedInput
  }

  export type MemberChannelUncheckedUpdateManyWithoutUserInput = {
    channelId?: IntFieldUpdateOperationsInput | number
    status_UserInChannel?: StringFieldUpdateOperationsInput | string
    muted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DmUpdateWithoutSenderInput = {
    unread?: IntFieldUpdateOperationsInput | number
    pinned?: BoolFieldUpdateOperationsInput | boolean
    receiver?: UserUpdateOneRequiredWithoutRecvDmsNestedInput
    conversation?: ConversationUpdateManyWithoutDmNestedInput
  }

  export type DmUncheckedUpdateWithoutSenderInput = {
    id_dm?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    unread?: IntFieldUpdateOperationsInput | number
    pinned?: BoolFieldUpdateOperationsInput | boolean
    conversation?: ConversationUncheckedUpdateManyWithoutDmNestedInput
  }

  export type DmUncheckedUpdateManyWithoutSenderInput = {
    id_dm?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    unread?: IntFieldUpdateOperationsInput | number
    pinned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DmUpdateWithoutReceiverInput = {
    unread?: IntFieldUpdateOperationsInput | number
    pinned?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutSentDmsNestedInput
    conversation?: ConversationUpdateManyWithoutDmNestedInput
  }

  export type DmUncheckedUpdateWithoutReceiverInput = {
    id_dm?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    unread?: IntFieldUpdateOperationsInput | number
    pinned?: BoolFieldUpdateOperationsInput | boolean
    conversation?: ConversationUncheckedUpdateManyWithoutDmNestedInput
  }

  export type DmUncheckedUpdateManyWithoutReceiverInput = {
    id_dm?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    unread?: IntFieldUpdateOperationsInput | number
    pinned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConversationCreateManyDmInput = {
    id?: number
    text: string
    dateSent?: Date | string
    outgoing: number
    incoming: number
    type: string
  }

  export type ConversationUpdateWithoutDmInput = {
    text?: StringFieldUpdateOperationsInput | string
    dateSent?: DateTimeFieldUpdateOperationsInput | Date | string
    outgoing?: IntFieldUpdateOperationsInput | number
    incoming?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type ConversationUncheckedUpdateWithoutDmInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    dateSent?: DateTimeFieldUpdateOperationsInput | Date | string
    outgoing?: IntFieldUpdateOperationsInput | number
    incoming?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type ConversationUncheckedUpdateManyWithoutDmInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    dateSent?: DateTimeFieldUpdateOperationsInput | Date | string
    outgoing?: IntFieldUpdateOperationsInput | number
    incoming?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type MemberChannelCreateManyChannelInput = {
    userId: number
    status_UserInChannel: string
    muted?: boolean | null
    period?: Date | string | null
  }

  export type MemberChannelUpdateWithoutChannelInput = {
    status_UserInChannel?: StringFieldUpdateOperationsInput | string
    muted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutChannelsNestedInput
    discussions?: DiscussionUpdateManyWithoutMemberchannelNestedInput
    banned?: ChannelBanUpdateOneWithoutBannedUserNestedInput
  }

  export type MemberChannelUncheckedUpdateWithoutChannelInput = {
    userId?: IntFieldUpdateOperationsInput | number
    status_UserInChannel?: StringFieldUpdateOperationsInput | string
    muted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    discussions?: DiscussionUncheckedUpdateManyWithoutMemberchannelNestedInput
    banned?: ChannelBanUncheckedUpdateOneWithoutBannedUserNestedInput
  }

  export type MemberChannelUncheckedUpdateManyWithoutChannelInput = {
    userId?: IntFieldUpdateOperationsInput | number
    status_UserInChannel?: StringFieldUpdateOperationsInput | string
    muted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DiscussionCreateManyMemberchannelInput = {
    id_disc?: number
    message: string
    dateSent?: Date | string
  }

  export type DiscussionUpdateWithoutMemberchannelInput = {
    message?: StringFieldUpdateOperationsInput | string
    dateSent?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionUncheckedUpdateWithoutMemberchannelInput = {
    id_disc?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    dateSent?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionUncheckedUpdateManyWithoutMemberchannelInput = {
    id_disc?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    dateSent?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DmCountOutputTypeDefaultArgs instead
     */
    export type DmCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DmCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChannelCountOutputTypeDefaultArgs instead
     */
    export type ChannelCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChannelCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MemberChannelCountOutputTypeDefaultArgs instead
     */
    export type MemberChannelCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MemberChannelCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AchievmentsDefaultArgs instead
     */
    export type AchievmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AchievmentsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatDefaultArgs instead
     */
    export type StatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HistoryDefaultArgs instead
     */
    export type HistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BlockedUserDefaultArgs instead
     */
    export type BlockedUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BlockedUserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FreindDefaultArgs instead
     */
    export type FreindArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FreindDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DmDefaultArgs instead
     */
    export type DmArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DmDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConversationDefaultArgs instead
     */
    export type ConversationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConversationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChannelDefaultArgs instead
     */
    export type ChannelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChannelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MemberChannelDefaultArgs instead
     */
    export type MemberChannelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MemberChannelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DiscussionDefaultArgs instead
     */
    export type DiscussionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DiscussionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChannelBanDefaultArgs instead
     */
    export type ChannelBanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChannelBanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use saveBannedDefaultArgs instead
     */
    export type saveBannedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = saveBannedDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}